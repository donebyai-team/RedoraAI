syntax = "proto3";

package doota.core.v1;

option go_package = "github.com/shank318/doota/pb/doota/core/v1;pbcore";
import "google/protobuf/timestamp.proto";

import "google/protobuf/any.proto";



// TzTimestamp is a wrapper around Timestamp that includes a timezone offset
// for displaying time in a specific timezone. Although timestamps are stored
// with their extracted timezone offsets in the database (e.g., 2024-10-23 16:19:23 EST
// is stored as "2024-10-23T16:19:23-05:00" in the DB and not its UTC equivalent of "2024-10-23T21:19:23Z"),
// we want to ensure they are displayed consistently in the timezone they were extracted from.
//
// We cannot use the basic Timestamp object from protobuf because it only
// represents a UTC timestamp without a timezone offset.
//
// Example:
//     Suppose we have an extracted timestamp of "2024-10-23 16:19:23 EST".
//     In the database, it will be stored as "2024-10-23T16:19:23-05:00",
//     preserving the extracted timezone. The TzTimestamp representation would be:
//
//     TzTimestamp {
//         timestamp = 1730233163  // UTC seconds since Unix epoch for 2024-10-23T16:19:23-05:00
//         offset = -5
//     }
message TzTimestamp {
  google.protobuf.Timestamp timestamp = 1;
  int32  offset = 2;
}


message Identity {
  string user_id = 1;
  string organization_id = 2;
  IdentityRole role = 3;
}

enum PlatformError {
    PLATFORM_ERROR_UNSPECIFIED = 0;
    PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS = 1;
    PLATFORM_ERROR_INVALID_QUOTE = 2;
    PLATFORM_UNAUTHORIZED_ACCESS = 3;
    PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG = 4;
}

message PlatformErrorDetails {
    PlatformError error = 1;
    google.protobuf.Any details = 2;
}

enum IdentityRole {
  IDENTITY_ROLE_UNSPECIFIED = 0;
  IDENTITY_ROLE_USER = 1;
  IDENTITY_ROLE_ADMIN = 2;
  IDENTITY_ROLE_PLATFORM_ADMIN = 3;
}