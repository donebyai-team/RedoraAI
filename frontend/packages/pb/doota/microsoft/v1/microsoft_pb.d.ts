// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file doota/microsoft/v1/microsoft.proto (package doota.microsoft.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file doota/microsoft/v1/microsoft.proto.
 */
export declare const file_doota_microsoft_v1_microsoft: GenFile;

/**
 * @generated from message doota.microsoft.v1.Integration
 */
export declare type Integration = Message<"doota.microsoft.v1.Integration"> & {
  /**
   * @generated from field: string tenant = 1;
   */
  tenant: string;

  /**
   * @generated from field: repeated doota.microsoft.v1.User users = 2;
   */
  users: User[];
};

/**
 * Describes the message doota.microsoft.v1.Integration.
 * Use `create(IntegrationSchema)` to create a new message.
 */
export declare const IntegrationSchema: GenMessage<Integration>;

/**
 * @generated from message doota.microsoft.v1.SetupMailboxSubscriptionRequest
 */
export declare type SetupMailboxSubscriptionRequest = Message<"doota.microsoft.v1.SetupMailboxSubscriptionRequest"> & {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId: string;

  /**
   * corresponds to the message source id, this is the id that will be used
   * in the subscription webhook URL
   *
   * @generated from field: string subscription_internal_id = 2;
   */
  subscriptionInternalId: string;

  /**
   * this is a secret that we will use to validate the inbound subscription webhook
   *
   * @generated from field: string subscription_secret = 3;
   */
  subscriptionSecret: string;

  /**
   * @generated from field: string user_id = 4;
   */
  userId: string;
};

/**
 * Describes the message doota.microsoft.v1.SetupMailboxSubscriptionRequest.
 * Use `create(SetupMailboxSubscriptionRequestSchema)` to create a new message.
 */
export declare const SetupMailboxSubscriptionRequestSchema: GenMessage<SetupMailboxSubscriptionRequest>;

/**
 * @generated from message doota.microsoft.v1.SetupMailboxSubscriptionResponse
 */
export declare type SetupMailboxSubscriptionResponse = Message<"doota.microsoft.v1.SetupMailboxSubscriptionResponse"> & {
  /**
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * @generated from field: string user_id = 2;
   */
  userId: string;

  /**
   * @generated from field: string subscription_id = 3;
   */
  subscriptionId: string;
};

/**
 * Describes the message doota.microsoft.v1.SetupMailboxSubscriptionResponse.
 * Use `create(SetupMailboxSubscriptionResponseSchema)` to create a new message.
 */
export declare const SetupMailboxSubscriptionResponseSchema: GenMessage<SetupMailboxSubscriptionResponse>;

/**
 * @generated from message doota.microsoft.v1.RenewMailboxSubscriptionResponse
 */
export declare type RenewMailboxSubscriptionResponse = Message<"doota.microsoft.v1.RenewMailboxSubscriptionResponse"> & {
  /**
   * @generated from field: string new_subscription_id = 3;
   */
  newSubscriptionId: string;
};

/**
 * Describes the message doota.microsoft.v1.RenewMailboxSubscriptionResponse.
 * Use `create(RenewMailboxSubscriptionResponseSchema)` to create a new message.
 */
export declare const RenewMailboxSubscriptionResponseSchema: GenMessage<RenewMailboxSubscriptionResponse>;

/**
 * @generated from message doota.microsoft.v1.RenewMailboxSubscriptionRequest
 */
export declare type RenewMailboxSubscriptionRequest = Message<"doota.microsoft.v1.RenewMailboxSubscriptionRequest"> & {
  /**
   * microsft subcription id
   *
   * @generated from field: string subscription_id = 1;
   */
  subscriptionId: string;

  /**
   * @generated from field: string tenant_id = 2;
   */
  tenantId: string;

  /**
   * corresponds to the message source id, this is the id that will be used
   * in the subscription webhook URL
   *
   * @generated from field: string subscription_internal_id = 3;
   */
  subscriptionInternalId: string;

  /**
   * this is a secret that we will use to validate the inbound subscription webhook
   *
   * @generated from field: string subscription_secret = 4;
   */
  subscriptionSecret: string;

  /**
   * @generated from field: string user_id = 5;
   */
  userId: string;
};

/**
 * Describes the message doota.microsoft.v1.RenewMailboxSubscriptionRequest.
 * Use `create(RenewMailboxSubscriptionRequestSchema)` to create a new message.
 */
export declare const RenewMailboxSubscriptionRequestSchema: GenMessage<RenewMailboxSubscriptionRequest>;

/**
 * @generated from message doota.microsoft.v1.User
 */
export declare type User = Message<"doota.microsoft.v1.User"> & {
  /**
   * microsoft user's id
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * microsoft user's email
   *
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * microsoft user's name
   *
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * freighstream system user id
   *
   * @generated from field: optional string user_id = 4;
   */
  userId?: string;

  /**
   * freighstream system message source id ID
   *
   * @generated from field: optional string message_source_id = 5;
   */
  messageSourceId?: string;

  /**
   * @generated from field: bool active_subscription = 6;
   */
  activeSubscription: boolean;
};

/**
 * Describes the message doota.microsoft.v1.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * @generated from message doota.microsoft.v1.GetIntegrationRequest
 */
export declare type GetIntegrationRequest = Message<"doota.microsoft.v1.GetIntegrationRequest"> & {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId: string;
};

/**
 * Describes the message doota.microsoft.v1.GetIntegrationRequest.
 * Use `create(GetIntegrationRequestSchema)` to create a new message.
 */
export declare const GetIntegrationRequestSchema: GenMessage<GetIntegrationRequest>;

/**
 * @generated from message doota.microsoft.v1.Notification
 */
export declare type Notification = Message<"doota.microsoft.v1.Notification"> & {
  /**
   * FreigthStream: generate UUID for the inbound HTTP request, linked in logs
   *
   * @generated from field: string request_id = 1;
   */
  requestId: string;

  /**
   * FreigthStream: message source id
   *
   * @generated from field: string message_source_id = 15;
   */
  messageSourceId: string;

  /**
   * FreigthStream: The date and time when the webhook event was emitted.
   *
   * @generated from field: string received_at = 2;
   */
  receivedAt: string;

  /**
   * Microsoft: Unique ID for the notification. Optional.
   *
   * @generated from field: optional string notification_id = 3;
   */
  notificationId?: string;

  /**
   * LoadLogic: either "message" or "status" depeneing on the msoft endpoint
   *
   * @generated from field: string notification_type = 4;
   */
  notificationType: string;

  /**
   * Microsoft: The unique identifier of the subscription that generated the notification.Required.
   *
   * @generated from field: string subscription_id = 5;
   */
  subscriptionId: string;

  /**
   * Microsoft: The expiration time for the subscription. Required.
   *
   * @generated from field: optional string subscription_expiration_date_time = 6;
   */
  subscriptionExpirationDateTime?: string;

  /**
   * Microsoft: The unique identifier of the tenant from which the change notification originated. Required.
   *
   * @generated from field: string tenant_id = 7;
   */
  tenantId: string;

  /**
   * Microsoft: The type of lifecycle notification if the current notification is a lifecycle notification. Optional. Supported values are missed, subscriptionRemoved, reauthorizationRequired. Optional.
   *
   * @generated from field: optional string lifecycle_event = 8;
   */
  lifecycleEvent?: string;

  /**
   * //-----------------------------------------------
   * / These are only set when Type = message
   * //-----------------------------------------------
   * Microsoft: Indicates the type of change that will raise the change notification. The supported values are: created, updated, deleted. Required
   *
   * @generated from field: optional string change_type = 9;
   */
  changeType?: string;

  /**
   * Microsoft: The URI of the resource that emitted the change notification relative to https://graph.microsoft.com. Required.
   *
   * @generated from field: optional string resource_uri = 10;
   */
  resourceUri?: string;

  /**
   * The content of this property depends on the type of resource being subscribed to. Optional.
   * Microsoft: The OData entity type in Microsoft Graph that describes the represented object.
   *
   * @generated from field: optional string resource_odata_type = 11;
   */
  resourceOdataType?: string;

  /**
   * Microsoft: The OData identifier of the object.
   *
   * @generated from field: optional string resource_odata_id = 12;
   */
  resourceOdataId?: string;

  /**
   * Microsoft: The HTTP entity tag that represents the version of the object.
   *
   * @generated from field: optional string resource_odata_etag = 13;
   */
  resourceOdataEtag?: string;

  /**
   * Microsoft: The identifier of the object.
   *
   * @generated from field: optional string resource_id = 14;
   */
  resourceId?: string;

  /**
   * FreigthStream: message source id
   *
   * @generated from field: optional string conversation_id = 16;
   */
  conversationId?: string;

  /**
   * @generated from field: optional uint64 conversation_index = 17;
   */
  conversationIndex?: bigint;

  /**
   * @generated from field: optional string handling_error = 18;
   */
  handlingError?: string;
};

/**
 * Describes the message doota.microsoft.v1.Notification.
 * Use `create(NotificationSchema)` to create a new message.
 */
export declare const NotificationSchema: GenMessage<Notification>;

/**
 * @generated from service doota.microsoft.v1.MicrosoftService
 */
export declare const MicrosoftService: GenService<{
  /**
   * @generated from rpc doota.microsoft.v1.MicrosoftService.SetupMailboxSubscription
   */
  setupMailboxSubscription: {
    methodKind: "unary";
    input: typeof SetupMailboxSubscriptionRequestSchema;
    output: typeof SetupMailboxSubscriptionResponseSchema;
  },
  /**
   * @generated from rpc doota.microsoft.v1.MicrosoftService.RenewMailboxSubscription
   */
  renewMailboxSubscription: {
    methodKind: "unary";
    input: typeof RenewMailboxSubscriptionRequestSchema;
    output: typeof RenewMailboxSubscriptionResponseSchema;
  },
  /**
   * @generated from rpc doota.microsoft.v1.MicrosoftService.GetIntegration
   */
  getIntegration: {
    methodKind: "unary";
    input: typeof GetIntegrationRequestSchema;
    output: typeof IntegrationSchema;
  },
}>;

