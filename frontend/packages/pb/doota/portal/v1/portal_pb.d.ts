// @generated by protoc-gen-es v2.0.0 with parameter "target=js+dts"
// @generated from file doota/portal/v1/portal.proto (package doota.portal.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Keyword, Lead, LeadStatus, Project, ProjectSchema, Source, SourceSchema, Subscription } from "../../core/v1/core_pb";
import type { EmptySchema, Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file doota/portal/v1/portal.proto.
 */
export declare const file_doota_portal_v1_portal: GenFile;

/**
 * @generated from message doota.portal.v1.ConnectRedditResponse
 */
export declare type ConnectRedditResponse = Message<"doota.portal.v1.ConnectRedditResponse"> & {
  /**
   * @generated from oneof doota.portal.v1.ConnectRedditResponse.message
   */
  message: {
    /**
     * @generated from field: doota.portal.v1.UrlMessage url = 1;
     */
    value: UrlMessage;
    case: "url";
  } | {
    /**
     * @generated from field: doota.portal.v1.TaskResult task_result = 2;
     */
    value: TaskResult;
    case: "taskResult";
  } | {
    /**
     * @generated from field: doota.portal.v1.ErrorMessage error = 3;
     */
    value: ErrorMessage;
    case: "error";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message doota.portal.v1.ConnectRedditResponse.
 * Use `create(ConnectRedditResponseSchema)` to create a new message.
 */
export declare const ConnectRedditResponseSchema: GenMessage<ConnectRedditResponse>;

/**
 * @generated from message doota.portal.v1.UrlMessage
 */
export declare type UrlMessage = Message<"doota.portal.v1.UrlMessage"> & {
  /**
   * @generated from field: string url = 1;
   */
  url: string;
};

/**
 * Describes the message doota.portal.v1.UrlMessage.
 * Use `create(UrlMessageSchema)` to create a new message.
 */
export declare const UrlMessageSchema: GenMessage<UrlMessage>;

/**
 * @generated from message doota.portal.v1.TaskResult
 */
export declare type TaskResult = Message<"doota.portal.v1.TaskResult"> & {
  /**
   * @generated from field: string result = 1;
   */
  result: string;
};

/**
 * Describes the message doota.portal.v1.TaskResult.
 * Use `create(TaskResultSchema)` to create a new message.
 */
export declare const TaskResultSchema: GenMessage<TaskResult>;

/**
 * @generated from message doota.portal.v1.ErrorMessage
 */
export declare type ErrorMessage = Message<"doota.portal.v1.ErrorMessage"> & {
  /**
   * @generated from field: string error = 1;
   */
  error: string;
};

/**
 * Describes the message doota.portal.v1.ErrorMessage.
 * Use `create(ErrorMessageSchema)` to create a new message.
 */
export declare const ErrorMessageSchema: GenMessage<ErrorMessage>;

/**
 * @generated from message doota.portal.v1.UpdateAutomationSettingRequest
 */
export declare type UpdateAutomationSettingRequest = Message<"doota.portal.v1.UpdateAutomationSettingRequest"> & {
  /**
   * @generated from field: doota.portal.v1.AutomationSetting dm = 1;
   */
  dm?: AutomationSetting;

  /**
   * @generated from field: doota.portal.v1.AutomationSetting comment = 2;
   */
  comment?: AutomationSetting;
};

/**
 * Describes the message doota.portal.v1.UpdateAutomationSettingRequest.
 * Use `create(UpdateAutomationSettingRequestSchema)` to create a new message.
 */
export declare const UpdateAutomationSettingRequestSchema: GenMessage<UpdateAutomationSettingRequest>;

/**
 * @generated from message doota.portal.v1.CreateKeywordsRes
 */
export declare type CreateKeywordsRes = Message<"doota.portal.v1.CreateKeywordsRes"> & {
  /**
   * @generated from field: repeated doota.core.v1.Keyword keywords = 1;
   */
  keywords: Keyword[];
};

/**
 * Describes the message doota.portal.v1.CreateKeywordsRes.
 * Use `create(CreateKeywordsResSchema)` to create a new message.
 */
export declare const CreateKeywordsResSchema: GenMessage<CreateKeywordsRes>;

/**
 * @generated from message doota.portal.v1.CreateProjectRequest
 */
export declare type CreateProjectRequest = Message<"doota.portal.v1.CreateProjectRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: string website = 4;
   */
  website: string;

  /**
   * @generated from field: string target_persona = 5;
   */
  targetPersona: string;
};

/**
 * Describes the message doota.portal.v1.CreateProjectRequest.
 * Use `create(CreateProjectRequestSchema)` to create a new message.
 */
export declare const CreateProjectRequestSchema: GenMessage<CreateProjectRequest>;

/**
 * @generated from message doota.portal.v1.UpdateLeadStatusRequest
 */
export declare type UpdateLeadStatusRequest = Message<"doota.portal.v1.UpdateLeadStatusRequest"> & {
  /**
   * @generated from field: doota.core.v1.LeadStatus status = 1;
   */
  status: LeadStatus;

  /**
   * @generated from field: string lead_id = 2;
   */
  leadId: string;
};

/**
 * Describes the message doota.portal.v1.UpdateLeadStatusRequest.
 * Use `create(UpdateLeadStatusRequestSchema)` to create a new message.
 */
export declare const UpdateLeadStatusRequestSchema: GenMessage<UpdateLeadStatusRequest>;

/**
 * @generated from message doota.portal.v1.GetLeadsByStatusRequest
 */
export declare type GetLeadsByStatusRequest = Message<"doota.portal.v1.GetLeadsByStatusRequest"> & {
  /**
   * @generated from field: doota.core.v1.LeadStatus status = 1;
   */
  status: LeadStatus;

  /**
   * @generated from field: int32 page_no = 3;
   */
  pageNo: number;

  /**
   * @generated from field: doota.portal.v1.DateRangeFilter date_range = 4;
   */
  dateRange: DateRangeFilter;

  /**
   * @generated from field: int32 page_count = 5;
   */
  pageCount: number;
};

/**
 * Describes the message doota.portal.v1.GetLeadsByStatusRequest.
 * Use `create(GetLeadsByStatusRequestSchema)` to create a new message.
 */
export declare const GetLeadsByStatusRequestSchema: GenMessage<GetLeadsByStatusRequest>;

/**
 * @generated from message doota.portal.v1.GetRelevantLeadsRequest
 */
export declare type GetRelevantLeadsRequest = Message<"doota.portal.v1.GetRelevantLeadsRequest"> & {
  /**
   * @generated from field: optional string sub_reddit = 1;
   */
  subReddit?: string;

  /**
   * @generated from field: float relevancy_score = 2;
   */
  relevancyScore: number;

  /**
   * @generated from field: int32 page_no = 3;
   */
  pageNo: number;

  /**
   * @generated from field: doota.portal.v1.DateRangeFilter date_range = 4;
   */
  dateRange: DateRangeFilter;

  /**
   * @generated from field: doota.core.v1.LeadStatus status = 5;
   */
  status: LeadStatus;

  /**
   * @generated from field: int32 page_count = 6;
   */
  pageCount: number;
};

/**
 * Describes the message doota.portal.v1.GetRelevantLeadsRequest.
 * Use `create(GetRelevantLeadsRequestSchema)` to create a new message.
 */
export declare const GetRelevantLeadsRequestSchema: GenMessage<GetRelevantLeadsRequest>;

/**
 * @generated from message doota.portal.v1.GetLeadsResponse
 */
export declare type GetLeadsResponse = Message<"doota.portal.v1.GetLeadsResponse"> & {
  /**
   * @generated from field: repeated doota.core.v1.Lead leads = 1;
   */
  leads: Lead[];

  /**
   * @generated from field: doota.portal.v1.LeadAnalysis analysis = 2;
   */
  analysis?: LeadAnalysis;
};

/**
 * Describes the message doota.portal.v1.GetLeadsResponse.
 * Use `create(GetLeadsResponseSchema)` to create a new message.
 */
export declare const GetLeadsResponseSchema: GenMessage<GetLeadsResponse>;

/**
 * @generated from message doota.portal.v1.LeadAnalysis
 */
export declare type LeadAnalysis = Message<"doota.portal.v1.LeadAnalysis"> & {
  /**
   * @generated from field: uint32 posts_tracked = 1;
   */
  postsTracked: number;

  /**
   * @generated from field: uint32 relevant_posts_found = 2;
   */
  relevantPostsFound: number;

  /**
   * @generated from field: uint32 comment_sent = 3;
   */
  commentSent: number;

  /**
   * @generated from field: uint32 comment_scheduled = 4;
   */
  commentScheduled: number;

  /**
   * @generated from field: uint32 dm_sent = 5;
   */
  dmSent: number;

  /**
   * @generated from field: uint32 dm_scheduled = 6;
   */
  dmScheduled: number;
};

/**
 * Describes the message doota.portal.v1.LeadAnalysis.
 * Use `create(LeadAnalysisSchema)` to create a new message.
 */
export declare const LeadAnalysisSchema: GenMessage<LeadAnalysis>;

/**
 * @generated from message doota.portal.v1.AddSourceRequest
 */
export declare type AddSourceRequest = Message<"doota.portal.v1.AddSourceRequest"> & {
  /**
   * eg. r/SAAS
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message doota.portal.v1.AddSourceRequest.
 * Use `create(AddSourceRequestSchema)` to create a new message.
 */
export declare const AddSourceRequestSchema: GenMessage<AddSourceRequest>;

/**
 * @generated from message doota.portal.v1.GetSourceResponse
 */
export declare type GetSourceResponse = Message<"doota.portal.v1.GetSourceResponse"> & {
  /**
   * @generated from field: repeated doota.core.v1.Source sources = 1;
   */
  sources: Source[];
};

/**
 * Describes the message doota.portal.v1.GetSourceResponse.
 * Use `create(GetSourceResponseSchema)` to create a new message.
 */
export declare const GetSourceResponseSchema: GenMessage<GetSourceResponse>;

/**
 * @generated from message doota.portal.v1.RemoveSourceRequest
 */
export declare type RemoveSourceRequest = Message<"doota.portal.v1.RemoveSourceRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message doota.portal.v1.RemoveSourceRequest.
 * Use `create(RemoveSourceRequestSchema)` to create a new message.
 */
export declare const RemoveSourceRequestSchema: GenMessage<RemoveSourceRequest>;

/**
 * @generated from message doota.portal.v1.CreateCustomerCaseReq
 */
export declare type CreateCustomerCaseReq = Message<"doota.portal.v1.CreateCustomerCaseReq"> & {
  /**
   * @generated from field: string first_name = 1;
   */
  firstName: string;

  /**
   * @generated from field: string last_name = 2;
   */
  lastName: string;

  /**
   * @generated from field: string phone = 3;
   */
  phone: string;

  /**
   * @generated from field: string organization_id = 4;
   */
  organizationId: string;

  /**
   * @generated from field: string due_date = 5;
   */
  dueDate: string;

  /**
   * @generated from field: string prompt_type = 6;
   */
  promptType: string;
};

/**
 * Describes the message doota.portal.v1.CreateCustomerCaseReq.
 * Use `create(CreateCustomerCaseReqSchema)` to create a new message.
 */
export declare const CreateCustomerCaseReqSchema: GenMessage<CreateCustomerCaseReq>;

/**
 * @generated from message doota.portal.v1.CreateKeywordReq
 */
export declare type CreateKeywordReq = Message<"doota.portal.v1.CreateKeywordReq"> & {
  /**
   * @generated from field: repeated string keywords = 1;
   */
  keywords: string[];
};

/**
 * Describes the message doota.portal.v1.CreateKeywordReq.
 * Use `create(CreateKeywordReqSchema)` to create a new message.
 */
export declare const CreateKeywordReqSchema: GenMessage<CreateKeywordReq>;

/**
 * @generated from message doota.portal.v1.BatchReq
 */
export declare type BatchReq = Message<"doota.portal.v1.BatchReq"> & {
  /**
   * @generated from field: bytes csv_data = 1;
   */
  csvData: Uint8Array;

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId: string;
};

/**
 * Describes the message doota.portal.v1.BatchReq.
 * Use `create(BatchReqSchema)` to create a new message.
 */
export declare const BatchReqSchema: GenMessage<BatchReq>;

/**
 * @generated from message doota.portal.v1.BatchResp
 */
export declare type BatchResp = Message<"doota.portal.v1.BatchResp"> & {
  /**
   * @generated from field: int32 rows = 1;
   */
  rows: number;

  /**
   * @generated from field: int32 rows_extracted = 2;
   */
  rowsExtracted: number;

  /**
   * @generated from field: repeated string rejected_rows = 3;
   */
  rejectedRows: string[];
};

/**
 * Describes the message doota.portal.v1.BatchResp.
 * Use `create(BatchRespSchema)` to create a new message.
 */
export declare const BatchRespSchema: GenMessage<BatchResp>;

/**
 * @generated from message doota.portal.v1.Config
 */
export declare type Config = Message<"doota.portal.v1.Config"> & {
  /**
   * @generated from field: string auth0_domain = 1;
   */
  auth0Domain: string;

  /**
   * @generated from field: string auth0_client_id = 2;
   */
  auth0ClientId: string;

  /**
   * @generated from field: string auth0_scope = 3;
   */
  auth0Scope: string;

  /**
   * @generated from field: string msoft_auth0_callback_url = 4;
   */
  msoftAuth0CallbackUrl: string;

  /**
   * @generated from field: string full_story_org_id = 5;
   */
  fullStoryOrgId: string;

  /**
   * @generated from field: string google_auth0_callback_url = 6;
   */
  googleAuth0CallbackUrl: string;
};

/**
 * Describes the message doota.portal.v1.Config.
 * Use `create(ConfigSchema)` to create a new message.
 */
export declare const ConfigSchema: GenMessage<Config>;

/**
 * @generated from message doota.portal.v1.PasswordlessStartRequest
 */
export declare type PasswordlessStartRequest = Message<"doota.portal.v1.PasswordlessStartRequest"> & {
  /**
   * @generated from field: string redirect_uri = 1;
   */
  redirectUri: string;

  /**
   * @generated from field: string email = 2;
   */
  email: string;
};

/**
 * Describes the message doota.portal.v1.PasswordlessStartRequest.
 * Use `create(PasswordlessStartRequestSchema)` to create a new message.
 */
export declare const PasswordlessStartRequestSchema: GenMessage<PasswordlessStartRequest>;

/**
 * @generated from message doota.portal.v1.PasswordlessStartVerify
 */
export declare type PasswordlessStartVerify = Message<"doota.portal.v1.PasswordlessStartVerify"> & {
  /**
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * @generated from field: string code = 2;
   */
  code: string;
};

/**
 * Describes the message doota.portal.v1.PasswordlessStartVerify.
 * Use `create(PasswordlessStartVerifySchema)` to create a new message.
 */
export declare const PasswordlessStartVerifySchema: GenMessage<PasswordlessStartVerify>;

/**
 * @generated from message doota.portal.v1.AuthStateRequest
 */
export declare type AuthStateRequest = Message<"doota.portal.v1.AuthStateRequest"> & {
  /**
   * @generated from field: string redirect_uri = 1;
   */
  redirectUri: string;
};

/**
 * Describes the message doota.portal.v1.AuthStateRequest.
 * Use `create(AuthStateRequestSchema)` to create a new message.
 */
export declare const AuthStateRequestSchema: GenMessage<AuthStateRequest>;

/**
 * @generated from message doota.portal.v1.State
 */
export declare type State = Message<"doota.portal.v1.State"> & {
  /**
   * @generated from field: string state = 1;
   */
  state: string;

  /**
   * @generated from field: string nonce = 2;
   */
  nonce: string;
};

/**
 * Describes the message doota.portal.v1.State.
 * Use `create(StateSchema)` to create a new message.
 */
export declare const StateSchema: GenMessage<State>;

/**
 * @generated from message doota.portal.v1.User
 */
export declare type User = Message<"doota.portal.v1.User"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string email = 2;
   */
  email: string;

  /**
   * @generated from field: bool email_verified = 3;
   */
  emailVerified: boolean;

  /**
   * @generated from field: doota.portal.v1.UserRole role = 4;
   */
  role: UserRole;

  /**
   * @generated from field: repeated doota.portal.v1.Organization organizations = 7;
   */
  organizations: Organization[];

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: repeated doota.core.v1.Project projects = 11;
   */
  projects: Project[];

  /**
   * @generated from field: bool is_onboarding_done = 12;
   */
  isOnboardingDone: boolean;
};

/**
 * Describes the message doota.portal.v1.User.
 * Use `create(UserSchema)` to create a new message.
 */
export declare const UserSchema: GenMessage<User>;

/**
 * @generated from message doota.portal.v1.OauthAuthorizeRequest
 */
export declare type OauthAuthorizeRequest = Message<"doota.portal.v1.OauthAuthorizeRequest"> & {
  /**
   * @generated from field: doota.portal.v1.IntegrationType integration_type = 1;
   */
  integrationType: IntegrationType;

  /**
   * @generated from field: string redirect_url = 2;
   */
  redirectUrl: string;
};

/**
 * Describes the message doota.portal.v1.OauthAuthorizeRequest.
 * Use `create(OauthAuthorizeRequestSchema)` to create a new message.
 */
export declare const OauthAuthorizeRequestSchema: GenMessage<OauthAuthorizeRequest>;

/**
 * @generated from message doota.portal.v1.OauthAuthorizeResponse
 */
export declare type OauthAuthorizeResponse = Message<"doota.portal.v1.OauthAuthorizeResponse"> & {
  /**
   * @generated from field: string authorize_url = 1;
   */
  authorizeUrl: string;
};

/**
 * Describes the message doota.portal.v1.OauthAuthorizeResponse.
 * Use `create(OauthAuthorizeResponseSchema)` to create a new message.
 */
export declare const OauthAuthorizeResponseSchema: GenMessage<OauthAuthorizeResponse>;

/**
 * @generated from message doota.portal.v1.IssueRequest
 */
export declare type IssueRequest = Message<"doota.portal.v1.IssueRequest"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * @generated from field: string state = 2;
   */
  state: string;
};

/**
 * Describes the message doota.portal.v1.IssueRequest.
 * Use `create(IssueRequestSchema)` to create a new message.
 */
export declare const IssueRequestSchema: GenMessage<IssueRequest>;

/**
 * @generated from message doota.portal.v1.JWT
 */
export declare type JWT = Message<"doota.portal.v1.JWT"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;

  /**
   * @generated from field: int64 expires_at = 2;
   */
  expiresAt: bigint;
};

/**
 * Describes the message doota.portal.v1.JWT.
 * Use `create(JWTSchema)` to create a new message.
 */
export declare const JWTSchema: GenMessage<JWT>;

/**
 * @generated from message doota.portal.v1.Organization
 */
export declare type Organization = Message<"doota.portal.v1.Organization"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: doota.portal.v1.OrganizationFeatureFlags feature_flags = 3;
   */
  featureFlags?: OrganizationFeatureFlags;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 4;
   */
  createdAt?: Timestamp;
};

/**
 * Describes the message doota.portal.v1.Organization.
 * Use `create(OrganizationSchema)` to create a new message.
 */
export declare const OrganizationSchema: GenMessage<Organization>;

/**
 * @generated from message doota.portal.v1.OrganizationFeatureFlags
 */
export declare type OrganizationFeatureFlags = Message<"doota.portal.v1.OrganizationFeatureFlags"> & {
  /**
   * @generated from field: doota.core.v1.Subscription subscription = 1;
   */
  subscription?: Subscription;

  /**
   * @generated from field: doota.portal.v1.AutomationSetting DM = 2;
   */
  DM?: AutomationSetting;

  /**
   * @generated from field: doota.portal.v1.AutomationSetting Comment = 3;
   */
  Comment?: AutomationSetting;
};

/**
 * Describes the message doota.portal.v1.OrganizationFeatureFlags.
 * Use `create(OrganizationFeatureFlagsSchema)` to create a new message.
 */
export declare const OrganizationFeatureFlagsSchema: GenMessage<OrganizationFeatureFlags>;

/**
 * @generated from message doota.portal.v1.AutomationSetting
 */
export declare type AutomationSetting = Message<"doota.portal.v1.AutomationSetting"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: float relevancy_score = 2;
   */
  relevancyScore: number;

  /**
   * @generated from field: int64 max_per_day = 3;
   */
  maxPerDay: bigint;
};

/**
 * Describes the message doota.portal.v1.AutomationSetting.
 * Use `create(AutomationSettingSchema)` to create a new message.
 */
export declare const AutomationSettingSchema: GenMessage<AutomationSetting>;

/**
 * @generated from message doota.portal.v1.Integration
 */
export declare type Integration = Message<"doota.portal.v1.Integration"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string organization_id = 2;
   */
  organizationId: string;

  /**
   * @generated from field: doota.portal.v1.IntegrationType type = 3;
   */
  type: IntegrationType;

  /**
   * @generated from field: doota.portal.v1.IntegrationState status = 4;
   */
  status: IntegrationState;

  /**
   * @generated from oneof doota.portal.v1.Integration.details
   */
  details: {
    /**
     * @generated from field: doota.portal.v1.RedditIntegration reddit = 6;
     */
    value: RedditIntegration;
    case: "reddit";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message doota.portal.v1.Integration.
 * Use `create(IntegrationSchema)` to create a new message.
 */
export declare const IntegrationSchema: GenMessage<Integration>;

/**
 * @generated from message doota.portal.v1.RedditIntegration
 */
export declare type RedditIntegration = Message<"doota.portal.v1.RedditIntegration"> & {
  /**
   * @generated from field: string user_name = 1;
   */
  userName: string;
};

/**
 * Describes the message doota.portal.v1.RedditIntegration.
 * Use `create(RedditIntegrationSchema)` to create a new message.
 */
export declare const RedditIntegrationSchema: GenMessage<RedditIntegration>;

/**
 * @generated from message doota.portal.v1.Integrations
 */
export declare type Integrations = Message<"doota.portal.v1.Integrations"> & {
  /**
   * @generated from field: repeated doota.portal.v1.Integration integrations = 1;
   */
  integrations: Integration[];
};

/**
 * Describes the message doota.portal.v1.Integrations.
 * Use `create(IntegrationsSchema)` to create a new message.
 */
export declare const IntegrationsSchema: GenMessage<Integrations>;

/**
 * @generated from message doota.portal.v1.GetIntegrationRequest
 */
export declare type GetIntegrationRequest = Message<"doota.portal.v1.GetIntegrationRequest"> & {
  /**
   * @generated from field: doota.portal.v1.IntegrationType type = 1;
   */
  type: IntegrationType;
};

/**
 * Describes the message doota.portal.v1.GetIntegrationRequest.
 * Use `create(GetIntegrationRequestSchema)` to create a new message.
 */
export declare const GetIntegrationRequestSchema: GenMessage<GetIntegrationRequest>;

/**
 * @generated from message doota.portal.v1.AddUserRequest
 */
export declare type AddUserRequest = Message<"doota.portal.v1.AddUserRequest"> & {
  /**
   * @generated from field: string email = 1;
   */
  email: string;

  /**
   * @generated from field: optional doota.portal.v1.MessageSourceOptions message_source = 2;
   */
  messageSource?: MessageSourceOptions;

  /**
   * @generated from field: doota.portal.v1.IntegrationType integration_type = 3;
   */
  integrationType: IntegrationType;
};

/**
 * Describes the message doota.portal.v1.AddUserRequest.
 * Use `create(AddUserRequestSchema)` to create a new message.
 */
export declare const AddUserRequestSchema: GenMessage<AddUserRequest>;

/**
 * @generated from message doota.portal.v1.RenewUserRequest
 */
export declare type RenewUserRequest = Message<"doota.portal.v1.RenewUserRequest"> & {
  /**
   * @generated from field: string message_source_id = 1;
   */
  messageSourceId: string;
};

/**
 * Describes the message doota.portal.v1.RenewUserRequest.
 * Use `create(RenewUserRequestSchema)` to create a new message.
 */
export declare const RenewUserRequestSchema: GenMessage<RenewUserRequest>;

/**
 * @generated from message doota.portal.v1.MessageSourceOptions
 */
export declare type MessageSourceOptions = Message<"doota.portal.v1.MessageSourceOptions"> & {
  /**
   * @generated from field: string integration_id = 1;
   */
  integrationId: string;

  /**
   * @generated from field: string integration_external_id = 2;
   */
  integrationExternalId: string;
};

/**
 * Describes the message doota.portal.v1.MessageSourceOptions.
 * Use `create(MessageSourceOptionsSchema)` to create a new message.
 */
export declare const MessageSourceOptionsSchema: GenMessage<MessageSourceOptions>;

/**
 * @generated from message doota.portal.v1.OauthCallbackRequest
 */
export declare type OauthCallbackRequest = Message<"doota.portal.v1.OauthCallbackRequest"> & {
  /**
   * @generated from field: string state = 1;
   */
  state: string;

  /**
   * @generated from field: optional string external_code = 2;
   */
  externalCode?: string;
};

/**
 * Describes the message doota.portal.v1.OauthCallbackRequest.
 * Use `create(OauthCallbackRequestSchema)` to create a new message.
 */
export declare const OauthCallbackRequestSchema: GenMessage<OauthCallbackRequest>;

/**
 * @generated from message doota.portal.v1.OauthCallbackResponse
 */
export declare type OauthCallbackResponse = Message<"doota.portal.v1.OauthCallbackResponse"> & {
  /**
   * @generated from field: string redirect_url = 1;
   */
  redirectUrl: string;
};

/**
 * Describes the message doota.portal.v1.OauthCallbackResponse.
 * Use `create(OauthCallbackResponseSchema)` to create a new message.
 */
export declare const OauthCallbackResponseSchema: GenMessage<OauthCallbackResponse>;

/**
 * @generated from enum doota.portal.v1.DateRangeFilter
 */
export enum DateRangeFilter {
  /**
   * @generated from enum value: DATE_RANGE_UNSPECIFIED = 0;
   */
  DATE_RANGE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATE_RANGE_TODAY = 1;
   */
  DATE_RANGE_TODAY = 1,

  /**
   * @generated from enum value: DATE_RANGE_YESTERDAY = 2;
   */
  DATE_RANGE_YESTERDAY = 2,

  /**
   * @generated from enum value: DATE_RANGE_7_DAYS = 3;
   */
  DATE_RANGE_7_DAYS = 3,
}

/**
 * Describes the enum doota.portal.v1.DateRangeFilter.
 */
export declare const DateRangeFilterSchema: GenEnum<DateRangeFilter>;

/**
 * @generated from enum doota.portal.v1.OauthAuthorizeType
 */
export enum OauthAuthorizeType {
  /**
   * @generated from enum value: OAUTH_AUTHORIZE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: OAUTH_AUTHORIZE_TYPE_INTEGRATION = 1;
   */
  INTEGRATION = 1,
}

/**
 * Describes the enum doota.portal.v1.OauthAuthorizeType.
 */
export declare const OauthAuthorizeTypeSchema: GenEnum<OauthAuthorizeType>;

/**
 * @generated from enum doota.portal.v1.UserRole
 */
export enum UserRole {
  /**
   * @generated from enum value: USER_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: USER_ROLE_USER = 1;
   */
  USER = 1,

  /**
   * @generated from enum value: USER_ROLE_ADMIN = 2;
   */
  ADMIN = 2,

  /**
   * @generated from enum value: USER_ROLE_PLATFORM_ADMIN = 3;
   */
  PLATFORM_ADMIN = 3,
}

/**
 * Describes the enum doota.portal.v1.UserRole.
 */
export declare const UserRoleSchema: GenEnum<UserRole>;

/**
 * @generated from enum doota.portal.v1.IntegrationType
 */
export enum IntegrationType {
  /**
   * @generated from enum value: INTEGRATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGRATION_TYPE_MICROSOFT = 1;
   */
  MICROSOFT = 1,

  /**
   * @generated from enum value: INTEGRATION_TYPE_GOOGLE = 2;
   */
  GOOGLE = 2,

  /**
   * @generated from enum value: INTEGRATION_TYPE_REDDIT = 3;
   */
  REDDIT = 3,
}

/**
 * Describes the enum doota.portal.v1.IntegrationType.
 */
export declare const IntegrationTypeSchema: GenEnum<IntegrationType>;

/**
 * @generated from enum doota.portal.v1.IntegrationState
 */
export enum IntegrationState {
  /**
   * @generated from enum value: INTEGRATION_STATE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: INTEGRATION_STATE_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * This is a transient state not stored in the actual integration model. This will
   * be that case when for multiple reasons, the token we had for this integration is
   * revoked.
   *
   * @generated from enum value: INTEGRATION_STATE_AUTH_REVOKED = 2;
   */
  AUTH_REVOKED = 2,
}

/**
 * Describes the enum doota.portal.v1.IntegrationState.
 */
export declare const IntegrationStateSchema: GenEnum<IntegrationState>;

/**
 * @generated from service doota.portal.v1.PortalService
 */
export declare const PortalService: GenService<{
  /**
   * @generated from rpc doota.portal.v1.PortalService.GetConfig
   */
  getConfig: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ConfigSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.Self
   */
  self: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof UserSchema;
  },
  /**
   *  rpc AddUser(AddUserRequest) returns (User);
   *  rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
   *
   * @generated from rpc doota.portal.v1.PortalService.GetIntegration
   */
  getIntegration: {
    methodKind: "unary";
    input: typeof GetIntegrationRequestSchema;
    output: typeof IntegrationSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.Batch
   */
  batch: {
    methodKind: "unary";
    input: typeof BatchReqSchema;
    output: typeof BatchRespSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.CreateCustomerCase
   */
  createCustomerCase: {
    methodKind: "unary";
    input: typeof CreateCustomerCaseReqSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.PasswordlessStart
   */
  passwordlessStart: {
    methodKind: "unary";
    input: typeof PasswordlessStartRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.PasswordlessVerify
   */
  passwordlessVerify: {
    methodKind: "unary";
    input: typeof PasswordlessStartVerifySchema;
    output: typeof JWTSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.OauthAuthorize
   */
  oauthAuthorize: {
    methodKind: "unary";
    input: typeof OauthAuthorizeRequestSchema;
    output: typeof OauthAuthorizeResponseSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.OauthCallback
   */
  oauthCallback: {
    methodKind: "unary";
    input: typeof OauthCallbackRequestSchema;
    output: typeof OauthCallbackResponseSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.SocialLoginCallback
   */
  socialLoginCallback: {
    methodKind: "unary";
    input: typeof OauthCallbackRequestSchema;
    output: typeof JWTSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.GetIntegrations
   */
  getIntegrations: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof IntegrationsSchema;
  },
  /**
   * Reddit
   *
   * @generated from rpc doota.portal.v1.PortalService.CreateKeywords
   */
  createKeywords: {
    methodKind: "unary";
    input: typeof CreateKeywordReqSchema;
    output: typeof CreateKeywordsResSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.AddSource
   */
  addSource: {
    methodKind: "unary";
    input: typeof AddSourceRequestSchema;
    output: typeof SourceSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.GetSources
   */
  getSources: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GetSourceResponseSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.RemoveSource
   */
  removeSource: {
    methodKind: "unary";
    input: typeof RemoveSourceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.GetRelevantLeads
   */
  getRelevantLeads: {
    methodKind: "unary";
    input: typeof GetRelevantLeadsRequestSchema;
    output: typeof GetLeadsResponseSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.GetLeadsByStatus
   */
  getLeadsByStatus: {
    methodKind: "unary";
    input: typeof GetLeadsByStatusRequestSchema;
    output: typeof GetLeadsResponseSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.UpdateLeadStatus
   */
  updateLeadStatus: {
    methodKind: "unary";
    input: typeof UpdateLeadStatusRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.CreateOrEditProject
   */
  createOrEditProject: {
    methodKind: "unary";
    input: typeof CreateProjectRequestSchema;
    output: typeof ProjectSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.SuggestKeywordsAndSources
   */
  suggestKeywordsAndSources: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof ProjectSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.UpdateAutomationSettings
   */
  updateAutomationSettings: {
    methodKind: "unary";
    input: typeof UpdateAutomationSettingRequestSchema;
    output: typeof OrganizationSchema;
  },
  /**
   * @generated from rpc doota.portal.v1.PortalService.ConnectReddit
   */
  connectReddit: {
    methodKind: "server_streaming";
    input: typeof EmptySchema;
    output: typeof ConnectRedditResponseSchema;
  },
}>;

