// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package agents

import (
	"errors"
	"fmt"
)

const (
	// AIAgentVANA is a AIAgent of type VANA.
	AIAgentVANA AIAgent = "VANA"
	// AIAgentTRINA is a AIAgent of type TRINA.
	AIAgentTRINA AIAgent = "TRINA"
	// AIAgentPARIN is a AIAgent of type PARIN.
	AIAgentPARIN AIAgent = "PARIN"
	// AIAgentSANYA is a AIAgent of type SANYA.
	AIAgentSANYA AIAgent = "SANYA"
)

var ErrInvalidAIAgent = errors.New("not a valid AIAgent")

// String implements the Stringer interface.
func (x AIAgent) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AIAgent) IsValid() bool {
	_, err := ParseAIAgent(string(x))
	return err == nil
}

var _AIAgentValue = map[string]AIAgent{
	"VANA":  AIAgentVANA,
	"TRINA": AIAgentTRINA,
	"PARIN": AIAgentPARIN,
	"SANYA": AIAgentSANYA,
}

// ParseAIAgent attempts to convert a string to a AIAgent.
func ParseAIAgent(name string) (AIAgent, error) {
	if x, ok := _AIAgentValue[name]; ok {
		return x, nil
	}
	return AIAgent(""), fmt.Errorf("%s is %w", name, ErrInvalidAIAgent)
}
