// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: doota/microsoft/v1/microsoft.proto

package pbmicrosoftconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shank318/doota/pb/doota/microsoft/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MicrosoftServiceName is the fully-qualified name of the MicrosoftService service.
	MicrosoftServiceName = "doota.microsoft.v1.MicrosoftService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MicrosoftServiceSetupMailboxSubscriptionProcedure is the fully-qualified name of the
	// MicrosoftService's SetupMailboxSubscription RPC.
	MicrosoftServiceSetupMailboxSubscriptionProcedure = "/doota.microsoft.v1.MicrosoftService/SetupMailboxSubscription"
	// MicrosoftServiceRenewMailboxSubscriptionProcedure is the fully-qualified name of the
	// MicrosoftService's RenewMailboxSubscription RPC.
	MicrosoftServiceRenewMailboxSubscriptionProcedure = "/doota.microsoft.v1.MicrosoftService/RenewMailboxSubscription"
	// MicrosoftServiceGetIntegrationProcedure is the fully-qualified name of the MicrosoftService's
	// GetIntegration RPC.
	MicrosoftServiceGetIntegrationProcedure = "/doota.microsoft.v1.MicrosoftService/GetIntegration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	microsoftServiceServiceDescriptor                        = v1.File_doota_microsoft_v1_microsoft_proto.Services().ByName("MicrosoftService")
	microsoftServiceSetupMailboxSubscriptionMethodDescriptor = microsoftServiceServiceDescriptor.Methods().ByName("SetupMailboxSubscription")
	microsoftServiceRenewMailboxSubscriptionMethodDescriptor = microsoftServiceServiceDescriptor.Methods().ByName("RenewMailboxSubscription")
	microsoftServiceGetIntegrationMethodDescriptor           = microsoftServiceServiceDescriptor.Methods().ByName("GetIntegration")
)

// MicrosoftServiceClient is a client for the doota.microsoft.v1.MicrosoftService service.
type MicrosoftServiceClient interface {
	SetupMailboxSubscription(context.Context, *connect.Request[v1.SetupMailboxSubscriptionRequest]) (*connect.Response[v1.SetupMailboxSubscriptionResponse], error)
	RenewMailboxSubscription(context.Context, *connect.Request[v1.RenewMailboxSubscriptionRequest]) (*connect.Response[v1.RenewMailboxSubscriptionResponse], error)
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error)
}

// NewMicrosoftServiceClient constructs a client for the doota.microsoft.v1.MicrosoftService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMicrosoftServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MicrosoftServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &microsoftServiceClient{
		setupMailboxSubscription: connect.NewClient[v1.SetupMailboxSubscriptionRequest, v1.SetupMailboxSubscriptionResponse](
			httpClient,
			baseURL+MicrosoftServiceSetupMailboxSubscriptionProcedure,
			connect.WithSchema(microsoftServiceSetupMailboxSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		renewMailboxSubscription: connect.NewClient[v1.RenewMailboxSubscriptionRequest, v1.RenewMailboxSubscriptionResponse](
			httpClient,
			baseURL+MicrosoftServiceRenewMailboxSubscriptionProcedure,
			connect.WithSchema(microsoftServiceRenewMailboxSubscriptionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntegration: connect.NewClient[v1.GetIntegrationRequest, v1.Integration](
			httpClient,
			baseURL+MicrosoftServiceGetIntegrationProcedure,
			connect.WithSchema(microsoftServiceGetIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// microsoftServiceClient implements MicrosoftServiceClient.
type microsoftServiceClient struct {
	setupMailboxSubscription *connect.Client[v1.SetupMailboxSubscriptionRequest, v1.SetupMailboxSubscriptionResponse]
	renewMailboxSubscription *connect.Client[v1.RenewMailboxSubscriptionRequest, v1.RenewMailboxSubscriptionResponse]
	getIntegration           *connect.Client[v1.GetIntegrationRequest, v1.Integration]
}

// SetupMailboxSubscription calls doota.microsoft.v1.MicrosoftService.SetupMailboxSubscription.
func (c *microsoftServiceClient) SetupMailboxSubscription(ctx context.Context, req *connect.Request[v1.SetupMailboxSubscriptionRequest]) (*connect.Response[v1.SetupMailboxSubscriptionResponse], error) {
	return c.setupMailboxSubscription.CallUnary(ctx, req)
}

// RenewMailboxSubscription calls doota.microsoft.v1.MicrosoftService.RenewMailboxSubscription.
func (c *microsoftServiceClient) RenewMailboxSubscription(ctx context.Context, req *connect.Request[v1.RenewMailboxSubscriptionRequest]) (*connect.Response[v1.RenewMailboxSubscriptionResponse], error) {
	return c.renewMailboxSubscription.CallUnary(ctx, req)
}

// GetIntegration calls doota.microsoft.v1.MicrosoftService.GetIntegration.
func (c *microsoftServiceClient) GetIntegration(ctx context.Context, req *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error) {
	return c.getIntegration.CallUnary(ctx, req)
}

// MicrosoftServiceHandler is an implementation of the doota.microsoft.v1.MicrosoftService service.
type MicrosoftServiceHandler interface {
	SetupMailboxSubscription(context.Context, *connect.Request[v1.SetupMailboxSubscriptionRequest]) (*connect.Response[v1.SetupMailboxSubscriptionResponse], error)
	RenewMailboxSubscription(context.Context, *connect.Request[v1.RenewMailboxSubscriptionRequest]) (*connect.Response[v1.RenewMailboxSubscriptionResponse], error)
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error)
}

// NewMicrosoftServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMicrosoftServiceHandler(svc MicrosoftServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	microsoftServiceSetupMailboxSubscriptionHandler := connect.NewUnaryHandler(
		MicrosoftServiceSetupMailboxSubscriptionProcedure,
		svc.SetupMailboxSubscription,
		connect.WithSchema(microsoftServiceSetupMailboxSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	microsoftServiceRenewMailboxSubscriptionHandler := connect.NewUnaryHandler(
		MicrosoftServiceRenewMailboxSubscriptionProcedure,
		svc.RenewMailboxSubscription,
		connect.WithSchema(microsoftServiceRenewMailboxSubscriptionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	microsoftServiceGetIntegrationHandler := connect.NewUnaryHandler(
		MicrosoftServiceGetIntegrationProcedure,
		svc.GetIntegration,
		connect.WithSchema(microsoftServiceGetIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/doota.microsoft.v1.MicrosoftService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MicrosoftServiceSetupMailboxSubscriptionProcedure:
			microsoftServiceSetupMailboxSubscriptionHandler.ServeHTTP(w, r)
		case MicrosoftServiceRenewMailboxSubscriptionProcedure:
			microsoftServiceRenewMailboxSubscriptionHandler.ServeHTTP(w, r)
		case MicrosoftServiceGetIntegrationProcedure:
			microsoftServiceGetIntegrationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMicrosoftServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMicrosoftServiceHandler struct{}

func (UnimplementedMicrosoftServiceHandler) SetupMailboxSubscription(context.Context, *connect.Request[v1.SetupMailboxSubscriptionRequest]) (*connect.Response[v1.SetupMailboxSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.microsoft.v1.MicrosoftService.SetupMailboxSubscription is not implemented"))
}

func (UnimplementedMicrosoftServiceHandler) RenewMailboxSubscription(context.Context, *connect.Request[v1.RenewMailboxSubscriptionRequest]) (*connect.Response[v1.RenewMailboxSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.microsoft.v1.MicrosoftService.RenewMailboxSubscription is not implemented"))
}

func (UnimplementedMicrosoftServiceHandler) GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.microsoft.v1.MicrosoftService.GetIntegration is not implemented"))
}
