// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: doota/microsoft/v1/microsoft.proto

package pbmicrosoft

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MicrosoftService_SetupMailboxSubscription_FullMethodName = "/doota.microsoft.v1.MicrosoftService/SetupMailboxSubscription"
	MicrosoftService_RenewMailboxSubscription_FullMethodName = "/doota.microsoft.v1.MicrosoftService/RenewMailboxSubscription"
	MicrosoftService_GetIntegration_FullMethodName           = "/doota.microsoft.v1.MicrosoftService/GetIntegration"
)

// MicrosoftServiceClient is the client API for MicrosoftService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MicrosoftServiceClient interface {
	SetupMailboxSubscription(ctx context.Context, in *SetupMailboxSubscriptionRequest, opts ...grpc.CallOption) (*SetupMailboxSubscriptionResponse, error)
	RenewMailboxSubscription(ctx context.Context, in *RenewMailboxSubscriptionRequest, opts ...grpc.CallOption) (*RenewMailboxSubscriptionResponse, error)
	GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
}

type microsoftServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMicrosoftServiceClient(cc grpc.ClientConnInterface) MicrosoftServiceClient {
	return &microsoftServiceClient{cc}
}

func (c *microsoftServiceClient) SetupMailboxSubscription(ctx context.Context, in *SetupMailboxSubscriptionRequest, opts ...grpc.CallOption) (*SetupMailboxSubscriptionResponse, error) {
	out := new(SetupMailboxSubscriptionResponse)
	err := c.cc.Invoke(ctx, MicrosoftService_SetupMailboxSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microsoftServiceClient) RenewMailboxSubscription(ctx context.Context, in *RenewMailboxSubscriptionRequest, opts ...grpc.CallOption) (*RenewMailboxSubscriptionResponse, error) {
	out := new(RenewMailboxSubscriptionResponse)
	err := c.cc.Invoke(ctx, MicrosoftService_RenewMailboxSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microsoftServiceClient) GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, MicrosoftService_GetIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicrosoftServiceServer is the server API for MicrosoftService service.
// All implementations must embed UnimplementedMicrosoftServiceServer
// for forward compatibility
type MicrosoftServiceServer interface {
	SetupMailboxSubscription(context.Context, *SetupMailboxSubscriptionRequest) (*SetupMailboxSubscriptionResponse, error)
	RenewMailboxSubscription(context.Context, *RenewMailboxSubscriptionRequest) (*RenewMailboxSubscriptionResponse, error)
	GetIntegration(context.Context, *GetIntegrationRequest) (*Integration, error)
	mustEmbedUnimplementedMicrosoftServiceServer()
}

// UnimplementedMicrosoftServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMicrosoftServiceServer struct {
}

func (UnimplementedMicrosoftServiceServer) SetupMailboxSubscription(context.Context, *SetupMailboxSubscriptionRequest) (*SetupMailboxSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupMailboxSubscription not implemented")
}
func (UnimplementedMicrosoftServiceServer) RenewMailboxSubscription(context.Context, *RenewMailboxSubscriptionRequest) (*RenewMailboxSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewMailboxSubscription not implemented")
}
func (UnimplementedMicrosoftServiceServer) GetIntegration(context.Context, *GetIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (UnimplementedMicrosoftServiceServer) mustEmbedUnimplementedMicrosoftServiceServer() {}

// UnsafeMicrosoftServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MicrosoftServiceServer will
// result in compilation errors.
type UnsafeMicrosoftServiceServer interface {
	mustEmbedUnimplementedMicrosoftServiceServer()
}

func RegisterMicrosoftServiceServer(s grpc.ServiceRegistrar, srv MicrosoftServiceServer) {
	s.RegisterService(&MicrosoftService_ServiceDesc, srv)
}

func _MicrosoftService_SetupMailboxSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMailboxSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicrosoftServiceServer).SetupMailboxSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicrosoftService_SetupMailboxSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicrosoftServiceServer).SetupMailboxSubscription(ctx, req.(*SetupMailboxSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicrosoftService_RenewMailboxSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewMailboxSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicrosoftServiceServer).RenewMailboxSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicrosoftService_RenewMailboxSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicrosoftServiceServer).RenewMailboxSubscription(ctx, req.(*RenewMailboxSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicrosoftService_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicrosoftServiceServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MicrosoftService_GetIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicrosoftServiceServer).GetIntegration(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MicrosoftService_ServiceDesc is the grpc.ServiceDesc for MicrosoftService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MicrosoftService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doota.microsoft.v1.MicrosoftService",
	HandlerType: (*MicrosoftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupMailboxSubscription",
			Handler:    _MicrosoftService_SetupMailboxSubscription_Handler,
		},
		{
			MethodName: "RenewMailboxSubscription",
			Handler:    _MicrosoftService_RenewMailboxSubscription_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _MicrosoftService_GetIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doota/microsoft/v1/microsoft.proto",
}
