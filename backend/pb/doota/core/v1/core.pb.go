// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: doota/core/v1/core.proto

package pbcore

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlatformError int32

const (
	PlatformError_PLATFORM_ERROR_UNSPECIFIED                PlatformError = 0
	PlatformError_PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS     PlatformError = 1
	PlatformError_PLATFORM_ERROR_INVALID_QUOTE              PlatformError = 2
	PlatformError_PLATFORM_UNAUTHORIZED_ACCESS              PlatformError = 3
	PlatformError_PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG PlatformError = 4
)

// Enum value maps for PlatformError.
var (
	PlatformError_name = map[int32]string{
		0: "PLATFORM_ERROR_UNSPECIFIED",
		1: "PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS",
		2: "PLATFORM_ERROR_INVALID_QUOTE",
		3: "PLATFORM_UNAUTHORIZED_ACCESS",
		4: "PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG",
	}
	PlatformError_value = map[string]int32{
		"PLATFORM_ERROR_UNSPECIFIED":                0,
		"PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS":     1,
		"PLATFORM_ERROR_INVALID_QUOTE":              2,
		"PLATFORM_UNAUTHORIZED_ACCESS":              3,
		"PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG": 4,
	}
)

func (x PlatformError) Enum() *PlatformError {
	p := new(PlatformError)
	*p = x
	return p
}

func (x PlatformError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformError) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[0].Descriptor()
}

func (PlatformError) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[0]
}

func (x PlatformError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformError.Descriptor instead.
func (PlatformError) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{0}
}

type IdentityRole int32

const (
	IdentityRole_IDENTITY_ROLE_UNSPECIFIED    IdentityRole = 0
	IdentityRole_IDENTITY_ROLE_USER           IdentityRole = 1
	IdentityRole_IDENTITY_ROLE_ADMIN          IdentityRole = 2
	IdentityRole_IDENTITY_ROLE_PLATFORM_ADMIN IdentityRole = 3
)

// Enum value maps for IdentityRole.
var (
	IdentityRole_name = map[int32]string{
		0: "IDENTITY_ROLE_UNSPECIFIED",
		1: "IDENTITY_ROLE_USER",
		2: "IDENTITY_ROLE_ADMIN",
		3: "IDENTITY_ROLE_PLATFORM_ADMIN",
	}
	IdentityRole_value = map[string]int32{
		"IDENTITY_ROLE_UNSPECIFIED":    0,
		"IDENTITY_ROLE_USER":           1,
		"IDENTITY_ROLE_ADMIN":          2,
		"IDENTITY_ROLE_PLATFORM_ADMIN": 3,
	}
)

func (x IdentityRole) Enum() *IdentityRole {
	p := new(IdentityRole)
	*p = x
	return p
}

func (x IdentityRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityRole) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[1].Descriptor()
}

func (IdentityRole) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[1]
}

func (x IdentityRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityRole.Descriptor instead.
func (IdentityRole) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{1}
}

type Currency int32

const (
	Currency_CURRENCY_UNSPECIFIED Currency = 0
	Currency_CURRENCY_USD         Currency = 1
	Currency_CURRENCY_AED         Currency = 2
	Currency_CURRENCY_AFN         Currency = 3
	Currency_CURRENCY_ALL         Currency = 4
	Currency_CURRENCY_AMD         Currency = 5
	Currency_CURRENCY_ANG         Currency = 6
	Currency_CURRENCY_AOA         Currency = 7
	Currency_CURRENCY_ARS         Currency = 8
	Currency_CURRENCY_AUD         Currency = 9
	Currency_CURRENCY_AWG         Currency = 10
	Currency_CURRENCY_AZN         Currency = 11
	Currency_CURRENCY_BAM         Currency = 12
	Currency_CURRENCY_BBD         Currency = 13
	Currency_CURRENCY_BDT         Currency = 14
	Currency_CURRENCY_BGN         Currency = 15
	Currency_CURRENCY_BIF         Currency = 16
	Currency_CURRENCY_BMD         Currency = 17
	Currency_CURRENCY_BND         Currency = 18
	Currency_CURRENCY_BOB         Currency = 19
	Currency_CURRENCY_BRL         Currency = 20
	Currency_CURRENCY_BSD         Currency = 21
	Currency_CURRENCY_BWP         Currency = 22
	Currency_CURRENCY_BYN         Currency = 23
	Currency_CURRENCY_BZD         Currency = 24
	Currency_CURRENCY_CAD         Currency = 25
	Currency_CURRENCY_CDF         Currency = 26
	Currency_CURRENCY_CHF         Currency = 27
	Currency_CURRENCY_CLP         Currency = 28
	Currency_CURRENCY_CNY         Currency = 29
	Currency_CURRENCY_COP         Currency = 30
	Currency_CURRENCY_CRC         Currency = 31
	Currency_CURRENCY_CVE         Currency = 32
	Currency_CURRENCY_CZK         Currency = 33
	Currency_CURRENCY_DJF         Currency = 34
	Currency_CURRENCY_DKK         Currency = 35
	Currency_CURRENCY_DOP         Currency = 36
	Currency_CURRENCY_DZD         Currency = 37
	Currency_CURRENCY_EGP         Currency = 38
	Currency_CURRENCY_ETB         Currency = 39
	Currency_CURRENCY_EUR         Currency = 40
	Currency_CURRENCY_FJD         Currency = 41
	Currency_CURRENCY_FKP         Currency = 42
	Currency_CURRENCY_GBP         Currency = 43
	Currency_CURRENCY_GEL         Currency = 44
	Currency_CURRENCY_GIP         Currency = 45
	Currency_CURRENCY_GMD         Currency = 46
	Currency_CURRENCY_GNF         Currency = 47
	Currency_CURRENCY_GTQ         Currency = 48
	Currency_CURRENCY_GYD         Currency = 49
	Currency_CURRENCY_HKD         Currency = 50
	Currency_CURRENCY_HNL         Currency = 51
	Currency_CURRENCY_HTG         Currency = 52
	Currency_CURRENCY_HUF         Currency = 53
	Currency_CURRENCY_IDR         Currency = 54
	Currency_CURRENCY_ILS         Currency = 55
	Currency_CURRENCY_INR         Currency = 56
	Currency_CURRENCY_ISK         Currency = 57
	Currency_CURRENCY_JMD         Currency = 58
	Currency_CURRENCY_JPY         Currency = 59
	Currency_CURRENCY_KES         Currency = 60
	Currency_CURRENCY_KGS         Currency = 61
	Currency_CURRENCY_KHR         Currency = 62
	Currency_CURRENCY_KMF         Currency = 63
	Currency_CURRENCY_KRW         Currency = 64
	Currency_CURRENCY_KYD         Currency = 65
	Currency_CURRENCY_KZT         Currency = 66
	Currency_CURRENCY_LAK         Currency = 67
	Currency_CURRENCY_LBP         Currency = 68
	Currency_CURRENCY_LKR         Currency = 69
	Currency_CURRENCY_LRD         Currency = 70
	Currency_CURRENCY_LSL         Currency = 71
	Currency_CURRENCY_MAD         Currency = 72
	Currency_CURRENCY_MDL         Currency = 73
	Currency_CURRENCY_MGA         Currency = 74
	Currency_CURRENCY_MKD         Currency = 75
	Currency_CURRENCY_MMK         Currency = 76
	Currency_CURRENCY_MNT         Currency = 77
	Currency_CURRENCY_MOP         Currency = 78
	Currency_CURRENCY_MUR         Currency = 79
	Currency_CURRENCY_MVR         Currency = 80
	Currency_CURRENCY_MWK         Currency = 81
	Currency_CURRENCY_MXN         Currency = 82
	Currency_CURRENCY_MYR         Currency = 83
	Currency_CURRENCY_MZN         Currency = 84
	Currency_CURRENCY_NAD         Currency = 85
	Currency_CURRENCY_NGN         Currency = 86
	Currency_CURRENCY_NIO         Currency = 87
	Currency_CURRENCY_NOK         Currency = 88
	Currency_CURRENCY_NPR         Currency = 89
	Currency_CURRENCY_NZD         Currency = 90
	Currency_CURRENCY_PAB         Currency = 91
	Currency_CURRENCY_PEN         Currency = 92
	Currency_CURRENCY_PGK         Currency = 93
	Currency_CURRENCY_PHP         Currency = 94
	Currency_CURRENCY_PKR         Currency = 95
	Currency_CURRENCY_PLN         Currency = 96
	Currency_CURRENCY_PYG         Currency = 97
	Currency_CURRENCY_QAR         Currency = 98
	Currency_CURRENCY_RON         Currency = 99
	Currency_CURRENCY_RSD         Currency = 100
	Currency_CURRENCY_RUB         Currency = 101
	Currency_CURRENCY_RWF         Currency = 102
	Currency_CURRENCY_SAR         Currency = 103
	Currency_CURRENCY_SBD         Currency = 104
	Currency_CURRENCY_SCR         Currency = 105
	Currency_CURRENCY_SEK         Currency = 106
	Currency_CURRENCY_SGD         Currency = 107
	Currency_CURRENCY_SHP         Currency = 108
	Currency_CURRENCY_SLE         Currency = 109
	Currency_CURRENCY_SOS         Currency = 110
	Currency_CURRENCY_SRD         Currency = 111
	Currency_CURRENCY_STD         Currency = 112
	Currency_CURRENCY_SZL         Currency = 113
	Currency_CURRENCY_THB         Currency = 114
	Currency_CURRENCY_TJS         Currency = 115
	Currency_CURRENCY_TOP         Currency = 116
	Currency_CURRENCY_TRY         Currency = 117
	Currency_CURRENCY_TTD         Currency = 118
	Currency_CURRENCY_TWD         Currency = 119
	Currency_CURRENCY_TZS         Currency = 120
	Currency_CURRENCY_UAH         Currency = 121
	Currency_CURRENCY_UGX         Currency = 122
	Currency_CURRENCY_UYU         Currency = 123
	Currency_CURRENCY_UZS         Currency = 124
	Currency_CURRENCY_VND         Currency = 125
	Currency_CURRENCY_VUV         Currency = 126
	Currency_CURRENCY_WST         Currency = 127
	Currency_CURRENCY_XAF         Currency = 128
	Currency_CURRENCY_XCD         Currency = 129
	Currency_CURRENCY_XOF         Currency = 130
	Currency_CURRENCY_XPF         Currency = 131
	Currency_CURRENCY_YER         Currency = 132
	Currency_CURRENCY_ZAR         Currency = 133
	Currency_CURRENCY_ZMW         Currency = 134
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0:   "CURRENCY_UNSPECIFIED",
		1:   "CURRENCY_USD",
		2:   "CURRENCY_AED",
		3:   "CURRENCY_AFN",
		4:   "CURRENCY_ALL",
		5:   "CURRENCY_AMD",
		6:   "CURRENCY_ANG",
		7:   "CURRENCY_AOA",
		8:   "CURRENCY_ARS",
		9:   "CURRENCY_AUD",
		10:  "CURRENCY_AWG",
		11:  "CURRENCY_AZN",
		12:  "CURRENCY_BAM",
		13:  "CURRENCY_BBD",
		14:  "CURRENCY_BDT",
		15:  "CURRENCY_BGN",
		16:  "CURRENCY_BIF",
		17:  "CURRENCY_BMD",
		18:  "CURRENCY_BND",
		19:  "CURRENCY_BOB",
		20:  "CURRENCY_BRL",
		21:  "CURRENCY_BSD",
		22:  "CURRENCY_BWP",
		23:  "CURRENCY_BYN",
		24:  "CURRENCY_BZD",
		25:  "CURRENCY_CAD",
		26:  "CURRENCY_CDF",
		27:  "CURRENCY_CHF",
		28:  "CURRENCY_CLP",
		29:  "CURRENCY_CNY",
		30:  "CURRENCY_COP",
		31:  "CURRENCY_CRC",
		32:  "CURRENCY_CVE",
		33:  "CURRENCY_CZK",
		34:  "CURRENCY_DJF",
		35:  "CURRENCY_DKK",
		36:  "CURRENCY_DOP",
		37:  "CURRENCY_DZD",
		38:  "CURRENCY_EGP",
		39:  "CURRENCY_ETB",
		40:  "CURRENCY_EUR",
		41:  "CURRENCY_FJD",
		42:  "CURRENCY_FKP",
		43:  "CURRENCY_GBP",
		44:  "CURRENCY_GEL",
		45:  "CURRENCY_GIP",
		46:  "CURRENCY_GMD",
		47:  "CURRENCY_GNF",
		48:  "CURRENCY_GTQ",
		49:  "CURRENCY_GYD",
		50:  "CURRENCY_HKD",
		51:  "CURRENCY_HNL",
		52:  "CURRENCY_HTG",
		53:  "CURRENCY_HUF",
		54:  "CURRENCY_IDR",
		55:  "CURRENCY_ILS",
		56:  "CURRENCY_INR",
		57:  "CURRENCY_ISK",
		58:  "CURRENCY_JMD",
		59:  "CURRENCY_JPY",
		60:  "CURRENCY_KES",
		61:  "CURRENCY_KGS",
		62:  "CURRENCY_KHR",
		63:  "CURRENCY_KMF",
		64:  "CURRENCY_KRW",
		65:  "CURRENCY_KYD",
		66:  "CURRENCY_KZT",
		67:  "CURRENCY_LAK",
		68:  "CURRENCY_LBP",
		69:  "CURRENCY_LKR",
		70:  "CURRENCY_LRD",
		71:  "CURRENCY_LSL",
		72:  "CURRENCY_MAD",
		73:  "CURRENCY_MDL",
		74:  "CURRENCY_MGA",
		75:  "CURRENCY_MKD",
		76:  "CURRENCY_MMK",
		77:  "CURRENCY_MNT",
		78:  "CURRENCY_MOP",
		79:  "CURRENCY_MUR",
		80:  "CURRENCY_MVR",
		81:  "CURRENCY_MWK",
		82:  "CURRENCY_MXN",
		83:  "CURRENCY_MYR",
		84:  "CURRENCY_MZN",
		85:  "CURRENCY_NAD",
		86:  "CURRENCY_NGN",
		87:  "CURRENCY_NIO",
		88:  "CURRENCY_NOK",
		89:  "CURRENCY_NPR",
		90:  "CURRENCY_NZD",
		91:  "CURRENCY_PAB",
		92:  "CURRENCY_PEN",
		93:  "CURRENCY_PGK",
		94:  "CURRENCY_PHP",
		95:  "CURRENCY_PKR",
		96:  "CURRENCY_PLN",
		97:  "CURRENCY_PYG",
		98:  "CURRENCY_QAR",
		99:  "CURRENCY_RON",
		100: "CURRENCY_RSD",
		101: "CURRENCY_RUB",
		102: "CURRENCY_RWF",
		103: "CURRENCY_SAR",
		104: "CURRENCY_SBD",
		105: "CURRENCY_SCR",
		106: "CURRENCY_SEK",
		107: "CURRENCY_SGD",
		108: "CURRENCY_SHP",
		109: "CURRENCY_SLE",
		110: "CURRENCY_SOS",
		111: "CURRENCY_SRD",
		112: "CURRENCY_STD",
		113: "CURRENCY_SZL",
		114: "CURRENCY_THB",
		115: "CURRENCY_TJS",
		116: "CURRENCY_TOP",
		117: "CURRENCY_TRY",
		118: "CURRENCY_TTD",
		119: "CURRENCY_TWD",
		120: "CURRENCY_TZS",
		121: "CURRENCY_UAH",
		122: "CURRENCY_UGX",
		123: "CURRENCY_UYU",
		124: "CURRENCY_UZS",
		125: "CURRENCY_VND",
		126: "CURRENCY_VUV",
		127: "CURRENCY_WST",
		128: "CURRENCY_XAF",
		129: "CURRENCY_XCD",
		130: "CURRENCY_XOF",
		131: "CURRENCY_XPF",
		132: "CURRENCY_YER",
		133: "CURRENCY_ZAR",
		134: "CURRENCY_ZMW",
	}
	Currency_value = map[string]int32{
		"CURRENCY_UNSPECIFIED": 0,
		"CURRENCY_USD":         1,
		"CURRENCY_AED":         2,
		"CURRENCY_AFN":         3,
		"CURRENCY_ALL":         4,
		"CURRENCY_AMD":         5,
		"CURRENCY_ANG":         6,
		"CURRENCY_AOA":         7,
		"CURRENCY_ARS":         8,
		"CURRENCY_AUD":         9,
		"CURRENCY_AWG":         10,
		"CURRENCY_AZN":         11,
		"CURRENCY_BAM":         12,
		"CURRENCY_BBD":         13,
		"CURRENCY_BDT":         14,
		"CURRENCY_BGN":         15,
		"CURRENCY_BIF":         16,
		"CURRENCY_BMD":         17,
		"CURRENCY_BND":         18,
		"CURRENCY_BOB":         19,
		"CURRENCY_BRL":         20,
		"CURRENCY_BSD":         21,
		"CURRENCY_BWP":         22,
		"CURRENCY_BYN":         23,
		"CURRENCY_BZD":         24,
		"CURRENCY_CAD":         25,
		"CURRENCY_CDF":         26,
		"CURRENCY_CHF":         27,
		"CURRENCY_CLP":         28,
		"CURRENCY_CNY":         29,
		"CURRENCY_COP":         30,
		"CURRENCY_CRC":         31,
		"CURRENCY_CVE":         32,
		"CURRENCY_CZK":         33,
		"CURRENCY_DJF":         34,
		"CURRENCY_DKK":         35,
		"CURRENCY_DOP":         36,
		"CURRENCY_DZD":         37,
		"CURRENCY_EGP":         38,
		"CURRENCY_ETB":         39,
		"CURRENCY_EUR":         40,
		"CURRENCY_FJD":         41,
		"CURRENCY_FKP":         42,
		"CURRENCY_GBP":         43,
		"CURRENCY_GEL":         44,
		"CURRENCY_GIP":         45,
		"CURRENCY_GMD":         46,
		"CURRENCY_GNF":         47,
		"CURRENCY_GTQ":         48,
		"CURRENCY_GYD":         49,
		"CURRENCY_HKD":         50,
		"CURRENCY_HNL":         51,
		"CURRENCY_HTG":         52,
		"CURRENCY_HUF":         53,
		"CURRENCY_IDR":         54,
		"CURRENCY_ILS":         55,
		"CURRENCY_INR":         56,
		"CURRENCY_ISK":         57,
		"CURRENCY_JMD":         58,
		"CURRENCY_JPY":         59,
		"CURRENCY_KES":         60,
		"CURRENCY_KGS":         61,
		"CURRENCY_KHR":         62,
		"CURRENCY_KMF":         63,
		"CURRENCY_KRW":         64,
		"CURRENCY_KYD":         65,
		"CURRENCY_KZT":         66,
		"CURRENCY_LAK":         67,
		"CURRENCY_LBP":         68,
		"CURRENCY_LKR":         69,
		"CURRENCY_LRD":         70,
		"CURRENCY_LSL":         71,
		"CURRENCY_MAD":         72,
		"CURRENCY_MDL":         73,
		"CURRENCY_MGA":         74,
		"CURRENCY_MKD":         75,
		"CURRENCY_MMK":         76,
		"CURRENCY_MNT":         77,
		"CURRENCY_MOP":         78,
		"CURRENCY_MUR":         79,
		"CURRENCY_MVR":         80,
		"CURRENCY_MWK":         81,
		"CURRENCY_MXN":         82,
		"CURRENCY_MYR":         83,
		"CURRENCY_MZN":         84,
		"CURRENCY_NAD":         85,
		"CURRENCY_NGN":         86,
		"CURRENCY_NIO":         87,
		"CURRENCY_NOK":         88,
		"CURRENCY_NPR":         89,
		"CURRENCY_NZD":         90,
		"CURRENCY_PAB":         91,
		"CURRENCY_PEN":         92,
		"CURRENCY_PGK":         93,
		"CURRENCY_PHP":         94,
		"CURRENCY_PKR":         95,
		"CURRENCY_PLN":         96,
		"CURRENCY_PYG":         97,
		"CURRENCY_QAR":         98,
		"CURRENCY_RON":         99,
		"CURRENCY_RSD":         100,
		"CURRENCY_RUB":         101,
		"CURRENCY_RWF":         102,
		"CURRENCY_SAR":         103,
		"CURRENCY_SBD":         104,
		"CURRENCY_SCR":         105,
		"CURRENCY_SEK":         106,
		"CURRENCY_SGD":         107,
		"CURRENCY_SHP":         108,
		"CURRENCY_SLE":         109,
		"CURRENCY_SOS":         110,
		"CURRENCY_SRD":         111,
		"CURRENCY_STD":         112,
		"CURRENCY_SZL":         113,
		"CURRENCY_THB":         114,
		"CURRENCY_TJS":         115,
		"CURRENCY_TOP":         116,
		"CURRENCY_TRY":         117,
		"CURRENCY_TTD":         118,
		"CURRENCY_TWD":         119,
		"CURRENCY_TZS":         120,
		"CURRENCY_UAH":         121,
		"CURRENCY_UGX":         122,
		"CURRENCY_UYU":         123,
		"CURRENCY_UZS":         124,
		"CURRENCY_VND":         125,
		"CURRENCY_VUV":         126,
		"CURRENCY_WST":         127,
		"CURRENCY_XAF":         128,
		"CURRENCY_XCD":         129,
		"CURRENCY_XOF":         130,
		"CURRENCY_XPF":         131,
		"CURRENCY_YER":         132,
		"CURRENCY_ZAR":         133,
		"CURRENCY_ZMW":         134,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[2].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[2]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{2}
}

type QuoteFormErrorDetail_QuoteFormErrorDetailMessage int32

const (
	QuoteFormErrorDetail_QUOTE_FORM_ERROR_DETAIL_MESSAGE_UNSPECIFIED QuoteFormErrorDetail_QuoteFormErrorDetailMessage = 0
	QuoteFormErrorDetail_QUOTE_FORM_ERROR_DETAIL_MESSAGE_INVALID_GEO QuoteFormErrorDetail_QuoteFormErrorDetailMessage = 1
)

// Enum value maps for QuoteFormErrorDetail_QuoteFormErrorDetailMessage.
var (
	QuoteFormErrorDetail_QuoteFormErrorDetailMessage_name = map[int32]string{
		0: "QUOTE_FORM_ERROR_DETAIL_MESSAGE_UNSPECIFIED",
		1: "QUOTE_FORM_ERROR_DETAIL_MESSAGE_INVALID_GEO",
	}
	QuoteFormErrorDetail_QuoteFormErrorDetailMessage_value = map[string]int32{
		"QUOTE_FORM_ERROR_DETAIL_MESSAGE_UNSPECIFIED": 0,
		"QUOTE_FORM_ERROR_DETAIL_MESSAGE_INVALID_GEO": 1,
	}
)

func (x QuoteFormErrorDetail_QuoteFormErrorDetailMessage) Enum() *QuoteFormErrorDetail_QuoteFormErrorDetailMessage {
	p := new(QuoteFormErrorDetail_QuoteFormErrorDetailMessage)
	*p = x
	return p
}

func (x QuoteFormErrorDetail_QuoteFormErrorDetailMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuoteFormErrorDetail_QuoteFormErrorDetailMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[3].Descriptor()
}

func (QuoteFormErrorDetail_QuoteFormErrorDetailMessage) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[3]
}

func (x QuoteFormErrorDetail_QuoteFormErrorDetailMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuoteFormErrorDetail_QuoteFormErrorDetailMessage.Descriptor instead.
func (QuoteFormErrorDetail_QuoteFormErrorDetailMessage) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{4, 0}
}

type PricingOptionErrorDetail_PricingOptionErrorDetailMessage int32

const (
	PricingOptionErrorDetail_PRICING_OPTION_ERROR_DETAIL_MESSAGE_UNSPECIFIED         PricingOptionErrorDetail_PricingOptionErrorDetailMessage = 0
	PricingOptionErrorDetail_PRICING_OPTION_ERROR_DETAIL_MESSAGE_INVALID_ORIGIN      PricingOptionErrorDetail_PricingOptionErrorDetailMessage = 1
	PricingOptionErrorDetail_PRICING_OPTION_ERROR_DETAIL_MESSAGE_INVALID_DESTINATION PricingOptionErrorDetail_PricingOptionErrorDetailMessage = 2
)

// Enum value maps for PricingOptionErrorDetail_PricingOptionErrorDetailMessage.
var (
	PricingOptionErrorDetail_PricingOptionErrorDetailMessage_name = map[int32]string{
		0: "PRICING_OPTION_ERROR_DETAIL_MESSAGE_UNSPECIFIED",
		1: "PRICING_OPTION_ERROR_DETAIL_MESSAGE_INVALID_ORIGIN",
		2: "PRICING_OPTION_ERROR_DETAIL_MESSAGE_INVALID_DESTINATION",
	}
	PricingOptionErrorDetail_PricingOptionErrorDetailMessage_value = map[string]int32{
		"PRICING_OPTION_ERROR_DETAIL_MESSAGE_UNSPECIFIED":         0,
		"PRICING_OPTION_ERROR_DETAIL_MESSAGE_INVALID_ORIGIN":      1,
		"PRICING_OPTION_ERROR_DETAIL_MESSAGE_INVALID_DESTINATION": 2,
	}
)

func (x PricingOptionErrorDetail_PricingOptionErrorDetailMessage) Enum() *PricingOptionErrorDetail_PricingOptionErrorDetailMessage {
	p := new(PricingOptionErrorDetail_PricingOptionErrorDetailMessage)
	*p = x
	return p
}

func (x PricingOptionErrorDetail_PricingOptionErrorDetailMessage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PricingOptionErrorDetail_PricingOptionErrorDetailMessage) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[4].Descriptor()
}

func (PricingOptionErrorDetail_PricingOptionErrorDetailMessage) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[4]
}

func (x PricingOptionErrorDetail_PricingOptionErrorDetailMessage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PricingOptionErrorDetail_PricingOptionErrorDetailMessage.Descriptor instead.
func (PricingOptionErrorDetail_PricingOptionErrorDetailMessage) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{5, 0}
}

// TzTimestamp is a wrapper around Timestamp that includes a timezone offset
// for displaying time in a specific timezone. Although timestamps are stored
// with their extracted timezone offsets in the database (e.g., 2024-10-23 16:19:23 EST
// is stored as "2024-10-23T16:19:23-05:00" in the DB and not its UTC equivalent of "2024-10-23T21:19:23Z"),
// we want to ensure they are displayed consistently in the timezone they were extracted from.
//
// We cannot use the basic Timestamp object from protobuf because it only
// represents a UTC timestamp without a timezone offset.
//
// Example:
//
//	Suppose we have an extracted timestamp of "2024-10-23 16:19:23 EST".
//	In the database, it will be stored as "2024-10-23T16:19:23-05:00",
//	preserving the extracted timezone. The TzTimestamp representation would be:
//
//	TzTimestamp {
//	    timestamp = 1730233163  // UTC seconds since Unix epoch for 2024-10-23T16:19:23-05:00
//	    offset = -5
//	}
type TzTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Offset    int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TzTimestamp) Reset() {
	*x = TzTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TzTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TzTimestamp) ProtoMessage() {}

func (x *TzTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TzTimestamp.ProtoReflect.Descriptor instead.
func (*TzTimestamp) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{0}
}

func (x *TzTimestamp) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TzTimestamp) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId string       `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Role           IdentityRole `protobuf:"varint,3,opt,name=role,proto3,enum=doota.core.v1.IdentityRole" json:"role,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{1}
}

func (x *Identity) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Identity) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Identity) GetRole() IdentityRole {
	if x != nil {
		return x.Role
	}
	return IdentityRole_IDENTITY_ROLE_UNSPECIFIED
}

type PlatformErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   PlatformError `protobuf:"varint,1,opt,name=error,proto3,enum=doota.core.v1.PlatformError" json:"error,omitempty"`
	Details *anypb.Any    `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *PlatformErrorDetails) Reset() {
	*x = PlatformErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformErrorDetails) ProtoMessage() {}

func (x *PlatformErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformErrorDetails.ProtoReflect.Descriptor instead.
func (*PlatformErrorDetails) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{2}
}

func (x *PlatformErrorDetails) GetError() PlatformError {
	if x != nil {
		return x.Error
	}
	return PlatformError_PLATFORM_ERROR_UNSPECIFIED
}

func (x *PlatformErrorDetails) GetDetails() *anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

type QuoteFormErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*QuoteFormErrorDetail `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
}

func (x *QuoteFormErrorDetails) Reset() {
	*x = QuoteFormErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteFormErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteFormErrorDetails) ProtoMessage() {}

func (x *QuoteFormErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteFormErrorDetails.ProtoReflect.Descriptor instead.
func (*QuoteFormErrorDetails) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{3}
}

func (x *QuoteFormErrorDetails) GetDetails() []*QuoteFormErrorDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type QuoteFormErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string                                           `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Detail QuoteFormErrorDetail_QuoteFormErrorDetailMessage `protobuf:"varint,2,opt,name=detail,proto3,enum=doota.core.v1.QuoteFormErrorDetail_QuoteFormErrorDetailMessage" json:"detail,omitempty"`
}

func (x *QuoteFormErrorDetail) Reset() {
	*x = QuoteFormErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuoteFormErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuoteFormErrorDetail) ProtoMessage() {}

func (x *QuoteFormErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuoteFormErrorDetail.ProtoReflect.Descriptor instead.
func (*QuoteFormErrorDetail) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{4}
}

func (x *QuoteFormErrorDetail) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *QuoteFormErrorDetail) GetDetail() QuoteFormErrorDetail_QuoteFormErrorDetailMessage {
	if x != nil {
		return x.Detail
	}
	return QuoteFormErrorDetail_QUOTE_FORM_ERROR_DETAIL_MESSAGE_UNSPECIFIED
}

type PricingOptionErrorDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StatusCode    int64                                                    `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Message       string                                                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TransactionId string                                                   `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Detail        PricingOptionErrorDetail_PricingOptionErrorDetailMessage `protobuf:"varint,4,opt,name=detail,proto3,enum=doota.core.v1.PricingOptionErrorDetail_PricingOptionErrorDetailMessage" json:"detail,omitempty"`
}

func (x *PricingOptionErrorDetail) Reset() {
	*x = PricingOptionErrorDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PricingOptionErrorDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PricingOptionErrorDetail) ProtoMessage() {}

func (x *PricingOptionErrorDetail) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PricingOptionErrorDetail.ProtoReflect.Descriptor instead.
func (*PricingOptionErrorDetail) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{5}
}

func (x *PricingOptionErrorDetail) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *PricingOptionErrorDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PricingOptionErrorDetail) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PricingOptionErrorDetail) GetDetail() PricingOptionErrorDetail_PricingOptionErrorDetailMessage {
	if x != nil {
		return x.Detail
	}
	return PricingOptionErrorDetail_PRICING_OPTION_ERROR_DETAIL_MESSAGE_UNSPECIFIED
}

var File_doota_core_v1_core_proto protoreflect.FileDescriptor

var file_doota_core_v1_core_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x6f, 0x6f, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0b, 0x54, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7d, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64,
	0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0x56, 0x0a, 0x15, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x64, 0x6f,
	0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x57, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22,
	0x7f, 0x0a, 0x1b, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x2b, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x2f, 0x0a, 0x2b, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x4f, 0x10, 0x01,
	0x22, 0xab, 0x03, 0x0a, 0x18, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x5f, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x47, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x2f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x36, 0x0a, 0x32, 0x50, 0x52, 0x49,
	0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x3b, 0x0a, 0x37, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x44, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0xcd,
	0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x29, 0x0a, 0x25, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48,
	0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x2d, 0x0a, 0x29, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x52, 0x47, 0x10, 0x04, 0x2a, 0x80,
	0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x1d, 0x0a, 0x19, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x03, 0x2a, 0x97, 0x13, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x53, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x45, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x46, 0x4e, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x4d, 0x44,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x41, 0x4f, 0x41, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x41, 0x52, 0x53, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x55, 0x44, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x57, 0x47, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x5a, 0x4e, 0x10, 0x0b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x41, 0x4d, 0x10, 0x0c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x42, 0x44,
	0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42,
	0x44, 0x54, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x42, 0x47, 0x4e, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x42, 0x49, 0x46, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x4d, 0x44, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x4e, 0x44, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x4f, 0x42, 0x10, 0x13, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x52, 0x4c, 0x10, 0x14,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x53, 0x44,
	0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42,
	0x57, 0x50, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x42, 0x59, 0x4e, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x42, 0x5a, 0x44, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x44, 0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x44, 0x46, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x48, 0x46, 0x10, 0x1b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4c, 0x50, 0x10, 0x1c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4e, 0x59,
	0x10, 0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43,
	0x4f, 0x50, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x52, 0x43, 0x10, 0x1f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x43, 0x56, 0x45, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x5a, 0x4b, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x4a, 0x46, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x4b, 0x4b, 0x10, 0x23, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x4f, 0x50, 0x10, 0x24,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x5a, 0x44,
	0x10, 0x25, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45,
	0x47, 0x50, 0x10, 0x26, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x45, 0x54, 0x42, 0x10, 0x27, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x45, 0x55, 0x52, 0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x4a, 0x44, 0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x46, 0x4b, 0x50, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x42, 0x50, 0x10, 0x2b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x45, 0x4c, 0x10, 0x2c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x49, 0x50,
	0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47,
	0x4d, 0x44, 0x10, 0x2e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x47, 0x4e, 0x46, 0x10, 0x2f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x47, 0x54, 0x51, 0x10, 0x30, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x47, 0x59, 0x44, 0x10, 0x31, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x48, 0x4b, 0x44, 0x10, 0x32, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x48, 0x4e, 0x4c, 0x10, 0x33, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x48, 0x54, 0x47, 0x10, 0x34,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x48, 0x55, 0x46,
	0x10, 0x35, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49,
	0x44, 0x52, 0x10, 0x36, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x49, 0x4c, 0x53, 0x10, 0x37, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x49, 0x4e, 0x52, 0x10, 0x38, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x53, 0x4b, 0x10, 0x39, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4a, 0x4d, 0x44, 0x10, 0x3a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x3b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b, 0x45, 0x53, 0x10, 0x3c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b, 0x47, 0x53,
	0x10, 0x3d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b,
	0x48, 0x52, 0x10, 0x3e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x4b, 0x4d, 0x46, 0x10, 0x3f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x4b, 0x52, 0x57, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b, 0x59, 0x44, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b, 0x5a, 0x54, 0x10, 0x42, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x41, 0x4b, 0x10, 0x43, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x42, 0x50, 0x10, 0x44,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c, 0x4b, 0x52,
	0x10, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4c,
	0x52, 0x44, 0x10, 0x46, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x4c, 0x53, 0x4c, 0x10, 0x47, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x4d, 0x41, 0x44, 0x10, 0x48, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x44, 0x4c, 0x10, 0x49, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x47, 0x41, 0x10, 0x4a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4b, 0x44, 0x10, 0x4b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4d, 0x4b, 0x10, 0x4c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x4e, 0x54,
	0x10, 0x4d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d,
	0x4f, 0x50, 0x10, 0x4e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x4d, 0x55, 0x52, 0x10, 0x4f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x4d, 0x56, 0x52, 0x10, 0x50, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x57, 0x4b, 0x10, 0x51, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x58, 0x4e, 0x10, 0x52, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x59, 0x52, 0x10, 0x53, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x5a, 0x4e, 0x10, 0x54,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x41, 0x44,
	0x10, 0x55, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e,
	0x47, 0x4e, 0x10, 0x56, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x4e, 0x49, 0x4f, 0x10, 0x57, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x4b, 0x10, 0x58, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x50, 0x52, 0x10, 0x59, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x5a, 0x44, 0x10, 0x5a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x41, 0x42, 0x10, 0x5b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x5c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x47, 0x4b,
	0x10, 0x5d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50,
	0x48, 0x50, 0x10, 0x5e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x50, 0x4b, 0x52, 0x10, 0x5f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x50, 0x4c, 0x4e, 0x10, 0x60, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x59, 0x47, 0x10, 0x61, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x51, 0x41, 0x52, 0x10, 0x62, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x4f, 0x4e, 0x10, 0x63, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x53, 0x44, 0x10, 0x64,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52, 0x55, 0x42,
	0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52,
	0x57, 0x46, 0x10, 0x66, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x53, 0x41, 0x52, 0x10, 0x67, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x53, 0x42, 0x44, 0x10, 0x68, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x43, 0x52, 0x10, 0x69, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x45, 0x4b, 0x10, 0x6a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x47, 0x44, 0x10, 0x6b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x48, 0x50, 0x10, 0x6c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x4c, 0x45,
	0x10, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53,
	0x4f, 0x53, 0x10, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x53, 0x52, 0x44, 0x10, 0x6f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x53, 0x54, 0x44, 0x10, 0x70, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x5a, 0x4c, 0x10, 0x71, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x42, 0x10, 0x72, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x4a, 0x53, 0x10, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x4f, 0x50, 0x10, 0x74,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x52, 0x59,
	0x10, 0x75, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54,
	0x54, 0x44, 0x10, 0x76, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x54, 0x57, 0x44, 0x10, 0x77, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x54, 0x5a, 0x53, 0x10, 0x78, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x41, 0x48, 0x10, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x47, 0x58, 0x10, 0x7a, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x59, 0x55, 0x10, 0x7b, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55, 0x5a, 0x53, 0x10, 0x7c,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x56, 0x4e, 0x44,
	0x10, 0x7d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x56,
	0x55, 0x56, 0x10, 0x7e, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x57, 0x53, 0x54, 0x10, 0x7f, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x58, 0x41, 0x46, 0x10, 0x80, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x58, 0x43, 0x44, 0x10, 0x81, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x58, 0x4f, 0x46, 0x10, 0x82, 0x01, 0x12,
	0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x58, 0x50, 0x46, 0x10,
	0x83, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x59,
	0x45, 0x52, 0x10, 0x84, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x5a, 0x41, 0x52, 0x10, 0x85, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x5a, 0x4d, 0x57, 0x10, 0x86, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x33,
	0x31, 0x38, 0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x6f, 0x74,
	0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x63, 0x6f, 0x72, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doota_core_v1_core_proto_rawDescOnce sync.Once
	file_doota_core_v1_core_proto_rawDescData = file_doota_core_v1_core_proto_rawDesc
)

func file_doota_core_v1_core_proto_rawDescGZIP() []byte {
	file_doota_core_v1_core_proto_rawDescOnce.Do(func() {
		file_doota_core_v1_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_doota_core_v1_core_proto_rawDescData)
	})
	return file_doota_core_v1_core_proto_rawDescData
}

var file_doota_core_v1_core_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_doota_core_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_doota_core_v1_core_proto_goTypes = []interface{}{
	(PlatformError)(0), // 0: doota.core.v1.PlatformError
	(IdentityRole)(0),  // 1: doota.core.v1.IdentityRole
	(Currency)(0),      // 2: doota.core.v1.Currency
	(QuoteFormErrorDetail_QuoteFormErrorDetailMessage)(0),         // 3: doota.core.v1.QuoteFormErrorDetail.QuoteFormErrorDetailMessage
	(PricingOptionErrorDetail_PricingOptionErrorDetailMessage)(0), // 4: doota.core.v1.PricingOptionErrorDetail.PricingOptionErrorDetailMessage
	(*TzTimestamp)(nil),              // 5: doota.core.v1.TzTimestamp
	(*Identity)(nil),                 // 6: doota.core.v1.Identity
	(*PlatformErrorDetails)(nil),     // 7: doota.core.v1.PlatformErrorDetails
	(*QuoteFormErrorDetails)(nil),    // 8: doota.core.v1.QuoteFormErrorDetails
	(*QuoteFormErrorDetail)(nil),     // 9: doota.core.v1.QuoteFormErrorDetail
	(*PricingOptionErrorDetail)(nil), // 10: doota.core.v1.PricingOptionErrorDetail
	(*timestamppb.Timestamp)(nil),    // 11: google.protobuf.Timestamp
	(*anypb.Any)(nil),                // 12: google.protobuf.Any
}
var file_doota_core_v1_core_proto_depIdxs = []int32{
	11, // 0: doota.core.v1.TzTimestamp.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: doota.core.v1.Identity.role:type_name -> doota.core.v1.IdentityRole
	0,  // 2: doota.core.v1.PlatformErrorDetails.error:type_name -> doota.core.v1.PlatformError
	12, // 3: doota.core.v1.PlatformErrorDetails.details:type_name -> google.protobuf.Any
	9,  // 4: doota.core.v1.QuoteFormErrorDetails.details:type_name -> doota.core.v1.QuoteFormErrorDetail
	3,  // 5: doota.core.v1.QuoteFormErrorDetail.detail:type_name -> doota.core.v1.QuoteFormErrorDetail.QuoteFormErrorDetailMessage
	4,  // 6: doota.core.v1.PricingOptionErrorDetail.detail:type_name -> doota.core.v1.PricingOptionErrorDetail.PricingOptionErrorDetailMessage
	7,  // [7:7] is the sub-list for method output_type
	7,  // [7:7] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_doota_core_v1_core_proto_init() }
func file_doota_core_v1_core_proto_init() {
	if File_doota_core_v1_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doota_core_v1_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TzTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteFormErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuoteFormErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PricingOptionErrorDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doota_core_v1_core_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doota_core_v1_core_proto_goTypes,
		DependencyIndexes: file_doota_core_v1_core_proto_depIdxs,
		EnumInfos:         file_doota_core_v1_core_proto_enumTypes,
		MessageInfos:      file_doota_core_v1_core_proto_msgTypes,
	}.Build()
	File_doota_core_v1_core_proto = out.File
	file_doota_core_v1_core_proto_rawDesc = nil
	file_doota_core_v1_core_proto_goTypes = nil
	file_doota_core_v1_core_proto_depIdxs = nil
}
