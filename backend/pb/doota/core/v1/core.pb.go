// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: doota/core/v1/core.proto

package pbcore

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlatformError int32

const (
	PlatformError_PLATFORM_ERROR_UNSPECIFIED                PlatformError = 0
	PlatformError_PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS     PlatformError = 1
	PlatformError_PLATFORM_ERROR_INVALID_QUOTE              PlatformError = 2
	PlatformError_PLATFORM_UNAUTHORIZED_ACCESS              PlatformError = 3
	PlatformError_PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG PlatformError = 4
)

// Enum value maps for PlatformError.
var (
	PlatformError_name = map[int32]string{
		0: "PLATFORM_ERROR_UNSPECIFIED",
		1: "PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS",
		2: "PLATFORM_ERROR_INVALID_QUOTE",
		3: "PLATFORM_UNAUTHORIZED_ACCESS",
		4: "PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG",
	}
	PlatformError_value = map[string]int32{
		"PLATFORM_ERROR_UNSPECIFIED":                0,
		"PLATFORM_ERROR_MESSAGE_ALREADY_EXISTS":     1,
		"PLATFORM_ERROR_INVALID_QUOTE":              2,
		"PLATFORM_UNAUTHORIZED_ACCESS":              3,
		"PLATFORM_ERROR_PRICING_OPTION_INVALID_ARG": 4,
	}
)

func (x PlatformError) Enum() *PlatformError {
	p := new(PlatformError)
	*p = x
	return p
}

func (x PlatformError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformError) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[0].Descriptor()
}

func (PlatformError) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[0]
}

func (x PlatformError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformError.Descriptor instead.
func (PlatformError) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{0}
}

type IdentityRole int32

const (
	IdentityRole_IDENTITY_ROLE_UNSPECIFIED    IdentityRole = 0
	IdentityRole_IDENTITY_ROLE_USER           IdentityRole = 1
	IdentityRole_IDENTITY_ROLE_ADMIN          IdentityRole = 2
	IdentityRole_IDENTITY_ROLE_PLATFORM_ADMIN IdentityRole = 3
)

// Enum value maps for IdentityRole.
var (
	IdentityRole_name = map[int32]string{
		0: "IDENTITY_ROLE_UNSPECIFIED",
		1: "IDENTITY_ROLE_USER",
		2: "IDENTITY_ROLE_ADMIN",
		3: "IDENTITY_ROLE_PLATFORM_ADMIN",
	}
	IdentityRole_value = map[string]int32{
		"IDENTITY_ROLE_UNSPECIFIED":    0,
		"IDENTITY_ROLE_USER":           1,
		"IDENTITY_ROLE_ADMIN":          2,
		"IDENTITY_ROLE_PLATFORM_ADMIN": 3,
	}
)

func (x IdentityRole) Enum() *IdentityRole {
	p := new(IdentityRole)
	*p = x
	return p
}

func (x IdentityRole) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityRole) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[1].Descriptor()
}

func (IdentityRole) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[1]
}

func (x IdentityRole) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityRole.Descriptor instead.
func (IdentityRole) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{1}
}

type SourceType int32

const (
	SourceType_SOURCE_TYPE_UNSPECIFIED SourceType = 0
	SourceType_SOURCE_TYPE_SUBREDDIT   SourceType = 1
)

// Enum value maps for SourceType.
var (
	SourceType_name = map[int32]string{
		0: "SOURCE_TYPE_UNSPECIFIED",
		1: "SOURCE_TYPE_SUBREDDIT",
	}
	SourceType_value = map[string]int32{
		"SOURCE_TYPE_UNSPECIFIED": 0,
		"SOURCE_TYPE_SUBREDDIT":   1,
	}
)

func (x SourceType) Enum() *SourceType {
	p := new(SourceType)
	*p = x
	return p
}

func (x SourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[2].Descriptor()
}

func (SourceType) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[2]
}

func (x SourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SourceType.Descriptor instead.
func (SourceType) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{2}
}

type LeadStatus int32

const (
	LeadStatus_NEW          LeadStatus = 0
	LeadStatus_NOT_RELEVANT LeadStatus = 1
	LeadStatus_COMPLETED    LeadStatus = 3
	LeadStatus_LEAD         LeadStatus = 4
)

// Enum value maps for LeadStatus.
var (
	LeadStatus_name = map[int32]string{
		0: "NEW",
		1: "NOT_RELEVANT",
		3: "COMPLETED",
		4: "LEAD",
	}
	LeadStatus_value = map[string]int32{
		"NEW":          0,
		"NOT_RELEVANT": 1,
		"COMPLETED":    3,
		"LEAD":         4,
	}
)

func (x LeadStatus) Enum() *LeadStatus {
	p := new(LeadStatus)
	*p = x
	return p
}

func (x LeadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[3].Descriptor()
}

func (LeadStatus) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[3]
}

func (x LeadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeadStatus.Descriptor instead.
func (LeadStatus) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{3}
}

type LeadType int32

const (
	LeadType_POST    LeadType = 0
	LeadType_COMMENT LeadType = 1
)

// Enum value maps for LeadType.
var (
	LeadType_name = map[int32]string{
		0: "POST",
		1: "COMMENT",
	}
	LeadType_value = map[string]int32{
		"POST":    0,
		"COMMENT": 1,
	}
)

func (x LeadType) Enum() *LeadType {
	p := new(LeadType)
	*p = x
	return p
}

func (x LeadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeadType) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[4].Descriptor()
}

func (LeadType) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[4]
}

func (x LeadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeadType.Descriptor instead.
func (LeadType) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{4}
}

type SubscriptionStatus int32

const (
	SubscriptionStatus_SUBSCRIPTION_STATUS_ACTIVE  SubscriptionStatus = 0
	SubscriptionStatus_SUBSCRIPTION_STATUS_EXPIRED SubscriptionStatus = 1
	SubscriptionStatus_SUBSCRIPTION_STATUS_FAILED  SubscriptionStatus = 2
	SubscriptionStatus_SUBSCRIPTION_STATUS_CREATED SubscriptionStatus = 3
)

// Enum value maps for SubscriptionStatus.
var (
	SubscriptionStatus_name = map[int32]string{
		0: "SUBSCRIPTION_STATUS_ACTIVE",
		1: "SUBSCRIPTION_STATUS_EXPIRED",
		2: "SUBSCRIPTION_STATUS_FAILED",
		3: "SUBSCRIPTION_STATUS_CREATED",
	}
	SubscriptionStatus_value = map[string]int32{
		"SUBSCRIPTION_STATUS_ACTIVE":  0,
		"SUBSCRIPTION_STATUS_EXPIRED": 1,
		"SUBSCRIPTION_STATUS_FAILED":  2,
		"SUBSCRIPTION_STATUS_CREATED": 3,
	}
)

func (x SubscriptionStatus) Enum() *SubscriptionStatus {
	p := new(SubscriptionStatus)
	*p = x
	return p
}

func (x SubscriptionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[5].Descriptor()
}

func (SubscriptionStatus) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[5]
}

func (x SubscriptionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatus.Descriptor instead.
func (SubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{5}
}

type SubscriptionPlanID int32

const (
	SubscriptionPlanID_SUBSCRIPTION_PLAN_UNKNOWN SubscriptionPlanID = 0
	SubscriptionPlanID_SUBSCRIPTION_PLAN_FREE    SubscriptionPlanID = 1
	SubscriptionPlanID_SUBSCRIPTION_PLAN_FOUNDER SubscriptionPlanID = 2
	SubscriptionPlanID_SUBSCRIPTION_PLAN_AGENCY  SubscriptionPlanID = 3
	SubscriptionPlanID_SUBSCRIPTION_PLAN_GROWTH  SubscriptionPlanID = 4
)

// Enum value maps for SubscriptionPlanID.
var (
	SubscriptionPlanID_name = map[int32]string{
		0: "SUBSCRIPTION_PLAN_UNKNOWN",
		1: "SUBSCRIPTION_PLAN_FREE",
		2: "SUBSCRIPTION_PLAN_FOUNDER",
		3: "SUBSCRIPTION_PLAN_AGENCY",
		4: "SUBSCRIPTION_PLAN_GROWTH",
	}
	SubscriptionPlanID_value = map[string]int32{
		"SUBSCRIPTION_PLAN_UNKNOWN": 0,
		"SUBSCRIPTION_PLAN_FREE":    1,
		"SUBSCRIPTION_PLAN_FOUNDER": 2,
		"SUBSCRIPTION_PLAN_AGENCY":  3,
		"SUBSCRIPTION_PLAN_GROWTH":  4,
	}
)

func (x SubscriptionPlanID) Enum() *SubscriptionPlanID {
	p := new(SubscriptionPlanID)
	*p = x
	return p
}

func (x SubscriptionPlanID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionPlanID) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_core_v1_core_proto_enumTypes[6].Descriptor()
}

func (SubscriptionPlanID) Type() protoreflect.EnumType {
	return &file_doota_core_v1_core_proto_enumTypes[6]
}

func (x SubscriptionPlanID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionPlanID.Descriptor instead.
func (SubscriptionPlanID) EnumDescriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{6}
}

// TzTimestamp is a wrapper around Timestamp that includes a timezone offset
// for displaying time in a specific timezone. Although timestamps are stored
// with their extracted timezone offsets in the database (e.g., 2024-10-23 16:19:23 EST
// is stored as "2024-10-23T16:19:23-05:00" in the DB and not its UTC equivalent of "2024-10-23T21:19:23Z"),
// we want to ensure they are displayed consistently in the timezone they were extracted from.
//
// We cannot use the basic Timestamp object from protobuf because it only
// represents a UTC timestamp without a timezone offset.
//
// Example:
//
//	Suppose we have an extracted timestamp of "2024-10-23 16:19:23 EST".
//	In the database, it will be stored as "2024-10-23T16:19:23-05:00",
//	preserving the extracted timezone. The TzTimestamp representation would be:
//
//	TzTimestamp {
//	    timestamp = 1730233163  // UTC seconds since Unix epoch for 2024-10-23T16:19:23-05:00
//	    offset = -5
//	}
type TzTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Offset    int32                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *TzTimestamp) Reset() {
	*x = TzTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TzTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TzTimestamp) ProtoMessage() {}

func (x *TzTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TzTimestamp.ProtoReflect.Descriptor instead.
func (*TzTimestamp) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{0}
}

func (x *TzTimestamp) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TzTimestamp) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string       `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OrganizationId string       `protobuf:"bytes,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Role           IdentityRole `protobuf:"varint,3,opt,name=role,proto3,enum=doota.core.v1.IdentityRole" json:"role,omitempty"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{1}
}

func (x *Identity) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Identity) GetOrganizationId() string {
	if x != nil {
		return x.OrganizationId
	}
	return ""
}

func (x *Identity) GetRole() IdentityRole {
	if x != nil {
		return x.Role
	}
	return IdentityRole_IDENTITY_ROLE_UNSPECIFIED
}

type PlatformErrorDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   PlatformError `protobuf:"varint,1,opt,name=error,proto3,enum=doota.core.v1.PlatformError" json:"error,omitempty"`
	Details *anypb.Any    `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *PlatformErrorDetails) Reset() {
	*x = PlatformErrorDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformErrorDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformErrorDetails) ProtoMessage() {}

func (x *PlatformErrorDetails) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformErrorDetails.ProtoReflect.Descriptor instead.
func (*PlatformErrorDetails) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{2}
}

func (x *PlatformErrorDetails) GetError() PlatformError {
	if x != nil {
		return x.Error
	}
	return PlatformError_PLATFORM_ERROR_UNSPECIFIED
}

func (x *PlatformErrorDetails) GetDetails() *anypb.Any {
	if x != nil {
		return x.Details
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	SourceType  SourceType `protobuf:"varint,4,opt,name=SourceType,proto3,enum=doota.core.v1.SourceType" json:"SourceType,omitempty"`
	// Types that are assignable to Details:
	//
	//	*Source_RedditMetadata
	Details isSource_Details `protobuf_oneof:"details"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{3}
}

func (x *Source) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Source) GetSourceType() SourceType {
	if x != nil {
		return x.SourceType
	}
	return SourceType_SOURCE_TYPE_UNSPECIFIED
}

func (m *Source) GetDetails() isSource_Details {
	if m != nil {
		return m.Details
	}
	return nil
}

func (x *Source) GetRedditMetadata() *SubRedditMetadata {
	if x, ok := x.GetDetails().(*Source_RedditMetadata); ok {
		return x.RedditMetadata
	}
	return nil
}

type isSource_Details interface {
	isSource_Details()
}

type Source_RedditMetadata struct {
	RedditMetadata *SubRedditMetadata `protobuf:"bytes,5,opt,name=reddit_metadata,json=redditMetadata,proto3,oneof"`
}

func (*Source_RedditMetadata) isSource_Details() {}

type SubRedditMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title     *string                `protobuf:"bytes,1,opt,name=title,proto3,oneof" json:"title,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *SubRedditMetadata) Reset() {
	*x = SubRedditMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubRedditMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRedditMetadata) ProtoMessage() {}

func (x *SubRedditMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRedditMetadata.ProtoReflect.Descriptor instead.
func (*SubRedditMetadata) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{4}
}

func (x *SubRedditMetadata) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *SubRedditMetadata) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type LeadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainOfThought                 string `protobuf:"bytes,1,opt,name=chain_of_thought,json=chainOfThought,proto3" json:"chain_of_thought,omitempty"`
	SuggestedComment               string `protobuf:"bytes,2,opt,name=suggested_comment,json=suggestedComment,proto3" json:"suggested_comment,omitempty"`
	SuggestedDm                    string `protobuf:"bytes,3,opt,name=suggested_dm,json=suggestedDm,proto3" json:"suggested_dm,omitempty"`
	ChainOfThoughtSuggestedComment string `protobuf:"bytes,4,opt,name=chain_of_thought_suggested_comment,json=chainOfThoughtSuggestedComment,proto3" json:"chain_of_thought_suggested_comment,omitempty"`
	ChainOfThoughtSuggestedDm      string `protobuf:"bytes,5,opt,name=chain_of_thought_suggested_dm,json=chainOfThoughtSuggestedDm,proto3" json:"chain_of_thought_suggested_dm,omitempty"`
	PostUrl                        string `protobuf:"bytes,6,opt,name=post_url,json=postUrl,proto3" json:"post_url,omitempty"`
	DescriptionHtml                string `protobuf:"bytes,7,opt,name=description_html,json=descriptionHtml,proto3" json:"description_html,omitempty"`
	SubredditPrefixed              string `protobuf:"bytes,8,opt,name=subreddit_prefixed,json=subredditPrefixed,proto3" json:"subreddit_prefixed,omitempty"`
	NoOfComments                   int64  `protobuf:"varint,9,opt,name=no_of_comments,json=noOfComments,proto3" json:"no_of_comments,omitempty"`
	Ups                            int64  `protobuf:"varint,10,opt,name=ups,proto3" json:"ups,omitempty"`
	AuthorUrl                      string `protobuf:"bytes,11,opt,name=author_url,json=authorUrl,proto3" json:"author_url,omitempty"`
	DmUrl                          string `protobuf:"bytes,12,opt,name=dm_url,json=dmUrl,proto3" json:"dm_url,omitempty"`
	AutomatedCommentUrl            string `protobuf:"bytes,13,opt,name=automated_comment_url,json=automatedCommentUrl,proto3" json:"automated_comment_url,omitempty"`
	CommentLlmModel                string `protobuf:"bytes,14,opt,name=comment_llm_model,json=commentLlmModel,proto3" json:"comment_llm_model,omitempty"`
	DmLlmModel                     string `protobuf:"bytes,15,opt,name=dm_llm_model,json=dmLlmModel,proto3" json:"dm_llm_model,omitempty"`
	RelevancyLlmModel              string `protobuf:"bytes,16,opt,name=relevancy_llm_model,json=relevancyLlmModel,proto3" json:"relevancy_llm_model,omitempty"`
	LlmModelResponseOverriddenBy   string `protobuf:"bytes,17,opt,name=llm_model_response_overridden_by,json=llmModelResponseOverriddenBy,proto3" json:"llm_model_response_overridden_by,omitempty"`
}

func (x *LeadMetadata) Reset() {
	*x = LeadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadMetadata) ProtoMessage() {}

func (x *LeadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadMetadata.ProtoReflect.Descriptor instead.
func (*LeadMetadata) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{5}
}

func (x *LeadMetadata) GetChainOfThought() string {
	if x != nil {
		return x.ChainOfThought
	}
	return ""
}

func (x *LeadMetadata) GetSuggestedComment() string {
	if x != nil {
		return x.SuggestedComment
	}
	return ""
}

func (x *LeadMetadata) GetSuggestedDm() string {
	if x != nil {
		return x.SuggestedDm
	}
	return ""
}

func (x *LeadMetadata) GetChainOfThoughtSuggestedComment() string {
	if x != nil {
		return x.ChainOfThoughtSuggestedComment
	}
	return ""
}

func (x *LeadMetadata) GetChainOfThoughtSuggestedDm() string {
	if x != nil {
		return x.ChainOfThoughtSuggestedDm
	}
	return ""
}

func (x *LeadMetadata) GetPostUrl() string {
	if x != nil {
		return x.PostUrl
	}
	return ""
}

func (x *LeadMetadata) GetDescriptionHtml() string {
	if x != nil {
		return x.DescriptionHtml
	}
	return ""
}

func (x *LeadMetadata) GetSubredditPrefixed() string {
	if x != nil {
		return x.SubredditPrefixed
	}
	return ""
}

func (x *LeadMetadata) GetNoOfComments() int64 {
	if x != nil {
		return x.NoOfComments
	}
	return 0
}

func (x *LeadMetadata) GetUps() int64 {
	if x != nil {
		return x.Ups
	}
	return 0
}

func (x *LeadMetadata) GetAuthorUrl() string {
	if x != nil {
		return x.AuthorUrl
	}
	return ""
}

func (x *LeadMetadata) GetDmUrl() string {
	if x != nil {
		return x.DmUrl
	}
	return ""
}

func (x *LeadMetadata) GetAutomatedCommentUrl() string {
	if x != nil {
		return x.AutomatedCommentUrl
	}
	return ""
}

func (x *LeadMetadata) GetCommentLlmModel() string {
	if x != nil {
		return x.CommentLlmModel
	}
	return ""
}

func (x *LeadMetadata) GetDmLlmModel() string {
	if x != nil {
		return x.DmLlmModel
	}
	return ""
}

func (x *LeadMetadata) GetRelevancyLlmModel() string {
	if x != nil {
		return x.RelevancyLlmModel
	}
	return ""
}

func (x *LeadMetadata) GetLlmModelResponseOverriddenBy() string {
	if x != nil {
		return x.LlmModelResponseOverriddenBy
	}
	return ""
}

type Lead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SourceId       string                 `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Author         string                 `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	PostId         string                 `protobuf:"bytes,5,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Type           LeadType               `protobuf:"varint,6,opt,name=type,proto3,enum=doota.core.v1.LeadType" json:"type,omitempty"`
	Status         LeadStatus             `protobuf:"varint,7,opt,name=status,proto3,enum=doota.core.v1.LeadStatus" json:"status,omitempty"`
	RelevancyScore float64                `protobuf:"fixed64,8,opt,name=relevancy_score,json=relevancyScore,proto3" json:"relevancy_score,omitempty"`
	PostCreatedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=post_created_at,json=postCreatedAt,proto3" json:"post_created_at,omitempty"`
	Title          *string                `protobuf:"bytes,10,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Metadata       *LeadMetadata          `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Keyword        *Keyword               `protobuf:"bytes,14,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Intents        []string               `protobuf:"bytes,15,rep,name=intents,proto3" json:"intents,omitempty"`
}

func (x *Lead) Reset() {
	*x = Lead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lead) ProtoMessage() {}

func (x *Lead) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lead.ProtoReflect.Descriptor instead.
func (*Lead) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{6}
}

func (x *Lead) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Lead) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Lead) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *Lead) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Lead) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *Lead) GetType() LeadType {
	if x != nil {
		return x.Type
	}
	return LeadType_POST
}

func (x *Lead) GetStatus() LeadStatus {
	if x != nil {
		return x.Status
	}
	return LeadStatus_NEW
}

func (x *Lead) GetRelevancyScore() float64 {
	if x != nil {
		return x.RelevancyScore
	}
	return 0
}

func (x *Lead) GetPostCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PostCreatedAt
	}
	return nil
}

func (x *Lead) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Lead) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Lead) GetMetadata() *LeadMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Lead) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Lead) GetKeyword() *Keyword {
	if x != nil {
		return x.Keyword
	}
	return nil
}

func (x *Lead) GetIntents() []string {
	if x != nil {
		return x.Intents
	}
	return nil
}

type Keyword struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Keyword) Reset() {
	*x = Keyword{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keyword) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keyword) ProtoMessage() {}

func (x *Keyword) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keyword.ProtoReflect.Descriptor instead.
func (*Keyword) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{7}
}

func (x *Keyword) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Keyword) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Website           string     `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	TargetPersona     string     `protobuf:"bytes,5,opt,name=target_persona,json=targetPersona,proto3" json:"target_persona,omitempty"`
	Keywords          []*Keyword `protobuf:"bytes,6,rep,name=keywords,proto3" json:"keywords,omitempty"`
	Sources           []*Source  `protobuf:"bytes,7,rep,name=sources,proto3" json:"sources,omitempty"`
	SuggestedKeywords []string   `protobuf:"bytes,8,rep,name=suggested_keywords,json=suggestedKeywords,proto3" json:"suggested_keywords,omitempty"`
	SuggestedSources  []string   `protobuf:"bytes,9,rep,name=suggested_sources,json=suggestedSources,proto3" json:"suggested_sources,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{8}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Project) GetTargetPersona() string {
	if x != nil {
		return x.TargetPersona
	}
	return ""
}

func (x *Project) GetKeywords() []*Keyword {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *Project) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Project) GetSuggestedKeywords() []string {
	if x != nil {
		return x.SuggestedKeywords
	}
	return nil
}

func (x *Project) GetSuggestedSources() []string {
	if x != nil {
		return x.SuggestedSources
	}
	return nil
}

type UsageLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerDay   int32 `protobuf:"varint,1,opt,name=per_day,json=perDay,proto3" json:"per_day,omitempty"`
	PerMonth int32 `protobuf:"varint,2,opt,name=per_month,json=perMonth,proto3" json:"per_month,omitempty"`
}

func (x *UsageLimit) Reset() {
	*x = UsageLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageLimit) ProtoMessage() {}

func (x *UsageLimit) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageLimit.ProtoReflect.Descriptor instead.
func (*UsageLimit) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{9}
}

func (x *UsageLimit) GetPerDay() int32 {
	if x != nil {
		return x.PerDay
	}
	return 0
}

func (x *UsageLimit) GetPerMonth() int32 {
	if x != nil {
		return x.PerMonth
	}
	return 0
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status      SubscriptionStatus     `protobuf:"varint,1,opt,name=status,proto3,enum=doota.core.v1.SubscriptionStatus" json:"status,omitempty"`
	MaxKeywords int32                  `protobuf:"varint,2,opt,name=max_keywords,json=maxKeywords,proto3" json:"max_keywords,omitempty"`
	MaxSources  int32                  `protobuf:"varint,3,opt,name=max_sources,json=maxSources,proto3" json:"max_sources,omitempty"`
	Comments    *UsageLimit            `protobuf:"bytes,4,opt,name=comments,proto3" json:"comments,omitempty"`
	Dm          *UsageLimit            `protobuf:"bytes,5,opt,name=dm,proto3" json:"dm,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ExpiresAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	PlanId      SubscriptionPlanID     `protobuf:"varint,8,opt,name=plan_id,json=planId,proto3,enum=doota.core.v1.SubscriptionPlanID" json:"plan_id,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_core_v1_core_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_doota_core_v1_core_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_doota_core_v1_core_proto_rawDescGZIP(), []int{10}
}

func (x *Subscription) GetStatus() SubscriptionStatus {
	if x != nil {
		return x.Status
	}
	return SubscriptionStatus_SUBSCRIPTION_STATUS_ACTIVE
}

func (x *Subscription) GetMaxKeywords() int32 {
	if x != nil {
		return x.MaxKeywords
	}
	return 0
}

func (x *Subscription) GetMaxSources() int32 {
	if x != nil {
		return x.MaxSources
	}
	return 0
}

func (x *Subscription) GetComments() *UsageLimit {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Subscription) GetDm() *UsageLimit {
	if x != nil {
		return x.Dm
	}
	return nil
}

func (x *Subscription) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Subscription) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *Subscription) GetPlanId() SubscriptionPlanID {
	if x != nil {
		return x.PlanId
	}
	return SubscriptionPlanID_SUBSCRIPTION_PLAN_UNKNOWN
}

var File_doota_core_v1_core_proto protoreflect.FileDescriptor

var file_doota_core_v1_core_proto_rawDesc = []byte{
	0x0a, 0x18, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x64, 0x6f, 0x6f, 0x74,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x0b, 0x54, 0x7a, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x7d, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x7a, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x32, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x64,
	0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x22, 0xe1, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x0f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x73, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf3, 0x05, 0x0a, 0x0c, 0x4c,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x54, 0x68,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x44, 0x6d, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68,
	0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f,
	0x66, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x29,
	0x0a, 0x10, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74,
	0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x6f, 0x5f, 0x6f,
	0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6e, 0x6f, 0x4f, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x75, 0x70, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x72, 0x6c, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6c, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x6c,
	0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6d, 0x5f, 0x6c, 0x6c, 0x6d,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x6d,
	0x4c, 0x6c, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x65,
	0x76, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x6c, 0x6d, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79,
	0x4c, 0x6c, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x20, 0x6c, 0x6c, 0x6d, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1c, 0x6c, 0x6c, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x79,
	0x22, 0xd7, 0x04, 0x0a, 0x04, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61,
	0x6e, 0x63, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x42, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x07, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd1, 0x02, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x12, 0x32, 0x0a, 0x08,
	0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x42, 0x0a,
	0x0a, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x22, 0xa1, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x02, 0x64, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x02, 0x64, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x64, 0x6f, 0x6f,
	0x74, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x6e, 0x49, 0x64, 0x2a, 0xcd, 0x01, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x4f,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x55, 0x4e, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x2d, 0x0a, 0x29, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x41, 0x52, 0x47, 0x10, 0x04, 0x2a, 0x80, 0x01, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d,
	0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x03, 0x2a, 0x44, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x52, 0x45, 0x44, 0x44, 0x49, 0x54, 0x10, 0x01, 0x2a, 0x40,
	0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x56, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x41, 0x44, 0x10, 0x04,
	0x2a, 0x21, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x50, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x2a, 0x96, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xaa, 0x01, 0x0a,
	0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x02, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x4e, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53,
	0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x47, 0x52, 0x4f, 0x57, 0x54, 0x48, 0x10, 0x04, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x33, 0x31, 0x38,
	0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x63, 0x6f, 0x72, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doota_core_v1_core_proto_rawDescOnce sync.Once
	file_doota_core_v1_core_proto_rawDescData = file_doota_core_v1_core_proto_rawDesc
)

func file_doota_core_v1_core_proto_rawDescGZIP() []byte {
	file_doota_core_v1_core_proto_rawDescOnce.Do(func() {
		file_doota_core_v1_core_proto_rawDescData = protoimpl.X.CompressGZIP(file_doota_core_v1_core_proto_rawDescData)
	})
	return file_doota_core_v1_core_proto_rawDescData
}

var file_doota_core_v1_core_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_doota_core_v1_core_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_doota_core_v1_core_proto_goTypes = []interface{}{
	(PlatformError)(0),            // 0: doota.core.v1.PlatformError
	(IdentityRole)(0),             // 1: doota.core.v1.IdentityRole
	(SourceType)(0),               // 2: doota.core.v1.SourceType
	(LeadStatus)(0),               // 3: doota.core.v1.LeadStatus
	(LeadType)(0),                 // 4: doota.core.v1.LeadType
	(SubscriptionStatus)(0),       // 5: doota.core.v1.SubscriptionStatus
	(SubscriptionPlanID)(0),       // 6: doota.core.v1.SubscriptionPlanID
	(*TzTimestamp)(nil),           // 7: doota.core.v1.TzTimestamp
	(*Identity)(nil),              // 8: doota.core.v1.Identity
	(*PlatformErrorDetails)(nil),  // 9: doota.core.v1.PlatformErrorDetails
	(*Source)(nil),                // 10: doota.core.v1.Source
	(*SubRedditMetadata)(nil),     // 11: doota.core.v1.SubRedditMetadata
	(*LeadMetadata)(nil),          // 12: doota.core.v1.LeadMetadata
	(*Lead)(nil),                  // 13: doota.core.v1.Lead
	(*Keyword)(nil),               // 14: doota.core.v1.Keyword
	(*Project)(nil),               // 15: doota.core.v1.Project
	(*UsageLimit)(nil),            // 16: doota.core.v1.UsageLimit
	(*Subscription)(nil),          // 17: doota.core.v1.Subscription
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 19: google.protobuf.Any
}
var file_doota_core_v1_core_proto_depIdxs = []int32{
	18, // 0: doota.core.v1.TzTimestamp.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 1: doota.core.v1.Identity.role:type_name -> doota.core.v1.IdentityRole
	0,  // 2: doota.core.v1.PlatformErrorDetails.error:type_name -> doota.core.v1.PlatformError
	19, // 3: doota.core.v1.PlatformErrorDetails.details:type_name -> google.protobuf.Any
	2,  // 4: doota.core.v1.Source.SourceType:type_name -> doota.core.v1.SourceType
	11, // 5: doota.core.v1.Source.reddit_metadata:type_name -> doota.core.v1.SubRedditMetadata
	18, // 6: doota.core.v1.SubRedditMetadata.created_at:type_name -> google.protobuf.Timestamp
	4,  // 7: doota.core.v1.Lead.type:type_name -> doota.core.v1.LeadType
	3,  // 8: doota.core.v1.Lead.status:type_name -> doota.core.v1.LeadStatus
	18, // 9: doota.core.v1.Lead.post_created_at:type_name -> google.protobuf.Timestamp
	12, // 10: doota.core.v1.Lead.metadata:type_name -> doota.core.v1.LeadMetadata
	18, // 11: doota.core.v1.Lead.created_at:type_name -> google.protobuf.Timestamp
	14, // 12: doota.core.v1.Lead.keyword:type_name -> doota.core.v1.Keyword
	14, // 13: doota.core.v1.Project.keywords:type_name -> doota.core.v1.Keyword
	10, // 14: doota.core.v1.Project.sources:type_name -> doota.core.v1.Source
	5,  // 15: doota.core.v1.Subscription.status:type_name -> doota.core.v1.SubscriptionStatus
	16, // 16: doota.core.v1.Subscription.comments:type_name -> doota.core.v1.UsageLimit
	16, // 17: doota.core.v1.Subscription.dm:type_name -> doota.core.v1.UsageLimit
	18, // 18: doota.core.v1.Subscription.created_at:type_name -> google.protobuf.Timestamp
	18, // 19: doota.core.v1.Subscription.expires_at:type_name -> google.protobuf.Timestamp
	6,  // 20: doota.core.v1.Subscription.plan_id:type_name -> doota.core.v1.SubscriptionPlanID
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_doota_core_v1_core_proto_init() }
func file_doota_core_v1_core_proto_init() {
	if File_doota_core_v1_core_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doota_core_v1_core_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TzTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformErrorDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubRedditMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keyword); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_core_v1_core_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_doota_core_v1_core_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Source_RedditMetadata)(nil),
	}
	file_doota_core_v1_core_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_doota_core_v1_core_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doota_core_v1_core_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doota_core_v1_core_proto_goTypes,
		DependencyIndexes: file_doota_core_v1_core_proto_depIdxs,
		EnumInfos:         file_doota_core_v1_core_proto_enumTypes,
		MessageInfos:      file_doota_core_v1_core_proto_msgTypes,
	}.Build()
	File_doota_core_v1_core_proto = out.File
	file_doota_core_v1_core_proto_rawDesc = nil
	file_doota_core_v1_core_proto_goTypes = nil
	file_doota_core_v1_core_proto_depIdxs = nil
}
