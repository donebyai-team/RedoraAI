// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: doota/portal/v1/portal.proto

package pbportal

import (
	context "context"
	v1 "github.com/shank318/doota/pb/doota/core/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortalService_GetConfig_FullMethodName                   = "/doota.portal.v1.PortalService/GetConfig"
	PortalService_Self_FullMethodName                        = "/doota.portal.v1.PortalService/Self"
	PortalService_GetIntegration_FullMethodName              = "/doota.portal.v1.PortalService/GetIntegration"
	PortalService_RevokeIntegration_FullMethodName           = "/doota.portal.v1.PortalService/RevokeIntegration"
	PortalService_Batch_FullMethodName                       = "/doota.portal.v1.PortalService/Batch"
	PortalService_CreateCustomerCase_FullMethodName          = "/doota.portal.v1.PortalService/CreateCustomerCase"
	PortalService_PasswordlessStart_FullMethodName           = "/doota.portal.v1.PortalService/PasswordlessStart"
	PortalService_PasswordlessVerify_FullMethodName          = "/doota.portal.v1.PortalService/PasswordlessVerify"
	PortalService_OauthAuthorize_FullMethodName              = "/doota.portal.v1.PortalService/OauthAuthorize"
	PortalService_OauthCallback_FullMethodName               = "/doota.portal.v1.PortalService/OauthCallback"
	PortalService_SocialLoginCallback_FullMethodName         = "/doota.portal.v1.PortalService/SocialLoginCallback"
	PortalService_GetIntegrations_FullMethodName             = "/doota.portal.v1.PortalService/GetIntegrations"
	PortalService_CreateKeywords_FullMethodName              = "/doota.portal.v1.PortalService/CreateKeywords"
	PortalService_AddSource_FullMethodName                   = "/doota.portal.v1.PortalService/AddSource"
	PortalService_GetSources_FullMethodName                  = "/doota.portal.v1.PortalService/GetSources"
	PortalService_RemoveSource_FullMethodName                = "/doota.portal.v1.PortalService/RemoveSource"
	PortalService_GetRelevantLeads_FullMethodName            = "/doota.portal.v1.PortalService/GetRelevantLeads"
	PortalService_UpdateLeadStatus_FullMethodName            = "/doota.portal.v1.PortalService/UpdateLeadStatus"
	PortalService_UpdateLeadInteractionStatus_FullMethodName = "/doota.portal.v1.PortalService/UpdateLeadInteractionStatus"
	PortalService_CreateOrEditProject_FullMethodName         = "/doota.portal.v1.PortalService/CreateOrEditProject"
	PortalService_SuggestKeywordsAndSources_FullMethodName   = "/doota.portal.v1.PortalService/SuggestKeywordsAndSources"
	PortalService_UpdateAutomationSettings_FullMethodName    = "/doota.portal.v1.PortalService/UpdateAutomationSettings"
	PortalService_ConnectReddit_FullMethodName               = "/doota.portal.v1.PortalService/ConnectReddit"
	PortalService_GetLeadInteractions_FullMethodName         = "/doota.portal.v1.PortalService/GetLeadInteractions"
	PortalService_InitiateSubscription_FullMethodName        = "/doota.portal.v1.PortalService/InitiateSubscription"
	PortalService_VerifySubscription_FullMethodName          = "/doota.portal.v1.PortalService/VerifySubscription"
	PortalService_UpgradeSubscription_FullMethodName         = "/doota.portal.v1.PortalService/UpgradeSubscription"
	PortalService_CancelSubscription_FullMethodName          = "/doota.portal.v1.PortalService/CancelSubscription"
	PortalService_GetInsights_FullMethodName                 = "/doota.portal.v1.PortalService/GetInsights"
	PortalService_CreatePost_FullMethodName                  = "/doota.portal.v1.PortalService/CreatePost"
	PortalService_GetPosts_FullMethodName                    = "/doota.portal.v1.PortalService/GetPosts"
	PortalService_SchedulePost_FullMethodName                = "/doota.portal.v1.PortalService/SchedulePost"
)

// PortalServiceClient is the client API for PortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalServiceClient interface {
	GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error)
	Self(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
	RevokeIntegration(ctx context.Context, in *RevokeIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchResp, error)
	CreateCustomerCase(ctx context.Context, in *CreateCustomerCaseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordlessStart(ctx context.Context, in *PasswordlessStartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordlessVerify(ctx context.Context, in *PasswordlessStartVerify, opts ...grpc.CallOption) (*JWT, error)
	OauthAuthorize(ctx context.Context, in *OauthAuthorizeRequest, opts ...grpc.CallOption) (*OauthAuthorizeResponse, error)
	OauthCallback(ctx context.Context, in *OauthCallbackRequest, opts ...grpc.CallOption) (*OauthCallbackResponse, error)
	SocialLoginCallback(ctx context.Context, in *OauthCallbackRequest, opts ...grpc.CallOption) (*JWT, error)
	GetIntegrations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Integrations, error)
	// Reddit
	CreateKeywords(ctx context.Context, in *CreateKeywordReq, opts ...grpc.CallOption) (*CreateKeywordsRes, error)
	AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*v1.Source, error)
	GetSources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSourceResponse, error)
	RemoveSource(ctx context.Context, in *RemoveSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRelevantLeads(ctx context.Context, in *GetRelevantLeadsRequest, opts ...grpc.CallOption) (*GetLeadsResponse, error)
	UpdateLeadStatus(ctx context.Context, in *UpdateLeadStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLeadInteractionStatus(ctx context.Context, in *UpdateLeadInteractionStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateOrEditProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*v1.Project, error)
	SuggestKeywordsAndSources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Project, error)
	UpdateAutomationSettings(ctx context.Context, in *UpdateAutomationSettingRequest, opts ...grpc.CallOption) (*Organization, error)
	ConnectReddit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PortalService_ConnectRedditClient, error)
	GetLeadInteractions(ctx context.Context, in *GetLeadInteractionsRequest, opts ...grpc.CallOption) (*GetLeadInteractionsResponse, error)
	// Payment
	InitiateSubscription(ctx context.Context, in *InitiateSubscriptionRequest, opts ...grpc.CallOption) (*InitiateSubscriptionResponse, error)
	VerifySubscription(ctx context.Context, in *VerifySubscriptionRequest, opts ...grpc.CallOption) (*v1.Subscription, error)
	UpgradeSubscription(ctx context.Context, in *UpgradeSubscriptionRequest, opts ...grpc.CallOption) (*v1.Subscription, error)
	CancelSubscription(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Subscription, error)
	// Insights
	GetInsights(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InsightsResponse, error)
	// Posts
	CreatePost(ctx context.Context, in *v1.PostSettings, opts ...grpc.CallOption) (*v1.Post, error)
	GetPosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPostsResponse, error)
	SchedulePost(ctx context.Context, in *v1.SchedulePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type portalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalServiceClient(cc grpc.ClientConnInterface) PortalServiceClient {
	return &portalServiceClient{cc}
}

func (c *portalServiceClient) GetConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, PortalService_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) Self(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, PortalService_Self_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, PortalService_GetIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) RevokeIntegration(ctx context.Context, in *RevokeIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_RevokeIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PortalService_Batch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) CreateCustomerCase(ctx context.Context, in *CreateCustomerCaseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_CreateCustomerCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) PasswordlessStart(ctx context.Context, in *PasswordlessStartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_PasswordlessStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) PasswordlessVerify(ctx context.Context, in *PasswordlessStartVerify, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, PortalService_PasswordlessVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) OauthAuthorize(ctx context.Context, in *OauthAuthorizeRequest, opts ...grpc.CallOption) (*OauthAuthorizeResponse, error) {
	out := new(OauthAuthorizeResponse)
	err := c.cc.Invoke(ctx, PortalService_OauthAuthorize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) OauthCallback(ctx context.Context, in *OauthCallbackRequest, opts ...grpc.CallOption) (*OauthCallbackResponse, error) {
	out := new(OauthCallbackResponse)
	err := c.cc.Invoke(ctx, PortalService_OauthCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) SocialLoginCallback(ctx context.Context, in *OauthCallbackRequest, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, PortalService_SocialLoginCallback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetIntegrations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Integrations, error) {
	out := new(Integrations)
	err := c.cc.Invoke(ctx, PortalService_GetIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) CreateKeywords(ctx context.Context, in *CreateKeywordReq, opts ...grpc.CallOption) (*CreateKeywordsRes, error) {
	out := new(CreateKeywordsRes)
	err := c.cc.Invoke(ctx, PortalService_CreateKeywords_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) AddSource(ctx context.Context, in *AddSourceRequest, opts ...grpc.CallOption) (*v1.Source, error) {
	out := new(v1.Source)
	err := c.cc.Invoke(ctx, PortalService_AddSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetSources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSourceResponse, error) {
	out := new(GetSourceResponse)
	err := c.cc.Invoke(ctx, PortalService_GetSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) RemoveSource(ctx context.Context, in *RemoveSourceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_RemoveSource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetRelevantLeads(ctx context.Context, in *GetRelevantLeadsRequest, opts ...grpc.CallOption) (*GetLeadsResponse, error) {
	out := new(GetLeadsResponse)
	err := c.cc.Invoke(ctx, PortalService_GetRelevantLeads_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) UpdateLeadStatus(ctx context.Context, in *UpdateLeadStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_UpdateLeadStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) UpdateLeadInteractionStatus(ctx context.Context, in *UpdateLeadInteractionStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_UpdateLeadInteractionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) CreateOrEditProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*v1.Project, error) {
	out := new(v1.Project)
	err := c.cc.Invoke(ctx, PortalService_CreateOrEditProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) SuggestKeywordsAndSources(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Project, error) {
	out := new(v1.Project)
	err := c.cc.Invoke(ctx, PortalService_SuggestKeywordsAndSources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) UpdateAutomationSettings(ctx context.Context, in *UpdateAutomationSettingRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, PortalService_UpdateAutomationSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) ConnectReddit(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (PortalService_ConnectRedditClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortalService_ServiceDesc.Streams[0], PortalService_ConnectReddit_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &portalServiceConnectRedditClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortalService_ConnectRedditClient interface {
	Recv() (*ConnectRedditResponse, error)
	grpc.ClientStream
}

type portalServiceConnectRedditClient struct {
	grpc.ClientStream
}

func (x *portalServiceConnectRedditClient) Recv() (*ConnectRedditResponse, error) {
	m := new(ConnectRedditResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portalServiceClient) GetLeadInteractions(ctx context.Context, in *GetLeadInteractionsRequest, opts ...grpc.CallOption) (*GetLeadInteractionsResponse, error) {
	out := new(GetLeadInteractionsResponse)
	err := c.cc.Invoke(ctx, PortalService_GetLeadInteractions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) InitiateSubscription(ctx context.Context, in *InitiateSubscriptionRequest, opts ...grpc.CallOption) (*InitiateSubscriptionResponse, error) {
	out := new(InitiateSubscriptionResponse)
	err := c.cc.Invoke(ctx, PortalService_InitiateSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) VerifySubscription(ctx context.Context, in *VerifySubscriptionRequest, opts ...grpc.CallOption) (*v1.Subscription, error) {
	out := new(v1.Subscription)
	err := c.cc.Invoke(ctx, PortalService_VerifySubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) UpgradeSubscription(ctx context.Context, in *UpgradeSubscriptionRequest, opts ...grpc.CallOption) (*v1.Subscription, error) {
	out := new(v1.Subscription)
	err := c.cc.Invoke(ctx, PortalService_UpgradeSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) CancelSubscription(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*v1.Subscription, error) {
	out := new(v1.Subscription)
	err := c.cc.Invoke(ctx, PortalService_CancelSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetInsights(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InsightsResponse, error) {
	out := new(InsightsResponse)
	err := c.cc.Invoke(ctx, PortalService_GetInsights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) CreatePost(ctx context.Context, in *v1.PostSettings, opts ...grpc.CallOption) (*v1.Post, error) {
	out := new(v1.Post)
	err := c.cc.Invoke(ctx, PortalService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetPosts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPostsResponse, error) {
	out := new(GetPostsResponse)
	err := c.cc.Invoke(ctx, PortalService_GetPosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) SchedulePost(ctx context.Context, in *v1.SchedulePostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_SchedulePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalServiceServer is the server API for PortalService service.
// All implementations must embed UnimplementedPortalServiceServer
// for forward compatibility
type PortalServiceServer interface {
	GetConfig(context.Context, *emptypb.Empty) (*Config, error)
	Self(context.Context, *emptypb.Empty) (*User, error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(context.Context, *GetIntegrationRequest) (*Integration, error)
	RevokeIntegration(context.Context, *RevokeIntegrationRequest) (*emptypb.Empty, error)
	Batch(context.Context, *BatchReq) (*BatchResp, error)
	CreateCustomerCase(context.Context, *CreateCustomerCaseReq) (*emptypb.Empty, error)
	PasswordlessStart(context.Context, *PasswordlessStartRequest) (*emptypb.Empty, error)
	PasswordlessVerify(context.Context, *PasswordlessStartVerify) (*JWT, error)
	OauthAuthorize(context.Context, *OauthAuthorizeRequest) (*OauthAuthorizeResponse, error)
	OauthCallback(context.Context, *OauthCallbackRequest) (*OauthCallbackResponse, error)
	SocialLoginCallback(context.Context, *OauthCallbackRequest) (*JWT, error)
	GetIntegrations(context.Context, *emptypb.Empty) (*Integrations, error)
	// Reddit
	CreateKeywords(context.Context, *CreateKeywordReq) (*CreateKeywordsRes, error)
	AddSource(context.Context, *AddSourceRequest) (*v1.Source, error)
	GetSources(context.Context, *emptypb.Empty) (*GetSourceResponse, error)
	RemoveSource(context.Context, *RemoveSourceRequest) (*emptypb.Empty, error)
	GetRelevantLeads(context.Context, *GetRelevantLeadsRequest) (*GetLeadsResponse, error)
	UpdateLeadStatus(context.Context, *UpdateLeadStatusRequest) (*emptypb.Empty, error)
	UpdateLeadInteractionStatus(context.Context, *UpdateLeadInteractionStatusRequest) (*emptypb.Empty, error)
	CreateOrEditProject(context.Context, *CreateProjectRequest) (*v1.Project, error)
	SuggestKeywordsAndSources(context.Context, *emptypb.Empty) (*v1.Project, error)
	UpdateAutomationSettings(context.Context, *UpdateAutomationSettingRequest) (*Organization, error)
	ConnectReddit(*emptypb.Empty, PortalService_ConnectRedditServer) error
	GetLeadInteractions(context.Context, *GetLeadInteractionsRequest) (*GetLeadInteractionsResponse, error)
	// Payment
	InitiateSubscription(context.Context, *InitiateSubscriptionRequest) (*InitiateSubscriptionResponse, error)
	VerifySubscription(context.Context, *VerifySubscriptionRequest) (*v1.Subscription, error)
	UpgradeSubscription(context.Context, *UpgradeSubscriptionRequest) (*v1.Subscription, error)
	CancelSubscription(context.Context, *emptypb.Empty) (*v1.Subscription, error)
	// Insights
	GetInsights(context.Context, *emptypb.Empty) (*InsightsResponse, error)
	// Posts
	CreatePost(context.Context, *v1.PostSettings) (*v1.Post, error)
	GetPosts(context.Context, *emptypb.Empty) (*GetPostsResponse, error)
	SchedulePost(context.Context, *v1.SchedulePostRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPortalServiceServer()
}

// UnimplementedPortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortalServiceServer struct {
}

func (UnimplementedPortalServiceServer) GetConfig(context.Context, *emptypb.Empty) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedPortalServiceServer) Self(context.Context, *emptypb.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Self not implemented")
}
func (UnimplementedPortalServiceServer) GetIntegration(context.Context, *GetIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (UnimplementedPortalServiceServer) RevokeIntegration(context.Context, *RevokeIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeIntegration not implemented")
}
func (UnimplementedPortalServiceServer) Batch(context.Context, *BatchReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedPortalServiceServer) CreateCustomerCase(context.Context, *CreateCustomerCaseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerCase not implemented")
}
func (UnimplementedPortalServiceServer) PasswordlessStart(context.Context, *PasswordlessStartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordlessStart not implemented")
}
func (UnimplementedPortalServiceServer) PasswordlessVerify(context.Context, *PasswordlessStartVerify) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordlessVerify not implemented")
}
func (UnimplementedPortalServiceServer) OauthAuthorize(context.Context, *OauthAuthorizeRequest) (*OauthAuthorizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthAuthorize not implemented")
}
func (UnimplementedPortalServiceServer) OauthCallback(context.Context, *OauthCallbackRequest) (*OauthCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OauthCallback not implemented")
}
func (UnimplementedPortalServiceServer) SocialLoginCallback(context.Context, *OauthCallbackRequest) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SocialLoginCallback not implemented")
}
func (UnimplementedPortalServiceServer) GetIntegrations(context.Context, *emptypb.Empty) (*Integrations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegrations not implemented")
}
func (UnimplementedPortalServiceServer) CreateKeywords(context.Context, *CreateKeywordReq) (*CreateKeywordsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeywords not implemented")
}
func (UnimplementedPortalServiceServer) AddSource(context.Context, *AddSourceRequest) (*v1.Source, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSource not implemented")
}
func (UnimplementedPortalServiceServer) GetSources(context.Context, *emptypb.Empty) (*GetSourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSources not implemented")
}
func (UnimplementedPortalServiceServer) RemoveSource(context.Context, *RemoveSourceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSource not implemented")
}
func (UnimplementedPortalServiceServer) GetRelevantLeads(context.Context, *GetRelevantLeadsRequest) (*GetLeadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelevantLeads not implemented")
}
func (UnimplementedPortalServiceServer) UpdateLeadStatus(context.Context, *UpdateLeadStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeadStatus not implemented")
}
func (UnimplementedPortalServiceServer) UpdateLeadInteractionStatus(context.Context, *UpdateLeadInteractionStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLeadInteractionStatus not implemented")
}
func (UnimplementedPortalServiceServer) CreateOrEditProject(context.Context, *CreateProjectRequest) (*v1.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrEditProject not implemented")
}
func (UnimplementedPortalServiceServer) SuggestKeywordsAndSources(context.Context, *emptypb.Empty) (*v1.Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestKeywordsAndSources not implemented")
}
func (UnimplementedPortalServiceServer) UpdateAutomationSettings(context.Context, *UpdateAutomationSettingRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAutomationSettings not implemented")
}
func (UnimplementedPortalServiceServer) ConnectReddit(*emptypb.Empty, PortalService_ConnectRedditServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectReddit not implemented")
}
func (UnimplementedPortalServiceServer) GetLeadInteractions(context.Context, *GetLeadInteractionsRequest) (*GetLeadInteractionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeadInteractions not implemented")
}
func (UnimplementedPortalServiceServer) InitiateSubscription(context.Context, *InitiateSubscriptionRequest) (*InitiateSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateSubscription not implemented")
}
func (UnimplementedPortalServiceServer) VerifySubscription(context.Context, *VerifySubscriptionRequest) (*v1.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySubscription not implemented")
}
func (UnimplementedPortalServiceServer) UpgradeSubscription(context.Context, *UpgradeSubscriptionRequest) (*v1.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeSubscription not implemented")
}
func (UnimplementedPortalServiceServer) CancelSubscription(context.Context, *emptypb.Empty) (*v1.Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedPortalServiceServer) GetInsights(context.Context, *emptypb.Empty) (*InsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInsights not implemented")
}
func (UnimplementedPortalServiceServer) CreatePost(context.Context, *v1.PostSettings) (*v1.Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPortalServiceServer) GetPosts(context.Context, *emptypb.Empty) (*GetPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosts not implemented")
}
func (UnimplementedPortalServiceServer) SchedulePost(context.Context, *v1.SchedulePostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchedulePost not implemented")
}
func (UnimplementedPortalServiceServer) mustEmbedUnimplementedPortalServiceServer() {}

// UnsafePortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalServiceServer will
// result in compilation errors.
type UnsafePortalServiceServer interface {
	mustEmbedUnimplementedPortalServiceServer()
}

func RegisterPortalServiceServer(s grpc.ServiceRegistrar, srv PortalServiceServer) {
	s.RegisterService(&PortalService_ServiceDesc, srv)
}

func _PortalService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_Self_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).Self(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_Self_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).Self(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetIntegration(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_RevokeIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).RevokeIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_RevokeIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).RevokeIntegration(ctx, req.(*RevokeIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).Batch(ctx, req.(*BatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_CreateCustomerCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).CreateCustomerCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_CreateCustomerCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).CreateCustomerCase(ctx, req.(*CreateCustomerCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_PasswordlessStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordlessStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).PasswordlessStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_PasswordlessStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).PasswordlessStart(ctx, req.(*PasswordlessStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_PasswordlessVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordlessStartVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).PasswordlessVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_PasswordlessVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).PasswordlessVerify(ctx, req.(*PasswordlessStartVerify))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_OauthAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).OauthAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_OauthAuthorize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).OauthAuthorize(ctx, req.(*OauthAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_OauthCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).OauthCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_OauthCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).OauthCallback(ctx, req.(*OauthCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_SocialLoginCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OauthCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).SocialLoginCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_SocialLoginCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).SocialLoginCallback(ctx, req.(*OauthCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetIntegrations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_CreateKeywords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeywordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).CreateKeywords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_CreateKeywords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).CreateKeywords(ctx, req.(*CreateKeywordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_AddSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).AddSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_AddSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).AddSource(ctx, req.(*AddSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetSources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_RemoveSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).RemoveSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_RemoveSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).RemoveSource(ctx, req.(*RemoveSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetRelevantLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelevantLeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetRelevantLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetRelevantLeads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetRelevantLeads(ctx, req.(*GetRelevantLeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_UpdateLeadStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeadStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).UpdateLeadStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_UpdateLeadStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).UpdateLeadStatus(ctx, req.(*UpdateLeadStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_UpdateLeadInteractionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeadInteractionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).UpdateLeadInteractionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_UpdateLeadInteractionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).UpdateLeadInteractionStatus(ctx, req.(*UpdateLeadInteractionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_CreateOrEditProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).CreateOrEditProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_CreateOrEditProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).CreateOrEditProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_SuggestKeywordsAndSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).SuggestKeywordsAndSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_SuggestKeywordsAndSources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).SuggestKeywordsAndSources(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_UpdateAutomationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAutomationSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).UpdateAutomationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_UpdateAutomationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).UpdateAutomationSettings(ctx, req.(*UpdateAutomationSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_ConnectReddit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortalServiceServer).ConnectReddit(m, &portalServiceConnectRedditServer{stream})
}

type PortalService_ConnectRedditServer interface {
	Send(*ConnectRedditResponse) error
	grpc.ServerStream
}

type portalServiceConnectRedditServer struct {
	grpc.ServerStream
}

func (x *portalServiceConnectRedditServer) Send(m *ConnectRedditResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PortalService_GetLeadInteractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeadInteractionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetLeadInteractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetLeadInteractions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetLeadInteractions(ctx, req.(*GetLeadInteractionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_InitiateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).InitiateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_InitiateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).InitiateSubscription(ctx, req.(*InitiateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_VerifySubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).VerifySubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_VerifySubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).VerifySubscription(ctx, req.(*VerifySubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_UpgradeSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).UpgradeSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_UpgradeSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).UpgradeSubscription(ctx, req.(*UpgradeSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).CancelSubscription(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetInsights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetInsights(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PostSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).CreatePost(ctx, req.(*v1.PostSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetPosts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_SchedulePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SchedulePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).SchedulePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_SchedulePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).SchedulePost(ctx, req.(*v1.SchedulePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalService_ServiceDesc is the grpc.ServiceDesc for PortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doota.portal.v1.PortalService",
	HandlerType: (*PortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _PortalService_GetConfig_Handler,
		},
		{
			MethodName: "Self",
			Handler:    _PortalService_Self_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _PortalService_GetIntegration_Handler,
		},
		{
			MethodName: "RevokeIntegration",
			Handler:    _PortalService_RevokeIntegration_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _PortalService_Batch_Handler,
		},
		{
			MethodName: "CreateCustomerCase",
			Handler:    _PortalService_CreateCustomerCase_Handler,
		},
		{
			MethodName: "PasswordlessStart",
			Handler:    _PortalService_PasswordlessStart_Handler,
		},
		{
			MethodName: "PasswordlessVerify",
			Handler:    _PortalService_PasswordlessVerify_Handler,
		},
		{
			MethodName: "OauthAuthorize",
			Handler:    _PortalService_OauthAuthorize_Handler,
		},
		{
			MethodName: "OauthCallback",
			Handler:    _PortalService_OauthCallback_Handler,
		},
		{
			MethodName: "SocialLoginCallback",
			Handler:    _PortalService_SocialLoginCallback_Handler,
		},
		{
			MethodName: "GetIntegrations",
			Handler:    _PortalService_GetIntegrations_Handler,
		},
		{
			MethodName: "CreateKeywords",
			Handler:    _PortalService_CreateKeywords_Handler,
		},
		{
			MethodName: "AddSource",
			Handler:    _PortalService_AddSource_Handler,
		},
		{
			MethodName: "GetSources",
			Handler:    _PortalService_GetSources_Handler,
		},
		{
			MethodName: "RemoveSource",
			Handler:    _PortalService_RemoveSource_Handler,
		},
		{
			MethodName: "GetRelevantLeads",
			Handler:    _PortalService_GetRelevantLeads_Handler,
		},
		{
			MethodName: "UpdateLeadStatus",
			Handler:    _PortalService_UpdateLeadStatus_Handler,
		},
		{
			MethodName: "UpdateLeadInteractionStatus",
			Handler:    _PortalService_UpdateLeadInteractionStatus_Handler,
		},
		{
			MethodName: "CreateOrEditProject",
			Handler:    _PortalService_CreateOrEditProject_Handler,
		},
		{
			MethodName: "SuggestKeywordsAndSources",
			Handler:    _PortalService_SuggestKeywordsAndSources_Handler,
		},
		{
			MethodName: "UpdateAutomationSettings",
			Handler:    _PortalService_UpdateAutomationSettings_Handler,
		},
		{
			MethodName: "GetLeadInteractions",
			Handler:    _PortalService_GetLeadInteractions_Handler,
		},
		{
			MethodName: "InitiateSubscription",
			Handler:    _PortalService_InitiateSubscription_Handler,
		},
		{
			MethodName: "VerifySubscription",
			Handler:    _PortalService_VerifySubscription_Handler,
		},
		{
			MethodName: "UpgradeSubscription",
			Handler:    _PortalService_UpgradeSubscription_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _PortalService_CancelSubscription_Handler,
		},
		{
			MethodName: "GetInsights",
			Handler:    _PortalService_GetInsights_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _PortalService_CreatePost_Handler,
		},
		{
			MethodName: "GetPosts",
			Handler:    _PortalService_GetPosts_Handler,
		},
		{
			MethodName: "SchedulePost",
			Handler:    _PortalService_SchedulePost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectReddit",
			Handler:       _PortalService_ConnectReddit_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "doota/portal/v1/portal.proto",
}
