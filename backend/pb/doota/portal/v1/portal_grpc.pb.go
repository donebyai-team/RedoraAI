// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: doota/portal/v1/portal.proto

package pbportal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PortalService_Self_FullMethodName               = "/doota.portal.v1.PortalService/Self"
	PortalService_GetIntegration_FullMethodName     = "/doota.portal.v1.PortalService/GetIntegration"
	PortalService_Batch_FullMethodName              = "/doota.portal.v1.PortalService/Batch"
	PortalService_CreateCustomerCase_FullMethodName = "/doota.portal.v1.PortalService/CreateCustomerCase"
	PortalService_PasswordlessStart_FullMethodName  = "/doota.portal.v1.PortalService/PasswordlessStart"
	PortalService_PasswordlessVerify_FullMethodName = "/doota.portal.v1.PortalService/PasswordlessVerify"
)

// PortalServiceClient is the client API for PortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortalServiceClient interface {
	// rpc GetConfig(.google.protobuf.Empty) returns (Config);
	Self(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error)
	Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchResp, error)
	CreateCustomerCase(ctx context.Context, in *CreateCustomerCaseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordlessStart(ctx context.Context, in *PasswordlessStartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PasswordlessVerify(ctx context.Context, in *PasswordlessStartVerify, opts ...grpc.CallOption) (*JWT, error)
}

type portalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortalServiceClient(cc grpc.ClientConnInterface) PortalServiceClient {
	return &portalServiceClient{cc}
}

func (c *portalServiceClient) Self(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, PortalService_Self_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*Integration, error) {
	out := new(Integration)
	err := c.cc.Invoke(ctx, PortalService_GetIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) Batch(ctx context.Context, in *BatchReq, opts ...grpc.CallOption) (*BatchResp, error) {
	out := new(BatchResp)
	err := c.cc.Invoke(ctx, PortalService_Batch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) CreateCustomerCase(ctx context.Context, in *CreateCustomerCaseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_CreateCustomerCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) PasswordlessStart(ctx context.Context, in *PasswordlessStartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PortalService_PasswordlessStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portalServiceClient) PasswordlessVerify(ctx context.Context, in *PasswordlessStartVerify, opts ...grpc.CallOption) (*JWT, error) {
	out := new(JWT)
	err := c.cc.Invoke(ctx, PortalService_PasswordlessVerify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortalServiceServer is the server API for PortalService service.
// All implementations must embed UnimplementedPortalServiceServer
// for forward compatibility
type PortalServiceServer interface {
	// rpc GetConfig(.google.protobuf.Empty) returns (Config);
	Self(context.Context, *emptypb.Empty) (*User, error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(context.Context, *GetIntegrationRequest) (*Integration, error)
	Batch(context.Context, *BatchReq) (*BatchResp, error)
	CreateCustomerCase(context.Context, *CreateCustomerCaseReq) (*emptypb.Empty, error)
	PasswordlessStart(context.Context, *PasswordlessStartRequest) (*emptypb.Empty, error)
	PasswordlessVerify(context.Context, *PasswordlessStartVerify) (*JWT, error)
	mustEmbedUnimplementedPortalServiceServer()
}

// UnimplementedPortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortalServiceServer struct {
}

func (UnimplementedPortalServiceServer) Self(context.Context, *emptypb.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Self not implemented")
}
func (UnimplementedPortalServiceServer) GetIntegration(context.Context, *GetIntegrationRequest) (*Integration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (UnimplementedPortalServiceServer) Batch(context.Context, *BatchReq) (*BatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Batch not implemented")
}
func (UnimplementedPortalServiceServer) CreateCustomerCase(context.Context, *CreateCustomerCaseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomerCase not implemented")
}
func (UnimplementedPortalServiceServer) PasswordlessStart(context.Context, *PasswordlessStartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordlessStart not implemented")
}
func (UnimplementedPortalServiceServer) PasswordlessVerify(context.Context, *PasswordlessStartVerify) (*JWT, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordlessVerify not implemented")
}
func (UnimplementedPortalServiceServer) mustEmbedUnimplementedPortalServiceServer() {}

// UnsafePortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortalServiceServer will
// result in compilation errors.
type UnsafePortalServiceServer interface {
	mustEmbedUnimplementedPortalServiceServer()
}

func RegisterPortalServiceServer(s grpc.ServiceRegistrar, srv PortalServiceServer) {
	s.RegisterService(&PortalService_ServiceDesc, srv)
}

func _PortalService_Self_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).Self(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_Self_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).Self(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_GetIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).GetIntegration(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_Batch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).Batch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_Batch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).Batch(ctx, req.(*BatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_CreateCustomerCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerCaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).CreateCustomerCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_CreateCustomerCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).CreateCustomerCase(ctx, req.(*CreateCustomerCaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_PasswordlessStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordlessStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).PasswordlessStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_PasswordlessStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).PasswordlessStart(ctx, req.(*PasswordlessStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortalService_PasswordlessVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordlessStartVerify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortalServiceServer).PasswordlessVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortalService_PasswordlessVerify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortalServiceServer).PasswordlessVerify(ctx, req.(*PasswordlessStartVerify))
	}
	return interceptor(ctx, in, info, handler)
}

// PortalService_ServiceDesc is the grpc.ServiceDesc for PortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doota.portal.v1.PortalService",
	HandlerType: (*PortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Self",
			Handler:    _PortalService_Self_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _PortalService_GetIntegration_Handler,
		},
		{
			MethodName: "Batch",
			Handler:    _PortalService_Batch_Handler,
		},
		{
			MethodName: "CreateCustomerCase",
			Handler:    _PortalService_CreateCustomerCase_Handler,
		},
		{
			MethodName: "PasswordlessStart",
			Handler:    _PortalService_PasswordlessStart_Handler,
		},
		{
			MethodName: "PasswordlessVerify",
			Handler:    _PortalService_PasswordlessVerify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doota/portal/v1/portal.proto",
}
