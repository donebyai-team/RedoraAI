// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: doota/portal/v1/portal.proto

package pbportalconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shank318/doota/pb/doota/portal/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PortalServiceName is the fully-qualified name of the PortalService service.
	PortalServiceName = "doota.portal.v1.PortalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PortalServiceSelfProcedure is the fully-qualified name of the PortalService's Self RPC.
	PortalServiceSelfProcedure = "/doota.portal.v1.PortalService/Self"
	// PortalServiceGetIntegrationProcedure is the fully-qualified name of the PortalService's
	// GetIntegration RPC.
	PortalServiceGetIntegrationProcedure = "/doota.portal.v1.PortalService/GetIntegration"
	// PortalServiceBatchProcedure is the fully-qualified name of the PortalService's Batch RPC.
	PortalServiceBatchProcedure = "/doota.portal.v1.PortalService/Batch"
	// PortalServiceCreateCustomerCaseProcedure is the fully-qualified name of the PortalService's
	// CreateCustomerCase RPC.
	PortalServiceCreateCustomerCaseProcedure = "/doota.portal.v1.PortalService/CreateCustomerCase"
	// PortalServicePasswordlessStartProcedure is the fully-qualified name of the PortalService's
	// PasswordlessStart RPC.
	PortalServicePasswordlessStartProcedure = "/doota.portal.v1.PortalService/PasswordlessStart"
	// PortalServicePasswordlessVerifyProcedure is the fully-qualified name of the PortalService's
	// PasswordlessVerify RPC.
	PortalServicePasswordlessVerifyProcedure = "/doota.portal.v1.PortalService/PasswordlessVerify"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	portalServiceServiceDescriptor                  = v1.File_doota_portal_v1_portal_proto.Services().ByName("PortalService")
	portalServiceSelfMethodDescriptor               = portalServiceServiceDescriptor.Methods().ByName("Self")
	portalServiceGetIntegrationMethodDescriptor     = portalServiceServiceDescriptor.Methods().ByName("GetIntegration")
	portalServiceBatchMethodDescriptor              = portalServiceServiceDescriptor.Methods().ByName("Batch")
	portalServiceCreateCustomerCaseMethodDescriptor = portalServiceServiceDescriptor.Methods().ByName("CreateCustomerCase")
	portalServicePasswordlessStartMethodDescriptor  = portalServiceServiceDescriptor.Methods().ByName("PasswordlessStart")
	portalServicePasswordlessVerifyMethodDescriptor = portalServiceServiceDescriptor.Methods().ByName("PasswordlessVerify")
)

// PortalServiceClient is a client for the doota.portal.v1.PortalService service.
type PortalServiceClient interface {
	// rpc GetConfig(.google.protobuf.Empty) returns (Config);
	Self(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error)
	Batch(context.Context, *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error)
	CreateCustomerCase(context.Context, *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error)
	PasswordlessStart(context.Context, *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error)
	PasswordlessVerify(context.Context, *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error)
}

// NewPortalServiceClient constructs a client for the doota.portal.v1.PortalService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPortalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PortalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &portalServiceClient{
		self: connect.NewClient[emptypb.Empty, v1.User](
			httpClient,
			baseURL+PortalServiceSelfProcedure,
			connect.WithSchema(portalServiceSelfMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntegration: connect.NewClient[v1.GetIntegrationRequest, v1.Integration](
			httpClient,
			baseURL+PortalServiceGetIntegrationProcedure,
			connect.WithSchema(portalServiceGetIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		batch: connect.NewClient[v1.BatchReq, v1.BatchResp](
			httpClient,
			baseURL+PortalServiceBatchProcedure,
			connect.WithSchema(portalServiceBatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCustomerCase: connect.NewClient[v1.CreateCustomerCaseReq, emptypb.Empty](
			httpClient,
			baseURL+PortalServiceCreateCustomerCaseProcedure,
			connect.WithSchema(portalServiceCreateCustomerCaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		passwordlessStart: connect.NewClient[v1.PasswordlessStartRequest, emptypb.Empty](
			httpClient,
			baseURL+PortalServicePasswordlessStartProcedure,
			connect.WithSchema(portalServicePasswordlessStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		passwordlessVerify: connect.NewClient[v1.PasswordlessStartVerify, v1.JWT](
			httpClient,
			baseURL+PortalServicePasswordlessVerifyProcedure,
			connect.WithSchema(portalServicePasswordlessVerifyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// portalServiceClient implements PortalServiceClient.
type portalServiceClient struct {
	self               *connect.Client[emptypb.Empty, v1.User]
	getIntegration     *connect.Client[v1.GetIntegrationRequest, v1.Integration]
	batch              *connect.Client[v1.BatchReq, v1.BatchResp]
	createCustomerCase *connect.Client[v1.CreateCustomerCaseReq, emptypb.Empty]
	passwordlessStart  *connect.Client[v1.PasswordlessStartRequest, emptypb.Empty]
	passwordlessVerify *connect.Client[v1.PasswordlessStartVerify, v1.JWT]
}

// Self calls doota.portal.v1.PortalService.Self.
func (c *portalServiceClient) Self(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error) {
	return c.self.CallUnary(ctx, req)
}

// GetIntegration calls doota.portal.v1.PortalService.GetIntegration.
func (c *portalServiceClient) GetIntegration(ctx context.Context, req *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error) {
	return c.getIntegration.CallUnary(ctx, req)
}

// Batch calls doota.portal.v1.PortalService.Batch.
func (c *portalServiceClient) Batch(ctx context.Context, req *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error) {
	return c.batch.CallUnary(ctx, req)
}

// CreateCustomerCase calls doota.portal.v1.PortalService.CreateCustomerCase.
func (c *portalServiceClient) CreateCustomerCase(ctx context.Context, req *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error) {
	return c.createCustomerCase.CallUnary(ctx, req)
}

// PasswordlessStart calls doota.portal.v1.PortalService.PasswordlessStart.
func (c *portalServiceClient) PasswordlessStart(ctx context.Context, req *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.passwordlessStart.CallUnary(ctx, req)
}

// PasswordlessVerify calls doota.portal.v1.PortalService.PasswordlessVerify.
func (c *portalServiceClient) PasswordlessVerify(ctx context.Context, req *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error) {
	return c.passwordlessVerify.CallUnary(ctx, req)
}

// PortalServiceHandler is an implementation of the doota.portal.v1.PortalService service.
type PortalServiceHandler interface {
	// rpc GetConfig(.google.protobuf.Empty) returns (Config);
	Self(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error)
	Batch(context.Context, *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error)
	CreateCustomerCase(context.Context, *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error)
	PasswordlessStart(context.Context, *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error)
	PasswordlessVerify(context.Context, *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error)
}

// NewPortalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPortalServiceHandler(svc PortalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	portalServiceSelfHandler := connect.NewUnaryHandler(
		PortalServiceSelfProcedure,
		svc.Self,
		connect.WithSchema(portalServiceSelfMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetIntegrationHandler := connect.NewUnaryHandler(
		PortalServiceGetIntegrationProcedure,
		svc.GetIntegration,
		connect.WithSchema(portalServiceGetIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceBatchHandler := connect.NewUnaryHandler(
		PortalServiceBatchProcedure,
		svc.Batch,
		connect.WithSchema(portalServiceBatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceCreateCustomerCaseHandler := connect.NewUnaryHandler(
		PortalServiceCreateCustomerCaseProcedure,
		svc.CreateCustomerCase,
		connect.WithSchema(portalServiceCreateCustomerCaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServicePasswordlessStartHandler := connect.NewUnaryHandler(
		PortalServicePasswordlessStartProcedure,
		svc.PasswordlessStart,
		connect.WithSchema(portalServicePasswordlessStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServicePasswordlessVerifyHandler := connect.NewUnaryHandler(
		PortalServicePasswordlessVerifyProcedure,
		svc.PasswordlessVerify,
		connect.WithSchema(portalServicePasswordlessVerifyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/doota.portal.v1.PortalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PortalServiceSelfProcedure:
			portalServiceSelfHandler.ServeHTTP(w, r)
		case PortalServiceGetIntegrationProcedure:
			portalServiceGetIntegrationHandler.ServeHTTP(w, r)
		case PortalServiceBatchProcedure:
			portalServiceBatchHandler.ServeHTTP(w, r)
		case PortalServiceCreateCustomerCaseProcedure:
			portalServiceCreateCustomerCaseHandler.ServeHTTP(w, r)
		case PortalServicePasswordlessStartProcedure:
			portalServicePasswordlessStartHandler.ServeHTTP(w, r)
		case PortalServicePasswordlessVerifyProcedure:
			portalServicePasswordlessVerifyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPortalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPortalServiceHandler struct{}

func (UnimplementedPortalServiceHandler) Self(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.Self is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetIntegration is not implemented"))
}

func (UnimplementedPortalServiceHandler) Batch(context.Context, *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.Batch is not implemented"))
}

func (UnimplementedPortalServiceHandler) CreateCustomerCase(context.Context, *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.CreateCustomerCase is not implemented"))
}

func (UnimplementedPortalServiceHandler) PasswordlessStart(context.Context, *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.PasswordlessStart is not implemented"))
}

func (UnimplementedPortalServiceHandler) PasswordlessVerify(context.Context, *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.PasswordlessVerify is not implemented"))
}
