// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: doota/portal/v1/portal.proto

package pbportalconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v11 "github.com/shank318/doota/pb/doota/core/v1"
	v1 "github.com/shank318/doota/pb/doota/portal/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PortalServiceName is the fully-qualified name of the PortalService service.
	PortalServiceName = "doota.portal.v1.PortalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PortalServiceGetConfigProcedure is the fully-qualified name of the PortalService's GetConfig RPC.
	PortalServiceGetConfigProcedure = "/doota.portal.v1.PortalService/GetConfig"
	// PortalServiceSelfProcedure is the fully-qualified name of the PortalService's Self RPC.
	PortalServiceSelfProcedure = "/doota.portal.v1.PortalService/Self"
	// PortalServiceGetIntegrationProcedure is the fully-qualified name of the PortalService's
	// GetIntegration RPC.
	PortalServiceGetIntegrationProcedure = "/doota.portal.v1.PortalService/GetIntegration"
	// PortalServiceRevokeIntegrationProcedure is the fully-qualified name of the PortalService's
	// RevokeIntegration RPC.
	PortalServiceRevokeIntegrationProcedure = "/doota.portal.v1.PortalService/RevokeIntegration"
	// PortalServiceBatchProcedure is the fully-qualified name of the PortalService's Batch RPC.
	PortalServiceBatchProcedure = "/doota.portal.v1.PortalService/Batch"
	// PortalServiceCreateCustomerCaseProcedure is the fully-qualified name of the PortalService's
	// CreateCustomerCase RPC.
	PortalServiceCreateCustomerCaseProcedure = "/doota.portal.v1.PortalService/CreateCustomerCase"
	// PortalServicePasswordlessStartProcedure is the fully-qualified name of the PortalService's
	// PasswordlessStart RPC.
	PortalServicePasswordlessStartProcedure = "/doota.portal.v1.PortalService/PasswordlessStart"
	// PortalServicePasswordlessVerifyProcedure is the fully-qualified name of the PortalService's
	// PasswordlessVerify RPC.
	PortalServicePasswordlessVerifyProcedure = "/doota.portal.v1.PortalService/PasswordlessVerify"
	// PortalServiceOauthAuthorizeProcedure is the fully-qualified name of the PortalService's
	// OauthAuthorize RPC.
	PortalServiceOauthAuthorizeProcedure = "/doota.portal.v1.PortalService/OauthAuthorize"
	// PortalServiceOauthCallbackProcedure is the fully-qualified name of the PortalService's
	// OauthCallback RPC.
	PortalServiceOauthCallbackProcedure = "/doota.portal.v1.PortalService/OauthCallback"
	// PortalServiceSocialLoginCallbackProcedure is the fully-qualified name of the PortalService's
	// SocialLoginCallback RPC.
	PortalServiceSocialLoginCallbackProcedure = "/doota.portal.v1.PortalService/SocialLoginCallback"
	// PortalServiceGetIntegrationsProcedure is the fully-qualified name of the PortalService's
	// GetIntegrations RPC.
	PortalServiceGetIntegrationsProcedure = "/doota.portal.v1.PortalService/GetIntegrations"
	// PortalServiceCreateKeywordsProcedure is the fully-qualified name of the PortalService's
	// CreateKeywords RPC.
	PortalServiceCreateKeywordsProcedure = "/doota.portal.v1.PortalService/CreateKeywords"
	// PortalServiceAddSourceProcedure is the fully-qualified name of the PortalService's AddSource RPC.
	PortalServiceAddSourceProcedure = "/doota.portal.v1.PortalService/AddSource"
	// PortalServiceGetSourcesProcedure is the fully-qualified name of the PortalService's GetSources
	// RPC.
	PortalServiceGetSourcesProcedure = "/doota.portal.v1.PortalService/GetSources"
	// PortalServiceRemoveSourceProcedure is the fully-qualified name of the PortalService's
	// RemoveSource RPC.
	PortalServiceRemoveSourceProcedure = "/doota.portal.v1.PortalService/RemoveSource"
	// PortalServiceGetRelevantLeadsProcedure is the fully-qualified name of the PortalService's
	// GetRelevantLeads RPC.
	PortalServiceGetRelevantLeadsProcedure = "/doota.portal.v1.PortalService/GetRelevantLeads"
	// PortalServiceGetLeadsByStatusProcedure is the fully-qualified name of the PortalService's
	// GetLeadsByStatus RPC.
	PortalServiceGetLeadsByStatusProcedure = "/doota.portal.v1.PortalService/GetLeadsByStatus"
	// PortalServiceUpdateLeadStatusProcedure is the fully-qualified name of the PortalService's
	// UpdateLeadStatus RPC.
	PortalServiceUpdateLeadStatusProcedure = "/doota.portal.v1.PortalService/UpdateLeadStatus"
	// PortalServiceCreateOrEditProjectProcedure is the fully-qualified name of the PortalService's
	// CreateOrEditProject RPC.
	PortalServiceCreateOrEditProjectProcedure = "/doota.portal.v1.PortalService/CreateOrEditProject"
	// PortalServiceSuggestKeywordsAndSourcesProcedure is the fully-qualified name of the
	// PortalService's SuggestKeywordsAndSources RPC.
	PortalServiceSuggestKeywordsAndSourcesProcedure = "/doota.portal.v1.PortalService/SuggestKeywordsAndSources"
	// PortalServiceUpdateAutomationSettingsProcedure is the fully-qualified name of the PortalService's
	// UpdateAutomationSettings RPC.
	PortalServiceUpdateAutomationSettingsProcedure = "/doota.portal.v1.PortalService/UpdateAutomationSettings"
	// PortalServiceConnectRedditProcedure is the fully-qualified name of the PortalService's
	// ConnectReddit RPC.
	PortalServiceConnectRedditProcedure = "/doota.portal.v1.PortalService/ConnectReddit"
	// PortalServiceGetLeadInteractionsProcedure is the fully-qualified name of the PortalService's
	// GetLeadInteractions RPC.
	PortalServiceGetLeadInteractionsProcedure = "/doota.portal.v1.PortalService/GetLeadInteractions"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	portalServiceServiceDescriptor                         = v1.File_doota_portal_v1_portal_proto.Services().ByName("PortalService")
	portalServiceGetConfigMethodDescriptor                 = portalServiceServiceDescriptor.Methods().ByName("GetConfig")
	portalServiceSelfMethodDescriptor                      = portalServiceServiceDescriptor.Methods().ByName("Self")
	portalServiceGetIntegrationMethodDescriptor            = portalServiceServiceDescriptor.Methods().ByName("GetIntegration")
	portalServiceRevokeIntegrationMethodDescriptor         = portalServiceServiceDescriptor.Methods().ByName("RevokeIntegration")
	portalServiceBatchMethodDescriptor                     = portalServiceServiceDescriptor.Methods().ByName("Batch")
	portalServiceCreateCustomerCaseMethodDescriptor        = portalServiceServiceDescriptor.Methods().ByName("CreateCustomerCase")
	portalServicePasswordlessStartMethodDescriptor         = portalServiceServiceDescriptor.Methods().ByName("PasswordlessStart")
	portalServicePasswordlessVerifyMethodDescriptor        = portalServiceServiceDescriptor.Methods().ByName("PasswordlessVerify")
	portalServiceOauthAuthorizeMethodDescriptor            = portalServiceServiceDescriptor.Methods().ByName("OauthAuthorize")
	portalServiceOauthCallbackMethodDescriptor             = portalServiceServiceDescriptor.Methods().ByName("OauthCallback")
	portalServiceSocialLoginCallbackMethodDescriptor       = portalServiceServiceDescriptor.Methods().ByName("SocialLoginCallback")
	portalServiceGetIntegrationsMethodDescriptor           = portalServiceServiceDescriptor.Methods().ByName("GetIntegrations")
	portalServiceCreateKeywordsMethodDescriptor            = portalServiceServiceDescriptor.Methods().ByName("CreateKeywords")
	portalServiceAddSourceMethodDescriptor                 = portalServiceServiceDescriptor.Methods().ByName("AddSource")
	portalServiceGetSourcesMethodDescriptor                = portalServiceServiceDescriptor.Methods().ByName("GetSources")
	portalServiceRemoveSourceMethodDescriptor              = portalServiceServiceDescriptor.Methods().ByName("RemoveSource")
	portalServiceGetRelevantLeadsMethodDescriptor          = portalServiceServiceDescriptor.Methods().ByName("GetRelevantLeads")
	portalServiceGetLeadsByStatusMethodDescriptor          = portalServiceServiceDescriptor.Methods().ByName("GetLeadsByStatus")
	portalServiceUpdateLeadStatusMethodDescriptor          = portalServiceServiceDescriptor.Methods().ByName("UpdateLeadStatus")
	portalServiceCreateOrEditProjectMethodDescriptor       = portalServiceServiceDescriptor.Methods().ByName("CreateOrEditProject")
	portalServiceSuggestKeywordsAndSourcesMethodDescriptor = portalServiceServiceDescriptor.Methods().ByName("SuggestKeywordsAndSources")
	portalServiceUpdateAutomationSettingsMethodDescriptor  = portalServiceServiceDescriptor.Methods().ByName("UpdateAutomationSettings")
	portalServiceConnectRedditMethodDescriptor             = portalServiceServiceDescriptor.Methods().ByName("ConnectReddit")
	portalServiceGetLeadInteractionsMethodDescriptor       = portalServiceServiceDescriptor.Methods().ByName("GetLeadInteractions")
)

// PortalServiceClient is a client for the doota.portal.v1.PortalService service.
type PortalServiceClient interface {
	GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Config], error)
	Self(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error)
	RevokeIntegration(context.Context, *connect.Request[v1.RevokeIntegrationRequest]) (*connect.Response[emptypb.Empty], error)
	Batch(context.Context, *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error)
	CreateCustomerCase(context.Context, *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error)
	PasswordlessStart(context.Context, *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error)
	PasswordlessVerify(context.Context, *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error)
	OauthAuthorize(context.Context, *connect.Request[v1.OauthAuthorizeRequest]) (*connect.Response[v1.OauthAuthorizeResponse], error)
	OauthCallback(context.Context, *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.OauthCallbackResponse], error)
	SocialLoginCallback(context.Context, *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.JWT], error)
	GetIntegrations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Integrations], error)
	// Reddit
	CreateKeywords(context.Context, *connect.Request[v1.CreateKeywordReq]) (*connect.Response[v1.CreateKeywordsRes], error)
	AddSource(context.Context, *connect.Request[v1.AddSourceRequest]) (*connect.Response[v11.Source], error)
	GetSources(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSourceResponse], error)
	RemoveSource(context.Context, *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[emptypb.Empty], error)
	GetRelevantLeads(context.Context, *connect.Request[v1.GetRelevantLeadsRequest]) (*connect.Response[v1.GetLeadsResponse], error)
	GetLeadsByStatus(context.Context, *connect.Request[v1.GetLeadsByStatusRequest]) (*connect.Response[v1.GetLeadsResponse], error)
	UpdateLeadStatus(context.Context, *connect.Request[v1.UpdateLeadStatusRequest]) (*connect.Response[emptypb.Empty], error)
	CreateOrEditProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v11.Project], error)
	SuggestKeywordsAndSources(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.Project], error)
	UpdateAutomationSettings(context.Context, *connect.Request[v1.UpdateAutomationSettingRequest]) (*connect.Response[v1.Organization], error)
	ConnectReddit(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[v1.ConnectRedditResponse], error)
	GetLeadInteractions(context.Context, *connect.Request[v1.GetLeadInteractionsRequest]) (*connect.Response[v1.GetLeadInteractionsResponse], error)
}

// NewPortalServiceClient constructs a client for the doota.portal.v1.PortalService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPortalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PortalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &portalServiceClient{
		getConfig: connect.NewClient[emptypb.Empty, v1.Config](
			httpClient,
			baseURL+PortalServiceGetConfigProcedure,
			connect.WithSchema(portalServiceGetConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		self: connect.NewClient[emptypb.Empty, v1.User](
			httpClient,
			baseURL+PortalServiceSelfProcedure,
			connect.WithSchema(portalServiceSelfMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntegration: connect.NewClient[v1.GetIntegrationRequest, v1.Integration](
			httpClient,
			baseURL+PortalServiceGetIntegrationProcedure,
			connect.WithSchema(portalServiceGetIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		revokeIntegration: connect.NewClient[v1.RevokeIntegrationRequest, emptypb.Empty](
			httpClient,
			baseURL+PortalServiceRevokeIntegrationProcedure,
			connect.WithSchema(portalServiceRevokeIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		batch: connect.NewClient[v1.BatchReq, v1.BatchResp](
			httpClient,
			baseURL+PortalServiceBatchProcedure,
			connect.WithSchema(portalServiceBatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCustomerCase: connect.NewClient[v1.CreateCustomerCaseReq, emptypb.Empty](
			httpClient,
			baseURL+PortalServiceCreateCustomerCaseProcedure,
			connect.WithSchema(portalServiceCreateCustomerCaseMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		passwordlessStart: connect.NewClient[v1.PasswordlessStartRequest, emptypb.Empty](
			httpClient,
			baseURL+PortalServicePasswordlessStartProcedure,
			connect.WithSchema(portalServicePasswordlessStartMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		passwordlessVerify: connect.NewClient[v1.PasswordlessStartVerify, v1.JWT](
			httpClient,
			baseURL+PortalServicePasswordlessVerifyProcedure,
			connect.WithSchema(portalServicePasswordlessVerifyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		oauthAuthorize: connect.NewClient[v1.OauthAuthorizeRequest, v1.OauthAuthorizeResponse](
			httpClient,
			baseURL+PortalServiceOauthAuthorizeProcedure,
			connect.WithSchema(portalServiceOauthAuthorizeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		oauthCallback: connect.NewClient[v1.OauthCallbackRequest, v1.OauthCallbackResponse](
			httpClient,
			baseURL+PortalServiceOauthCallbackProcedure,
			connect.WithSchema(portalServiceOauthCallbackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		socialLoginCallback: connect.NewClient[v1.OauthCallbackRequest, v1.JWT](
			httpClient,
			baseURL+PortalServiceSocialLoginCallbackProcedure,
			connect.WithSchema(portalServiceSocialLoginCallbackMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntegrations: connect.NewClient[emptypb.Empty, v1.Integrations](
			httpClient,
			baseURL+PortalServiceGetIntegrationsProcedure,
			connect.WithSchema(portalServiceGetIntegrationsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createKeywords: connect.NewClient[v1.CreateKeywordReq, v1.CreateKeywordsRes](
			httpClient,
			baseURL+PortalServiceCreateKeywordsProcedure,
			connect.WithSchema(portalServiceCreateKeywordsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		addSource: connect.NewClient[v1.AddSourceRequest, v11.Source](
			httpClient,
			baseURL+PortalServiceAddSourceProcedure,
			connect.WithSchema(portalServiceAddSourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getSources: connect.NewClient[emptypb.Empty, v1.GetSourceResponse](
			httpClient,
			baseURL+PortalServiceGetSourcesProcedure,
			connect.WithSchema(portalServiceGetSourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeSource: connect.NewClient[v1.RemoveSourceRequest, emptypb.Empty](
			httpClient,
			baseURL+PortalServiceRemoveSourceProcedure,
			connect.WithSchema(portalServiceRemoveSourceMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getRelevantLeads: connect.NewClient[v1.GetRelevantLeadsRequest, v1.GetLeadsResponse](
			httpClient,
			baseURL+PortalServiceGetRelevantLeadsProcedure,
			connect.WithSchema(portalServiceGetRelevantLeadsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLeadsByStatus: connect.NewClient[v1.GetLeadsByStatusRequest, v1.GetLeadsResponse](
			httpClient,
			baseURL+PortalServiceGetLeadsByStatusProcedure,
			connect.WithSchema(portalServiceGetLeadsByStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateLeadStatus: connect.NewClient[v1.UpdateLeadStatusRequest, emptypb.Empty](
			httpClient,
			baseURL+PortalServiceUpdateLeadStatusProcedure,
			connect.WithSchema(portalServiceUpdateLeadStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createOrEditProject: connect.NewClient[v1.CreateProjectRequest, v11.Project](
			httpClient,
			baseURL+PortalServiceCreateOrEditProjectProcedure,
			connect.WithSchema(portalServiceCreateOrEditProjectMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		suggestKeywordsAndSources: connect.NewClient[emptypb.Empty, v11.Project](
			httpClient,
			baseURL+PortalServiceSuggestKeywordsAndSourcesProcedure,
			connect.WithSchema(portalServiceSuggestKeywordsAndSourcesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAutomationSettings: connect.NewClient[v1.UpdateAutomationSettingRequest, v1.Organization](
			httpClient,
			baseURL+PortalServiceUpdateAutomationSettingsProcedure,
			connect.WithSchema(portalServiceUpdateAutomationSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		connectReddit: connect.NewClient[emptypb.Empty, v1.ConnectRedditResponse](
			httpClient,
			baseURL+PortalServiceConnectRedditProcedure,
			connect.WithSchema(portalServiceConnectRedditMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getLeadInteractions: connect.NewClient[v1.GetLeadInteractionsRequest, v1.GetLeadInteractionsResponse](
			httpClient,
			baseURL+PortalServiceGetLeadInteractionsProcedure,
			connect.WithSchema(portalServiceGetLeadInteractionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// portalServiceClient implements PortalServiceClient.
type portalServiceClient struct {
	getConfig                 *connect.Client[emptypb.Empty, v1.Config]
	self                      *connect.Client[emptypb.Empty, v1.User]
	getIntegration            *connect.Client[v1.GetIntegrationRequest, v1.Integration]
	revokeIntegration         *connect.Client[v1.RevokeIntegrationRequest, emptypb.Empty]
	batch                     *connect.Client[v1.BatchReq, v1.BatchResp]
	createCustomerCase        *connect.Client[v1.CreateCustomerCaseReq, emptypb.Empty]
	passwordlessStart         *connect.Client[v1.PasswordlessStartRequest, emptypb.Empty]
	passwordlessVerify        *connect.Client[v1.PasswordlessStartVerify, v1.JWT]
	oauthAuthorize            *connect.Client[v1.OauthAuthorizeRequest, v1.OauthAuthorizeResponse]
	oauthCallback             *connect.Client[v1.OauthCallbackRequest, v1.OauthCallbackResponse]
	socialLoginCallback       *connect.Client[v1.OauthCallbackRequest, v1.JWT]
	getIntegrations           *connect.Client[emptypb.Empty, v1.Integrations]
	createKeywords            *connect.Client[v1.CreateKeywordReq, v1.CreateKeywordsRes]
	addSource                 *connect.Client[v1.AddSourceRequest, v11.Source]
	getSources                *connect.Client[emptypb.Empty, v1.GetSourceResponse]
	removeSource              *connect.Client[v1.RemoveSourceRequest, emptypb.Empty]
	getRelevantLeads          *connect.Client[v1.GetRelevantLeadsRequest, v1.GetLeadsResponse]
	getLeadsByStatus          *connect.Client[v1.GetLeadsByStatusRequest, v1.GetLeadsResponse]
	updateLeadStatus          *connect.Client[v1.UpdateLeadStatusRequest, emptypb.Empty]
	createOrEditProject       *connect.Client[v1.CreateProjectRequest, v11.Project]
	suggestKeywordsAndSources *connect.Client[emptypb.Empty, v11.Project]
	updateAutomationSettings  *connect.Client[v1.UpdateAutomationSettingRequest, v1.Organization]
	connectReddit             *connect.Client[emptypb.Empty, v1.ConnectRedditResponse]
	getLeadInteractions       *connect.Client[v1.GetLeadInteractionsRequest, v1.GetLeadInteractionsResponse]
}

// GetConfig calls doota.portal.v1.PortalService.GetConfig.
func (c *portalServiceClient) GetConfig(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Config], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// Self calls doota.portal.v1.PortalService.Self.
func (c *portalServiceClient) Self(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error) {
	return c.self.CallUnary(ctx, req)
}

// GetIntegration calls doota.portal.v1.PortalService.GetIntegration.
func (c *portalServiceClient) GetIntegration(ctx context.Context, req *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error) {
	return c.getIntegration.CallUnary(ctx, req)
}

// RevokeIntegration calls doota.portal.v1.PortalService.RevokeIntegration.
func (c *portalServiceClient) RevokeIntegration(ctx context.Context, req *connect.Request[v1.RevokeIntegrationRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeIntegration.CallUnary(ctx, req)
}

// Batch calls doota.portal.v1.PortalService.Batch.
func (c *portalServiceClient) Batch(ctx context.Context, req *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error) {
	return c.batch.CallUnary(ctx, req)
}

// CreateCustomerCase calls doota.portal.v1.PortalService.CreateCustomerCase.
func (c *portalServiceClient) CreateCustomerCase(ctx context.Context, req *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error) {
	return c.createCustomerCase.CallUnary(ctx, req)
}

// PasswordlessStart calls doota.portal.v1.PortalService.PasswordlessStart.
func (c *portalServiceClient) PasswordlessStart(ctx context.Context, req *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.passwordlessStart.CallUnary(ctx, req)
}

// PasswordlessVerify calls doota.portal.v1.PortalService.PasswordlessVerify.
func (c *portalServiceClient) PasswordlessVerify(ctx context.Context, req *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error) {
	return c.passwordlessVerify.CallUnary(ctx, req)
}

// OauthAuthorize calls doota.portal.v1.PortalService.OauthAuthorize.
func (c *portalServiceClient) OauthAuthorize(ctx context.Context, req *connect.Request[v1.OauthAuthorizeRequest]) (*connect.Response[v1.OauthAuthorizeResponse], error) {
	return c.oauthAuthorize.CallUnary(ctx, req)
}

// OauthCallback calls doota.portal.v1.PortalService.OauthCallback.
func (c *portalServiceClient) OauthCallback(ctx context.Context, req *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.OauthCallbackResponse], error) {
	return c.oauthCallback.CallUnary(ctx, req)
}

// SocialLoginCallback calls doota.portal.v1.PortalService.SocialLoginCallback.
func (c *portalServiceClient) SocialLoginCallback(ctx context.Context, req *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.JWT], error) {
	return c.socialLoginCallback.CallUnary(ctx, req)
}

// GetIntegrations calls doota.portal.v1.PortalService.GetIntegrations.
func (c *portalServiceClient) GetIntegrations(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.Integrations], error) {
	return c.getIntegrations.CallUnary(ctx, req)
}

// CreateKeywords calls doota.portal.v1.PortalService.CreateKeywords.
func (c *portalServiceClient) CreateKeywords(ctx context.Context, req *connect.Request[v1.CreateKeywordReq]) (*connect.Response[v1.CreateKeywordsRes], error) {
	return c.createKeywords.CallUnary(ctx, req)
}

// AddSource calls doota.portal.v1.PortalService.AddSource.
func (c *portalServiceClient) AddSource(ctx context.Context, req *connect.Request[v1.AddSourceRequest]) (*connect.Response[v11.Source], error) {
	return c.addSource.CallUnary(ctx, req)
}

// GetSources calls doota.portal.v1.PortalService.GetSources.
func (c *portalServiceClient) GetSources(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSourceResponse], error) {
	return c.getSources.CallUnary(ctx, req)
}

// RemoveSource calls doota.portal.v1.PortalService.RemoveSource.
func (c *portalServiceClient) RemoveSource(ctx context.Context, req *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.removeSource.CallUnary(ctx, req)
}

// GetRelevantLeads calls doota.portal.v1.PortalService.GetRelevantLeads.
func (c *portalServiceClient) GetRelevantLeads(ctx context.Context, req *connect.Request[v1.GetRelevantLeadsRequest]) (*connect.Response[v1.GetLeadsResponse], error) {
	return c.getRelevantLeads.CallUnary(ctx, req)
}

// GetLeadsByStatus calls doota.portal.v1.PortalService.GetLeadsByStatus.
func (c *portalServiceClient) GetLeadsByStatus(ctx context.Context, req *connect.Request[v1.GetLeadsByStatusRequest]) (*connect.Response[v1.GetLeadsResponse], error) {
	return c.getLeadsByStatus.CallUnary(ctx, req)
}

// UpdateLeadStatus calls doota.portal.v1.PortalService.UpdateLeadStatus.
func (c *portalServiceClient) UpdateLeadStatus(ctx context.Context, req *connect.Request[v1.UpdateLeadStatusRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.updateLeadStatus.CallUnary(ctx, req)
}

// CreateOrEditProject calls doota.portal.v1.PortalService.CreateOrEditProject.
func (c *portalServiceClient) CreateOrEditProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v11.Project], error) {
	return c.createOrEditProject.CallUnary(ctx, req)
}

// SuggestKeywordsAndSources calls doota.portal.v1.PortalService.SuggestKeywordsAndSources.
func (c *portalServiceClient) SuggestKeywordsAndSources(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v11.Project], error) {
	return c.suggestKeywordsAndSources.CallUnary(ctx, req)
}

// UpdateAutomationSettings calls doota.portal.v1.PortalService.UpdateAutomationSettings.
func (c *portalServiceClient) UpdateAutomationSettings(ctx context.Context, req *connect.Request[v1.UpdateAutomationSettingRequest]) (*connect.Response[v1.Organization], error) {
	return c.updateAutomationSettings.CallUnary(ctx, req)
}

// ConnectReddit calls doota.portal.v1.PortalService.ConnectReddit.
func (c *portalServiceClient) ConnectReddit(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[v1.ConnectRedditResponse], error) {
	return c.connectReddit.CallServerStream(ctx, req)
}

// GetLeadInteractions calls doota.portal.v1.PortalService.GetLeadInteractions.
func (c *portalServiceClient) GetLeadInteractions(ctx context.Context, req *connect.Request[v1.GetLeadInteractionsRequest]) (*connect.Response[v1.GetLeadInteractionsResponse], error) {
	return c.getLeadInteractions.CallUnary(ctx, req)
}

// PortalServiceHandler is an implementation of the doota.portal.v1.PortalService service.
type PortalServiceHandler interface {
	GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Config], error)
	Self(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error)
	// rpc AddUser(AddUserRequest) returns (User);
	// rpc RenewUser(RenewUserRequest) returns (.google.protobuf.Empty);
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error)
	RevokeIntegration(context.Context, *connect.Request[v1.RevokeIntegrationRequest]) (*connect.Response[emptypb.Empty], error)
	Batch(context.Context, *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error)
	CreateCustomerCase(context.Context, *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error)
	PasswordlessStart(context.Context, *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error)
	PasswordlessVerify(context.Context, *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error)
	OauthAuthorize(context.Context, *connect.Request[v1.OauthAuthorizeRequest]) (*connect.Response[v1.OauthAuthorizeResponse], error)
	OauthCallback(context.Context, *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.OauthCallbackResponse], error)
	SocialLoginCallback(context.Context, *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.JWT], error)
	GetIntegrations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Integrations], error)
	// Reddit
	CreateKeywords(context.Context, *connect.Request[v1.CreateKeywordReq]) (*connect.Response[v1.CreateKeywordsRes], error)
	AddSource(context.Context, *connect.Request[v1.AddSourceRequest]) (*connect.Response[v11.Source], error)
	GetSources(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSourceResponse], error)
	RemoveSource(context.Context, *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[emptypb.Empty], error)
	GetRelevantLeads(context.Context, *connect.Request[v1.GetRelevantLeadsRequest]) (*connect.Response[v1.GetLeadsResponse], error)
	GetLeadsByStatus(context.Context, *connect.Request[v1.GetLeadsByStatusRequest]) (*connect.Response[v1.GetLeadsResponse], error)
	UpdateLeadStatus(context.Context, *connect.Request[v1.UpdateLeadStatusRequest]) (*connect.Response[emptypb.Empty], error)
	CreateOrEditProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v11.Project], error)
	SuggestKeywordsAndSources(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.Project], error)
	UpdateAutomationSettings(context.Context, *connect.Request[v1.UpdateAutomationSettingRequest]) (*connect.Response[v1.Organization], error)
	ConnectReddit(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[v1.ConnectRedditResponse]) error
	GetLeadInteractions(context.Context, *connect.Request[v1.GetLeadInteractionsRequest]) (*connect.Response[v1.GetLeadInteractionsResponse], error)
}

// NewPortalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPortalServiceHandler(svc PortalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	portalServiceGetConfigHandler := connect.NewUnaryHandler(
		PortalServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(portalServiceGetConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceSelfHandler := connect.NewUnaryHandler(
		PortalServiceSelfProcedure,
		svc.Self,
		connect.WithSchema(portalServiceSelfMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetIntegrationHandler := connect.NewUnaryHandler(
		PortalServiceGetIntegrationProcedure,
		svc.GetIntegration,
		connect.WithSchema(portalServiceGetIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceRevokeIntegrationHandler := connect.NewUnaryHandler(
		PortalServiceRevokeIntegrationProcedure,
		svc.RevokeIntegration,
		connect.WithSchema(portalServiceRevokeIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceBatchHandler := connect.NewUnaryHandler(
		PortalServiceBatchProcedure,
		svc.Batch,
		connect.WithSchema(portalServiceBatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceCreateCustomerCaseHandler := connect.NewUnaryHandler(
		PortalServiceCreateCustomerCaseProcedure,
		svc.CreateCustomerCase,
		connect.WithSchema(portalServiceCreateCustomerCaseMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServicePasswordlessStartHandler := connect.NewUnaryHandler(
		PortalServicePasswordlessStartProcedure,
		svc.PasswordlessStart,
		connect.WithSchema(portalServicePasswordlessStartMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServicePasswordlessVerifyHandler := connect.NewUnaryHandler(
		PortalServicePasswordlessVerifyProcedure,
		svc.PasswordlessVerify,
		connect.WithSchema(portalServicePasswordlessVerifyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceOauthAuthorizeHandler := connect.NewUnaryHandler(
		PortalServiceOauthAuthorizeProcedure,
		svc.OauthAuthorize,
		connect.WithSchema(portalServiceOauthAuthorizeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceOauthCallbackHandler := connect.NewUnaryHandler(
		PortalServiceOauthCallbackProcedure,
		svc.OauthCallback,
		connect.WithSchema(portalServiceOauthCallbackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceSocialLoginCallbackHandler := connect.NewUnaryHandler(
		PortalServiceSocialLoginCallbackProcedure,
		svc.SocialLoginCallback,
		connect.WithSchema(portalServiceSocialLoginCallbackMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetIntegrationsHandler := connect.NewUnaryHandler(
		PortalServiceGetIntegrationsProcedure,
		svc.GetIntegrations,
		connect.WithSchema(portalServiceGetIntegrationsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceCreateKeywordsHandler := connect.NewUnaryHandler(
		PortalServiceCreateKeywordsProcedure,
		svc.CreateKeywords,
		connect.WithSchema(portalServiceCreateKeywordsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceAddSourceHandler := connect.NewUnaryHandler(
		PortalServiceAddSourceProcedure,
		svc.AddSource,
		connect.WithSchema(portalServiceAddSourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetSourcesHandler := connect.NewUnaryHandler(
		PortalServiceGetSourcesProcedure,
		svc.GetSources,
		connect.WithSchema(portalServiceGetSourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceRemoveSourceHandler := connect.NewUnaryHandler(
		PortalServiceRemoveSourceProcedure,
		svc.RemoveSource,
		connect.WithSchema(portalServiceRemoveSourceMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetRelevantLeadsHandler := connect.NewUnaryHandler(
		PortalServiceGetRelevantLeadsProcedure,
		svc.GetRelevantLeads,
		connect.WithSchema(portalServiceGetRelevantLeadsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetLeadsByStatusHandler := connect.NewUnaryHandler(
		PortalServiceGetLeadsByStatusProcedure,
		svc.GetLeadsByStatus,
		connect.WithSchema(portalServiceGetLeadsByStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceUpdateLeadStatusHandler := connect.NewUnaryHandler(
		PortalServiceUpdateLeadStatusProcedure,
		svc.UpdateLeadStatus,
		connect.WithSchema(portalServiceUpdateLeadStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceCreateOrEditProjectHandler := connect.NewUnaryHandler(
		PortalServiceCreateOrEditProjectProcedure,
		svc.CreateOrEditProject,
		connect.WithSchema(portalServiceCreateOrEditProjectMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceSuggestKeywordsAndSourcesHandler := connect.NewUnaryHandler(
		PortalServiceSuggestKeywordsAndSourcesProcedure,
		svc.SuggestKeywordsAndSources,
		connect.WithSchema(portalServiceSuggestKeywordsAndSourcesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceUpdateAutomationSettingsHandler := connect.NewUnaryHandler(
		PortalServiceUpdateAutomationSettingsProcedure,
		svc.UpdateAutomationSettings,
		connect.WithSchema(portalServiceUpdateAutomationSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceConnectRedditHandler := connect.NewServerStreamHandler(
		PortalServiceConnectRedditProcedure,
		svc.ConnectReddit,
		connect.WithSchema(portalServiceConnectRedditMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	portalServiceGetLeadInteractionsHandler := connect.NewUnaryHandler(
		PortalServiceGetLeadInteractionsProcedure,
		svc.GetLeadInteractions,
		connect.WithSchema(portalServiceGetLeadInteractionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/doota.portal.v1.PortalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PortalServiceGetConfigProcedure:
			portalServiceGetConfigHandler.ServeHTTP(w, r)
		case PortalServiceSelfProcedure:
			portalServiceSelfHandler.ServeHTTP(w, r)
		case PortalServiceGetIntegrationProcedure:
			portalServiceGetIntegrationHandler.ServeHTTP(w, r)
		case PortalServiceRevokeIntegrationProcedure:
			portalServiceRevokeIntegrationHandler.ServeHTTP(w, r)
		case PortalServiceBatchProcedure:
			portalServiceBatchHandler.ServeHTTP(w, r)
		case PortalServiceCreateCustomerCaseProcedure:
			portalServiceCreateCustomerCaseHandler.ServeHTTP(w, r)
		case PortalServicePasswordlessStartProcedure:
			portalServicePasswordlessStartHandler.ServeHTTP(w, r)
		case PortalServicePasswordlessVerifyProcedure:
			portalServicePasswordlessVerifyHandler.ServeHTTP(w, r)
		case PortalServiceOauthAuthorizeProcedure:
			portalServiceOauthAuthorizeHandler.ServeHTTP(w, r)
		case PortalServiceOauthCallbackProcedure:
			portalServiceOauthCallbackHandler.ServeHTTP(w, r)
		case PortalServiceSocialLoginCallbackProcedure:
			portalServiceSocialLoginCallbackHandler.ServeHTTP(w, r)
		case PortalServiceGetIntegrationsProcedure:
			portalServiceGetIntegrationsHandler.ServeHTTP(w, r)
		case PortalServiceCreateKeywordsProcedure:
			portalServiceCreateKeywordsHandler.ServeHTTP(w, r)
		case PortalServiceAddSourceProcedure:
			portalServiceAddSourceHandler.ServeHTTP(w, r)
		case PortalServiceGetSourcesProcedure:
			portalServiceGetSourcesHandler.ServeHTTP(w, r)
		case PortalServiceRemoveSourceProcedure:
			portalServiceRemoveSourceHandler.ServeHTTP(w, r)
		case PortalServiceGetRelevantLeadsProcedure:
			portalServiceGetRelevantLeadsHandler.ServeHTTP(w, r)
		case PortalServiceGetLeadsByStatusProcedure:
			portalServiceGetLeadsByStatusHandler.ServeHTTP(w, r)
		case PortalServiceUpdateLeadStatusProcedure:
			portalServiceUpdateLeadStatusHandler.ServeHTTP(w, r)
		case PortalServiceCreateOrEditProjectProcedure:
			portalServiceCreateOrEditProjectHandler.ServeHTTP(w, r)
		case PortalServiceSuggestKeywordsAndSourcesProcedure:
			portalServiceSuggestKeywordsAndSourcesHandler.ServeHTTP(w, r)
		case PortalServiceUpdateAutomationSettingsProcedure:
			portalServiceUpdateAutomationSettingsHandler.ServeHTTP(w, r)
		case PortalServiceConnectRedditProcedure:
			portalServiceConnectRedditHandler.ServeHTTP(w, r)
		case PortalServiceGetLeadInteractionsProcedure:
			portalServiceGetLeadInteractionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPortalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPortalServiceHandler struct{}

func (UnimplementedPortalServiceHandler) GetConfig(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Config], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetConfig is not implemented"))
}

func (UnimplementedPortalServiceHandler) Self(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.Self is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.Integration], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetIntegration is not implemented"))
}

func (UnimplementedPortalServiceHandler) RevokeIntegration(context.Context, *connect.Request[v1.RevokeIntegrationRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.RevokeIntegration is not implemented"))
}

func (UnimplementedPortalServiceHandler) Batch(context.Context, *connect.Request[v1.BatchReq]) (*connect.Response[v1.BatchResp], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.Batch is not implemented"))
}

func (UnimplementedPortalServiceHandler) CreateCustomerCase(context.Context, *connect.Request[v1.CreateCustomerCaseReq]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.CreateCustomerCase is not implemented"))
}

func (UnimplementedPortalServiceHandler) PasswordlessStart(context.Context, *connect.Request[v1.PasswordlessStartRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.PasswordlessStart is not implemented"))
}

func (UnimplementedPortalServiceHandler) PasswordlessVerify(context.Context, *connect.Request[v1.PasswordlessStartVerify]) (*connect.Response[v1.JWT], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.PasswordlessVerify is not implemented"))
}

func (UnimplementedPortalServiceHandler) OauthAuthorize(context.Context, *connect.Request[v1.OauthAuthorizeRequest]) (*connect.Response[v1.OauthAuthorizeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.OauthAuthorize is not implemented"))
}

func (UnimplementedPortalServiceHandler) OauthCallback(context.Context, *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.OauthCallbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.OauthCallback is not implemented"))
}

func (UnimplementedPortalServiceHandler) SocialLoginCallback(context.Context, *connect.Request[v1.OauthCallbackRequest]) (*connect.Response[v1.JWT], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.SocialLoginCallback is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetIntegrations(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.Integrations], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetIntegrations is not implemented"))
}

func (UnimplementedPortalServiceHandler) CreateKeywords(context.Context, *connect.Request[v1.CreateKeywordReq]) (*connect.Response[v1.CreateKeywordsRes], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.CreateKeywords is not implemented"))
}

func (UnimplementedPortalServiceHandler) AddSource(context.Context, *connect.Request[v1.AddSourceRequest]) (*connect.Response[v11.Source], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.AddSource is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetSources(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.GetSourceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetSources is not implemented"))
}

func (UnimplementedPortalServiceHandler) RemoveSource(context.Context, *connect.Request[v1.RemoveSourceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.RemoveSource is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetRelevantLeads(context.Context, *connect.Request[v1.GetRelevantLeadsRequest]) (*connect.Response[v1.GetLeadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetRelevantLeads is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetLeadsByStatus(context.Context, *connect.Request[v1.GetLeadsByStatusRequest]) (*connect.Response[v1.GetLeadsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetLeadsByStatus is not implemented"))
}

func (UnimplementedPortalServiceHandler) UpdateLeadStatus(context.Context, *connect.Request[v1.UpdateLeadStatusRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.UpdateLeadStatus is not implemented"))
}

func (UnimplementedPortalServiceHandler) CreateOrEditProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v11.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.CreateOrEditProject is not implemented"))
}

func (UnimplementedPortalServiceHandler) SuggestKeywordsAndSources(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v11.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.SuggestKeywordsAndSources is not implemented"))
}

func (UnimplementedPortalServiceHandler) UpdateAutomationSettings(context.Context, *connect.Request[v1.UpdateAutomationSettingRequest]) (*connect.Response[v1.Organization], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.UpdateAutomationSettings is not implemented"))
}

func (UnimplementedPortalServiceHandler) ConnectReddit(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[v1.ConnectRedditResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.ConnectReddit is not implemented"))
}

func (UnimplementedPortalServiceHandler) GetLeadInteractions(context.Context, *connect.Request[v1.GetLeadInteractionsRequest]) (*connect.Response[v1.GetLeadInteractionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.portal.v1.PortalService.GetLeadInteractions is not implemented"))
}
