// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: doota/google/v1/google.proto

package pbgoogle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GoogleService_SetupMailboxWatch_FullMethodName   = "/doota.google.v1.GoogleService/SetupMailboxWatch"
	GoogleService_GetIntegration_FullMethodName      = "/doota.google.v1.GoogleService/GetIntegration"
	GoogleService_SetupWorkspaceAdmin_FullMethodName = "/doota.google.v1.GoogleService/SetupWorkspaceAdmin"
)

// GoogleServiceClient is the client API for GoogleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoogleServiceClient interface {
	// this should be called when the user consents when he logs in
	SetupMailboxWatch(ctx context.Context, in *SetupMailboxWatchRequest, opts ...grpc.CallOption) (*SetupMailboxWatchResponse, error)
	GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*IntegrationResponse, error)
	// this should be called when the admin initially connect to their google
	// workspace, it will return a refresh token
	SetupWorkspaceAdmin(ctx context.Context, in *SetupWorkspaceAdminRequest, opts ...grpc.CallOption) (*SetupWorkspaceAdminResponse, error)
}

type googleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoogleServiceClient(cc grpc.ClientConnInterface) GoogleServiceClient {
	return &googleServiceClient{cc}
}

func (c *googleServiceClient) SetupMailboxWatch(ctx context.Context, in *SetupMailboxWatchRequest, opts ...grpc.CallOption) (*SetupMailboxWatchResponse, error) {
	out := new(SetupMailboxWatchResponse)
	err := c.cc.Invoke(ctx, GoogleService_SetupMailboxWatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleServiceClient) GetIntegration(ctx context.Context, in *GetIntegrationRequest, opts ...grpc.CallOption) (*IntegrationResponse, error) {
	out := new(IntegrationResponse)
	err := c.cc.Invoke(ctx, GoogleService_GetIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *googleServiceClient) SetupWorkspaceAdmin(ctx context.Context, in *SetupWorkspaceAdminRequest, opts ...grpc.CallOption) (*SetupWorkspaceAdminResponse, error) {
	out := new(SetupWorkspaceAdminResponse)
	err := c.cc.Invoke(ctx, GoogleService_SetupWorkspaceAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoogleServiceServer is the server API for GoogleService service.
// All implementations must embed UnimplementedGoogleServiceServer
// for forward compatibility
type GoogleServiceServer interface {
	// this should be called when the user consents when he logs in
	SetupMailboxWatch(context.Context, *SetupMailboxWatchRequest) (*SetupMailboxWatchResponse, error)
	GetIntegration(context.Context, *GetIntegrationRequest) (*IntegrationResponse, error)
	// this should be called when the admin initially connect to their google
	// workspace, it will return a refresh token
	SetupWorkspaceAdmin(context.Context, *SetupWorkspaceAdminRequest) (*SetupWorkspaceAdminResponse, error)
	mustEmbedUnimplementedGoogleServiceServer()
}

// UnimplementedGoogleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGoogleServiceServer struct {
}

func (UnimplementedGoogleServiceServer) SetupMailboxWatch(context.Context, *SetupMailboxWatchRequest) (*SetupMailboxWatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupMailboxWatch not implemented")
}
func (UnimplementedGoogleServiceServer) GetIntegration(context.Context, *GetIntegrationRequest) (*IntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntegration not implemented")
}
func (UnimplementedGoogleServiceServer) SetupWorkspaceAdmin(context.Context, *SetupWorkspaceAdminRequest) (*SetupWorkspaceAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupWorkspaceAdmin not implemented")
}
func (UnimplementedGoogleServiceServer) mustEmbedUnimplementedGoogleServiceServer() {}

// UnsafeGoogleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoogleServiceServer will
// result in compilation errors.
type UnsafeGoogleServiceServer interface {
	mustEmbedUnimplementedGoogleServiceServer()
}

func RegisterGoogleServiceServer(s grpc.ServiceRegistrar, srv GoogleServiceServer) {
	s.RegisterService(&GoogleService_ServiceDesc, srv)
}

func _GoogleService_SetupMailboxWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupMailboxWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).SetupMailboxWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoogleService_SetupMailboxWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).SetupMailboxWatch(ctx, req.(*SetupMailboxWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoogleService_GetIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).GetIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoogleService_GetIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).GetIntegration(ctx, req.(*GetIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoogleService_SetupWorkspaceAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupWorkspaceAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoogleServiceServer).SetupWorkspaceAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoogleService_SetupWorkspaceAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoogleServiceServer).SetupWorkspaceAdmin(ctx, req.(*SetupWorkspaceAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoogleService_ServiceDesc is the grpc.ServiceDesc for GoogleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoogleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "doota.google.v1.GoogleService",
	HandlerType: (*GoogleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetupMailboxWatch",
			Handler:    _GoogleService_SetupMailboxWatch_Handler,
		},
		{
			MethodName: "GetIntegration",
			Handler:    _GoogleService_GetIntegration_Handler,
		},
		{
			MethodName: "SetupWorkspaceAdmin",
			Handler:    _GoogleService_SetupWorkspaceAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "doota/google/v1/google.proto",
}
