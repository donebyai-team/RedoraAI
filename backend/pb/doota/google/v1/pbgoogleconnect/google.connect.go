// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: doota/google/v1/google.proto

package pbgoogleconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shank318/doota/pb/doota/google/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GoogleServiceName is the fully-qualified name of the GoogleService service.
	GoogleServiceName = "doota.google.v1.GoogleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GoogleServiceSetupMailboxWatchProcedure is the fully-qualified name of the GoogleService's
	// SetupMailboxWatch RPC.
	GoogleServiceSetupMailboxWatchProcedure = "/doota.google.v1.GoogleService/SetupMailboxWatch"
	// GoogleServiceGetIntegrationProcedure is the fully-qualified name of the GoogleService's
	// GetIntegration RPC.
	GoogleServiceGetIntegrationProcedure = "/doota.google.v1.GoogleService/GetIntegration"
	// GoogleServiceSetupWorkspaceAdminProcedure is the fully-qualified name of the GoogleService's
	// SetupWorkspaceAdmin RPC.
	GoogleServiceSetupWorkspaceAdminProcedure = "/doota.google.v1.GoogleService/SetupWorkspaceAdmin"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	googleServiceServiceDescriptor                   = v1.File_doota_google_v1_google_proto.Services().ByName("GoogleService")
	googleServiceSetupMailboxWatchMethodDescriptor   = googleServiceServiceDescriptor.Methods().ByName("SetupMailboxWatch")
	googleServiceGetIntegrationMethodDescriptor      = googleServiceServiceDescriptor.Methods().ByName("GetIntegration")
	googleServiceSetupWorkspaceAdminMethodDescriptor = googleServiceServiceDescriptor.Methods().ByName("SetupWorkspaceAdmin")
)

// GoogleServiceClient is a client for the doota.google.v1.GoogleService service.
type GoogleServiceClient interface {
	// this should be called when the user consents when he logs in
	SetupMailboxWatch(context.Context, *connect.Request[v1.SetupMailboxWatchRequest]) (*connect.Response[v1.SetupMailboxWatchResponse], error)
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.IntegrationResponse], error)
	// this should be called when the admin initially connect to their google
	// workspace, it will return a refresh token
	SetupWorkspaceAdmin(context.Context, *connect.Request[v1.SetupWorkspaceAdminRequest]) (*connect.Response[v1.SetupWorkspaceAdminResponse], error)
}

// NewGoogleServiceClient constructs a client for the doota.google.v1.GoogleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGoogleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GoogleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &googleServiceClient{
		setupMailboxWatch: connect.NewClient[v1.SetupMailboxWatchRequest, v1.SetupMailboxWatchResponse](
			httpClient,
			baseURL+GoogleServiceSetupMailboxWatchProcedure,
			connect.WithSchema(googleServiceSetupMailboxWatchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntegration: connect.NewClient[v1.GetIntegrationRequest, v1.IntegrationResponse](
			httpClient,
			baseURL+GoogleServiceGetIntegrationProcedure,
			connect.WithSchema(googleServiceGetIntegrationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		setupWorkspaceAdmin: connect.NewClient[v1.SetupWorkspaceAdminRequest, v1.SetupWorkspaceAdminResponse](
			httpClient,
			baseURL+GoogleServiceSetupWorkspaceAdminProcedure,
			connect.WithSchema(googleServiceSetupWorkspaceAdminMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// googleServiceClient implements GoogleServiceClient.
type googleServiceClient struct {
	setupMailboxWatch   *connect.Client[v1.SetupMailboxWatchRequest, v1.SetupMailboxWatchResponse]
	getIntegration      *connect.Client[v1.GetIntegrationRequest, v1.IntegrationResponse]
	setupWorkspaceAdmin *connect.Client[v1.SetupWorkspaceAdminRequest, v1.SetupWorkspaceAdminResponse]
}

// SetupMailboxWatch calls doota.google.v1.GoogleService.SetupMailboxWatch.
func (c *googleServiceClient) SetupMailboxWatch(ctx context.Context, req *connect.Request[v1.SetupMailboxWatchRequest]) (*connect.Response[v1.SetupMailboxWatchResponse], error) {
	return c.setupMailboxWatch.CallUnary(ctx, req)
}

// GetIntegration calls doota.google.v1.GoogleService.GetIntegration.
func (c *googleServiceClient) GetIntegration(ctx context.Context, req *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.IntegrationResponse], error) {
	return c.getIntegration.CallUnary(ctx, req)
}

// SetupWorkspaceAdmin calls doota.google.v1.GoogleService.SetupWorkspaceAdmin.
func (c *googleServiceClient) SetupWorkspaceAdmin(ctx context.Context, req *connect.Request[v1.SetupWorkspaceAdminRequest]) (*connect.Response[v1.SetupWorkspaceAdminResponse], error) {
	return c.setupWorkspaceAdmin.CallUnary(ctx, req)
}

// GoogleServiceHandler is an implementation of the doota.google.v1.GoogleService service.
type GoogleServiceHandler interface {
	// this should be called when the user consents when he logs in
	SetupMailboxWatch(context.Context, *connect.Request[v1.SetupMailboxWatchRequest]) (*connect.Response[v1.SetupMailboxWatchResponse], error)
	GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.IntegrationResponse], error)
	// this should be called when the admin initially connect to their google
	// workspace, it will return a refresh token
	SetupWorkspaceAdmin(context.Context, *connect.Request[v1.SetupWorkspaceAdminRequest]) (*connect.Response[v1.SetupWorkspaceAdminResponse], error)
}

// NewGoogleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGoogleServiceHandler(svc GoogleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	googleServiceSetupMailboxWatchHandler := connect.NewUnaryHandler(
		GoogleServiceSetupMailboxWatchProcedure,
		svc.SetupMailboxWatch,
		connect.WithSchema(googleServiceSetupMailboxWatchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	googleServiceGetIntegrationHandler := connect.NewUnaryHandler(
		GoogleServiceGetIntegrationProcedure,
		svc.GetIntegration,
		connect.WithSchema(googleServiceGetIntegrationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	googleServiceSetupWorkspaceAdminHandler := connect.NewUnaryHandler(
		GoogleServiceSetupWorkspaceAdminProcedure,
		svc.SetupWorkspaceAdmin,
		connect.WithSchema(googleServiceSetupWorkspaceAdminMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/doota.google.v1.GoogleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GoogleServiceSetupMailboxWatchProcedure:
			googleServiceSetupMailboxWatchHandler.ServeHTTP(w, r)
		case GoogleServiceGetIntegrationProcedure:
			googleServiceGetIntegrationHandler.ServeHTTP(w, r)
		case GoogleServiceSetupWorkspaceAdminProcedure:
			googleServiceSetupWorkspaceAdminHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGoogleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGoogleServiceHandler struct{}

func (UnimplementedGoogleServiceHandler) SetupMailboxWatch(context.Context, *connect.Request[v1.SetupMailboxWatchRequest]) (*connect.Response[v1.SetupMailboxWatchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.google.v1.GoogleService.SetupMailboxWatch is not implemented"))
}

func (UnimplementedGoogleServiceHandler) GetIntegration(context.Context, *connect.Request[v1.GetIntegrationRequest]) (*connect.Response[v1.IntegrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.google.v1.GoogleService.GetIntegration is not implemented"))
}

func (UnimplementedGoogleServiceHandler) SetupWorkspaceAdmin(context.Context, *connect.Request[v1.SetupWorkspaceAdminRequest]) (*connect.Response[v1.SetupWorkspaceAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("doota.google.v1.GoogleService.SetupWorkspaceAdmin is not implemented"))
}
