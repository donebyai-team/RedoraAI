// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: doota/reddit/v1/reddit.proto

package pbreddit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{0}
}

func (x *Integration) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type RemoveSubRedditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // eg. r/SAAS
}

func (x *RemoveSubRedditRequest) Reset() {
	*x = RemoveSubRedditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubRedditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubRedditRequest) ProtoMessage() {}

func (x *RemoveSubRedditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubRedditRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubRedditRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{1}
}

func (x *RemoveSubRedditRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddSubRedditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // eg. r/SAAS
}

func (x *AddSubRedditRequest) Reset() {
	*x = AddSubRedditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubRedditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubRedditRequest) ProtoMessage() {}

func (x *AddSubRedditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubRedditRequest.ProtoReflect.Descriptor instead.
func (*AddSubRedditRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{2}
}

func (x *AddSubRedditRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SubReddit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string             `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name        string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    *SubRedditMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Title       *string            `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *SubReddit) Reset() {
	*x = SubReddit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubReddit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubReddit) ProtoMessage() {}

func (x *SubReddit) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubReddit.ProtoReflect.Descriptor instead.
func (*SubReddit) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{3}
}

func (x *SubReddit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubReddit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SubReddit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubReddit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubReddit) GetMetadata() *SubRedditMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubReddit) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type SubRedditMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubRedditMetadata) Reset() {
	*x = SubRedditMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubRedditMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRedditMetadata) ProtoMessage() {}

func (x *SubRedditMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRedditMetadata.ProtoReflect.Descriptor instead.
func (*SubRedditMetadata) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{4}
}

type GetSubredditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subreddits []*SubReddit `protobuf:"bytes,1,rep,name=subreddits,proto3" json:"subreddits,omitempty"`
}

func (x *GetSubredditsResponse) Reset() {
	*x = GetSubredditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubredditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubredditsResponse) ProtoMessage() {}

func (x *GetSubredditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubredditsResponse.ProtoReflect.Descriptor instead.
func (*GetSubredditsResponse) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubredditsResponse) GetSubreddits() []*SubReddit {
	if x != nil {
		return x.Subreddits
	}
	return nil
}

var File_doota_reddit_v1_reddit_proto protoreflect.FileDescriptor

var file_doota_reddit_v1_reddit_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x22,
	0x2a, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x52,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc8,
	0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x75, 0x62,
	0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x6f,
	0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x73, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x33, 0x31, 0x38, 0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61,
	0x2f, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doota_reddit_v1_reddit_proto_rawDescOnce sync.Once
	file_doota_reddit_v1_reddit_proto_rawDescData = file_doota_reddit_v1_reddit_proto_rawDesc
)

func file_doota_reddit_v1_reddit_proto_rawDescGZIP() []byte {
	file_doota_reddit_v1_reddit_proto_rawDescOnce.Do(func() {
		file_doota_reddit_v1_reddit_proto_rawDescData = protoimpl.X.CompressGZIP(file_doota_reddit_v1_reddit_proto_rawDescData)
	})
	return file_doota_reddit_v1_reddit_proto_rawDescData
}

var file_doota_reddit_v1_reddit_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_doota_reddit_v1_reddit_proto_goTypes = []interface{}{
	(*Integration)(nil),            // 0: doota.reddit.v1.Integration
	(*RemoveSubRedditRequest)(nil), // 1: doota.reddit.v1.RemoveSubRedditRequest
	(*AddSubRedditRequest)(nil),    // 2: doota.reddit.v1.AddSubRedditRequest
	(*SubReddit)(nil),              // 3: doota.reddit.v1.SubReddit
	(*SubRedditMetadata)(nil),      // 4: doota.reddit.v1.SubRedditMetadata
	(*GetSubredditsResponse)(nil),  // 5: doota.reddit.v1.GetSubredditsResponse
}
var file_doota_reddit_v1_reddit_proto_depIdxs = []int32{
	4, // 0: doota.reddit.v1.SubReddit.metadata:type_name -> doota.reddit.v1.SubRedditMetadata
	3, // 1: doota.reddit.v1.GetSubredditsResponse.subreddits:type_name -> doota.reddit.v1.SubReddit
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_doota_reddit_v1_reddit_proto_init() }
func file_doota_reddit_v1_reddit_proto_init() {
	if File_doota_reddit_v1_reddit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doota_reddit_v1_reddit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubRedditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubRedditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubReddit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubRedditMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubredditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_doota_reddit_v1_reddit_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doota_reddit_v1_reddit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doota_reddit_v1_reddit_proto_goTypes,
		DependencyIndexes: file_doota_reddit_v1_reddit_proto_depIdxs,
		MessageInfos:      file_doota_reddit_v1_reddit_proto_msgTypes,
	}.Build()
	File_doota_reddit_v1_reddit_proto = out.File
	file_doota_reddit_v1_reddit_proto_rawDesc = nil
	file_doota_reddit_v1_reddit_proto_goTypes = nil
	file_doota_reddit_v1_reddit_proto_depIdxs = nil
}
