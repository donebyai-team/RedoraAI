// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: doota/reddit/v1/reddit.proto

package pbreddit

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LeadStatus int32

const (
	LeadStatus_NEW          LeadStatus = 0
	LeadStatus_NOT_RELEVANT LeadStatus = 1
	LeadStatus_COMPLETED    LeadStatus = 3
)

// Enum value maps for LeadStatus.
var (
	LeadStatus_name = map[int32]string{
		0: "NEW",
		1: "NOT_RELEVANT",
		3: "COMPLETED",
	}
	LeadStatus_value = map[string]int32{
		"NEW":          0,
		"NOT_RELEVANT": 1,
		"COMPLETED":    3,
	}
)

func (x LeadStatus) Enum() *LeadStatus {
	p := new(LeadStatus)
	*p = x
	return p
}

func (x LeadStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeadStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_reddit_v1_reddit_proto_enumTypes[0].Descriptor()
}

func (LeadStatus) Type() protoreflect.EnumType {
	return &file_doota_reddit_v1_reddit_proto_enumTypes[0]
}

func (x LeadStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeadStatus.Descriptor instead.
func (LeadStatus) EnumDescriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{0}
}

type LeadType int32

const (
	LeadType_POST    LeadType = 0
	LeadType_COMMENT LeadType = 1
)

// Enum value maps for LeadType.
var (
	LeadType_name = map[int32]string{
		0: "POST",
		1: "COMMENT",
	}
	LeadType_value = map[string]int32{
		"POST":    0,
		"COMMENT": 1,
	}
)

func (x LeadType) Enum() *LeadType {
	p := new(LeadType)
	*p = x
	return p
}

func (x LeadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeadType) Descriptor() protoreflect.EnumDescriptor {
	return file_doota_reddit_v1_reddit_proto_enumTypes[1].Descriptor()
}

func (LeadType) Type() protoreflect.EnumType {
	return &file_doota_reddit_v1_reddit_proto_enumTypes[1]
}

func (x LeadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeadType.Descriptor instead.
func (LeadType) EnumDescriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{1}
}

type Integration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *Integration) Reset() {
	*x = Integration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integration) ProtoMessage() {}

func (x *Integration) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integration.ProtoReflect.Descriptor instead.
func (*Integration) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{0}
}

func (x *Integration) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type RemoveSubRedditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // eg. r/SAAS
}

func (x *RemoveSubRedditRequest) Reset() {
	*x = RemoveSubRedditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubRedditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubRedditRequest) ProtoMessage() {}

func (x *RemoveSubRedditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubRedditRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubRedditRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{1}
}

func (x *RemoveSubRedditRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AddSubRedditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // eg. r/SAAS
}

func (x *AddSubRedditRequest) Reset() {
	*x = AddSubRedditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubRedditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubRedditRequest) ProtoMessage() {}

func (x *AddSubRedditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubRedditRequest.ProtoReflect.Descriptor instead.
func (*AddSubRedditRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{2}
}

func (x *AddSubRedditRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SubReddit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Url         string             `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Name        string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string             `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Metadata    *SubRedditMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Title       *string            `protobuf:"bytes,6,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *SubReddit) Reset() {
	*x = SubReddit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubReddit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubReddit) ProtoMessage() {}

func (x *SubReddit) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubReddit.ProtoReflect.Descriptor instead.
func (*SubReddit) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{3}
}

func (x *SubReddit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubReddit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SubReddit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubReddit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubReddit) GetMetadata() *SubRedditMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SubReddit) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

type SubRedditMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubRedditMetadata) Reset() {
	*x = SubRedditMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubRedditMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubRedditMetadata) ProtoMessage() {}

func (x *SubRedditMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubRedditMetadata.ProtoReflect.Descriptor instead.
func (*SubRedditMetadata) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{4}
}

type GetSubredditsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subreddits []*SubReddit `protobuf:"bytes,1,rep,name=subreddits,proto3" json:"subreddits,omitempty"`
}

func (x *GetSubredditsResponse) Reset() {
	*x = GetSubredditsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubredditsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubredditsResponse) ProtoMessage() {}

func (x *GetSubredditsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubredditsResponse.ProtoReflect.Descriptor instead.
func (*GetSubredditsResponse) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{5}
}

func (x *GetSubredditsResponse) GetSubreddits() []*SubReddit {
	if x != nil {
		return x.Subreddits
	}
	return nil
}

type UpdateLeadStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LeadStatus `protobuf:"varint,1,opt,name=status,proto3,enum=doota.reddit.v1.LeadStatus" json:"status,omitempty"`
	LeadId string     `protobuf:"bytes,2,opt,name=lead_id,json=leadId,proto3" json:"lead_id,omitempty"`
}

func (x *UpdateLeadStatusRequest) Reset() {
	*x = UpdateLeadStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLeadStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLeadStatusRequest) ProtoMessage() {}

func (x *UpdateLeadStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLeadStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateLeadStatusRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateLeadStatusRequest) GetStatus() LeadStatus {
	if x != nil {
		return x.Status
	}
	return LeadStatus_NEW
}

func (x *UpdateLeadStatusRequest) GetLeadId() string {
	if x != nil {
		return x.LeadId
	}
	return ""
}

type GetLeadsByStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LeadStatus `protobuf:"varint,1,opt,name=status,proto3,enum=doota.reddit.v1.LeadStatus" json:"status,omitempty"`
}

func (x *GetLeadsByStatusRequest) Reset() {
	*x = GetLeadsByStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeadsByStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeadsByStatusRequest) ProtoMessage() {}

func (x *GetLeadsByStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeadsByStatusRequest.ProtoReflect.Descriptor instead.
func (*GetLeadsByStatusRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{7}
}

func (x *GetLeadsByStatusRequest) GetStatus() LeadStatus {
	if x != nil {
		return x.Status
	}
	return LeadStatus_NEW
}

type GetRelevantLeadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubReddit      *string `protobuf:"bytes,1,opt,name=sub_reddit,json=subReddit,proto3,oneof" json:"sub_reddit,omitempty"`
	RelevancyScore float32 `protobuf:"fixed32,2,opt,name=relevancy_score,json=relevancyScore,proto3" json:"relevancy_score,omitempty"`
}

func (x *GetRelevantLeadsRequest) Reset() {
	*x = GetRelevantLeadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelevantLeadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelevantLeadsRequest) ProtoMessage() {}

func (x *GetRelevantLeadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelevantLeadsRequest.ProtoReflect.Descriptor instead.
func (*GetRelevantLeadsRequest) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{8}
}

func (x *GetRelevantLeadsRequest) GetSubReddit() string {
	if x != nil && x.SubReddit != nil {
		return *x.SubReddit
	}
	return ""
}

func (x *GetRelevantLeadsRequest) GetRelevancyScore() float32 {
	if x != nil {
		return x.RelevancyScore
	}
	return 0
}

type GetLeadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leads []*RedditLead `protobuf:"bytes,1,rep,name=leads,proto3" json:"leads,omitempty"`
}

func (x *GetLeadsResponse) Reset() {
	*x = GetLeadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeadsResponse) ProtoMessage() {}

func (x *GetLeadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeadsResponse.ProtoReflect.Descriptor instead.
func (*GetLeadsResponse) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{9}
}

func (x *GetLeadsResponse) GetLeads() []*RedditLead {
	if x != nil {
		return x.Leads
	}
	return nil
}

type LeadMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainOfThought                   string `protobuf:"bytes,1,opt,name=chain_of_thought,json=chainOfThought,proto3" json:"chain_of_thought,omitempty"`
	SuggestedComment                 string `protobuf:"bytes,2,opt,name=suggested_comment,json=suggestedComment,proto3" json:"suggested_comment,omitempty"`
	SuggestedDm                      string `protobuf:"bytes,3,opt,name=suggested_dm,json=suggestedDm,proto3" json:"suggested_dm,omitempty"`
	ChainOfThoughtSuggestedComment   string `protobuf:"bytes,4,opt,name=chain_of_thought_suggested_comment,json=chainOfThoughtSuggestedComment,proto3" json:"chain_of_thought_suggested_comment,omitempty"`
	ChainOfThoughtCommentSuggestedDm string `protobuf:"bytes,5,opt,name=chain_of_thought_comment_suggested_dm,json=chainOfThoughtCommentSuggestedDm,proto3" json:"chain_of_thought_comment_suggested_dm,omitempty"`
	PostUrl                          string `protobuf:"bytes,6,opt,name=post_url,json=postUrl,proto3" json:"post_url,omitempty"`
}

func (x *LeadMetadata) Reset() {
	*x = LeadMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeadMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeadMetadata) ProtoMessage() {}

func (x *LeadMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeadMetadata.ProtoReflect.Descriptor instead.
func (*LeadMetadata) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{10}
}

func (x *LeadMetadata) GetChainOfThought() string {
	if x != nil {
		return x.ChainOfThought
	}
	return ""
}

func (x *LeadMetadata) GetSuggestedComment() string {
	if x != nil {
		return x.SuggestedComment
	}
	return ""
}

func (x *LeadMetadata) GetSuggestedDm() string {
	if x != nil {
		return x.SuggestedDm
	}
	return ""
}

func (x *LeadMetadata) GetChainOfThoughtSuggestedComment() string {
	if x != nil {
		return x.ChainOfThoughtSuggestedComment
	}
	return ""
}

func (x *LeadMetadata) GetChainOfThoughtCommentSuggestedDm() string {
	if x != nil {
		return x.ChainOfThoughtCommentSuggestedDm
	}
	return ""
}

func (x *LeadMetadata) GetPostUrl() string {
	if x != nil {
		return x.PostUrl
	}
	return ""
}

type RedditLead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	SubredditId    string                 `protobuf:"bytes,3,opt,name=subreddit_id,json=subredditId,proto3" json:"subreddit_id,omitempty"`
	Author         string                 `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	PostId         string                 `protobuf:"bytes,5,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	Type           LeadType               `protobuf:"varint,6,opt,name=type,proto3,enum=doota.reddit.v1.LeadType" json:"type,omitempty"`
	Status         LeadStatus             `protobuf:"varint,7,opt,name=status,proto3,enum=doota.reddit.v1.LeadStatus" json:"status,omitempty"`
	RelevancyScore float64                `protobuf:"fixed64,8,opt,name=relevancy_score,json=relevancyScore,proto3" json:"relevancy_score,omitempty"`
	PostCreatedAt  *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=post_created_at,json=postCreatedAt,proto3" json:"post_created_at,omitempty"`
	Title          *string                `protobuf:"bytes,10,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description    string                 `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	Metadata       *LeadMetadata          `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *RedditLead) Reset() {
	*x = RedditLead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_doota_reddit_v1_reddit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedditLead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedditLead) ProtoMessage() {}

func (x *RedditLead) ProtoReflect() protoreflect.Message {
	mi := &file_doota_reddit_v1_reddit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedditLead.ProtoReflect.Descriptor instead.
func (*RedditLead) Descriptor() ([]byte, []int) {
	return file_doota_reddit_v1_reddit_proto_rawDescGZIP(), []int{11}
}

func (x *RedditLead) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RedditLead) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RedditLead) GetSubredditId() string {
	if x != nil {
		return x.SubredditId
	}
	return ""
}

func (x *RedditLead) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *RedditLead) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *RedditLead) GetType() LeadType {
	if x != nil {
		return x.Type
	}
	return LeadType_POST
}

func (x *RedditLead) GetStatus() LeadStatus {
	if x != nil {
		return x.Status
	}
	return LeadStatus_NEW
}

func (x *RedditLead) GetRelevancyScore() float64 {
	if x != nil {
		return x.RelevancyScore
	}
	return 0
}

func (x *RedditLead) GetPostCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PostCreatedAt
	}
	return nil
}

func (x *RedditLead) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *RedditLead) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RedditLead) GetMetadata() *LeadMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RedditLead) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_doota_reddit_v1_reddit_proto protoreflect.FileDescriptor

var file_doota_reddit_v1_reddit_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x2a, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x16,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x27, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62,
	0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0xc8, 0x01, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x52, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x53, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x72,
	0x65, 0x64, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64,
	0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64,
	0x64, 0x69, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x4e, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61,
	0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x75, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65,
	0x64, 0x64, 0x69, 0x74, 0x22, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x64, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x0c,
	0x4c, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x54,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x44, 0x6d, 0x12, 0x4a, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x54, 0x68, 0x6f, 0x75, 0x67,
	0x68, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x25, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x68, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x20, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x54, 0x68, 0x6f, 0x75, 0x67, 0x68,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x44, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x9d,
	0x04, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x64, 0x69, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63,
	0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x63, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2e, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x2a, 0x36,
	0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03,
	0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x4c,
	0x45, 0x56, 0x41, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x21, 0x0a, 0x08, 0x4c, 0x65, 0x61, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x61, 0x6e, 0x6b, 0x33, 0x31, 0x38,
	0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f, 0x70, 0x62, 0x2f, 0x64, 0x6f, 0x6f, 0x74, 0x61, 0x2f,
	0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0x72, 0x65, 0x64, 0x64,
	0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_doota_reddit_v1_reddit_proto_rawDescOnce sync.Once
	file_doota_reddit_v1_reddit_proto_rawDescData = file_doota_reddit_v1_reddit_proto_rawDesc
)

func file_doota_reddit_v1_reddit_proto_rawDescGZIP() []byte {
	file_doota_reddit_v1_reddit_proto_rawDescOnce.Do(func() {
		file_doota_reddit_v1_reddit_proto_rawDescData = protoimpl.X.CompressGZIP(file_doota_reddit_v1_reddit_proto_rawDescData)
	})
	return file_doota_reddit_v1_reddit_proto_rawDescData
}

var file_doota_reddit_v1_reddit_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_doota_reddit_v1_reddit_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_doota_reddit_v1_reddit_proto_goTypes = []interface{}{
	(LeadStatus)(0),                 // 0: doota.reddit.v1.LeadStatus
	(LeadType)(0),                   // 1: doota.reddit.v1.LeadType
	(*Integration)(nil),             // 2: doota.reddit.v1.Integration
	(*RemoveSubRedditRequest)(nil),  // 3: doota.reddit.v1.RemoveSubRedditRequest
	(*AddSubRedditRequest)(nil),     // 4: doota.reddit.v1.AddSubRedditRequest
	(*SubReddit)(nil),               // 5: doota.reddit.v1.SubReddit
	(*SubRedditMetadata)(nil),       // 6: doota.reddit.v1.SubRedditMetadata
	(*GetSubredditsResponse)(nil),   // 7: doota.reddit.v1.GetSubredditsResponse
	(*UpdateLeadStatusRequest)(nil), // 8: doota.reddit.v1.UpdateLeadStatusRequest
	(*GetLeadsByStatusRequest)(nil), // 9: doota.reddit.v1.GetLeadsByStatusRequest
	(*GetRelevantLeadsRequest)(nil), // 10: doota.reddit.v1.GetRelevantLeadsRequest
	(*GetLeadsResponse)(nil),        // 11: doota.reddit.v1.GetLeadsResponse
	(*LeadMetadata)(nil),            // 12: doota.reddit.v1.LeadMetadata
	(*RedditLead)(nil),              // 13: doota.reddit.v1.RedditLead
	(*timestamppb.Timestamp)(nil),   // 14: google.protobuf.Timestamp
}
var file_doota_reddit_v1_reddit_proto_depIdxs = []int32{
	6,  // 0: doota.reddit.v1.SubReddit.metadata:type_name -> doota.reddit.v1.SubRedditMetadata
	5,  // 1: doota.reddit.v1.GetSubredditsResponse.subreddits:type_name -> doota.reddit.v1.SubReddit
	0,  // 2: doota.reddit.v1.UpdateLeadStatusRequest.status:type_name -> doota.reddit.v1.LeadStatus
	0,  // 3: doota.reddit.v1.GetLeadsByStatusRequest.status:type_name -> doota.reddit.v1.LeadStatus
	13, // 4: doota.reddit.v1.GetLeadsResponse.leads:type_name -> doota.reddit.v1.RedditLead
	1,  // 5: doota.reddit.v1.RedditLead.type:type_name -> doota.reddit.v1.LeadType
	0,  // 6: doota.reddit.v1.RedditLead.status:type_name -> doota.reddit.v1.LeadStatus
	14, // 7: doota.reddit.v1.RedditLead.post_created_at:type_name -> google.protobuf.Timestamp
	12, // 8: doota.reddit.v1.RedditLead.metadata:type_name -> doota.reddit.v1.LeadMetadata
	14, // 9: doota.reddit.v1.RedditLead.created_at:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_doota_reddit_v1_reddit_proto_init() }
func file_doota_reddit_v1_reddit_proto_init() {
	if File_doota_reddit_v1_reddit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_doota_reddit_v1_reddit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSubRedditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubRedditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubReddit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubRedditMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubredditsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLeadStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeadsByStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelevantLeadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeadMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_doota_reddit_v1_reddit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedditLead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_doota_reddit_v1_reddit_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_doota_reddit_v1_reddit_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_doota_reddit_v1_reddit_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_doota_reddit_v1_reddit_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_doota_reddit_v1_reddit_proto_goTypes,
		DependencyIndexes: file_doota_reddit_v1_reddit_proto_depIdxs,
		EnumInfos:         file_doota_reddit_v1_reddit_proto_enumTypes,
		MessageInfos:      file_doota_reddit_v1_reddit_proto_msgTypes,
	}.Build()
	File_doota_reddit_v1_reddit_proto = out.File
	file_doota_reddit_v1_reddit_proto_rawDesc = nil
	file_doota_reddit_v1_reddit_proto_goTypes = nil
	file_doota_reddit_v1_reddit_proto_depIdxs = nil
}
