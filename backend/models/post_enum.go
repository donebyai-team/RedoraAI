// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// PostStatusCREATED is a PostStatus of type CREATED.
	PostStatusCREATED PostStatus = "CREATED"
	// PostStatusPROCESSING is a PostStatus of type PROCESSING.
	PostStatusPROCESSING PostStatus = "PROCESSING"
	// PostStatusSENT is a PostStatus of type SENT.
	PostStatusSENT PostStatus = "SENT"
	// PostStatusFAILED is a PostStatus of type FAILED.
	PostStatusFAILED PostStatus = "FAILED"
	// PostStatusSCHEDULED is a PostStatus of type SCHEDULED.
	PostStatusSCHEDULED PostStatus = "SCHEDULED"
)

var ErrInvalidPostStatus = errors.New("not a valid PostStatus")

// String implements the Stringer interface.
func (x PostStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x PostStatus) IsValid() bool {
	_, err := ParsePostStatus(string(x))
	return err == nil
}

var _PostStatusValue = map[string]PostStatus{
	"CREATED":    PostStatusCREATED,
	"PROCESSING": PostStatusPROCESSING,
	"SENT":       PostStatusSENT,
	"FAILED":     PostStatusFAILED,
	"SCHEDULED":  PostStatusSCHEDULED,
}

// ParsePostStatus attempts to convert a string to a PostStatus.
func ParsePostStatus(name string) (PostStatus, error) {
	if x, ok := _PostStatusValue[name]; ok {
		return x, nil
	}
	return PostStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidPostStatus)
}
