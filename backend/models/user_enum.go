// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// UserRoleUSER is a UserRole of type USER.
	UserRoleUSER UserRole = "USER"
	// UserRoleADMIN is a UserRole of type ADMIN.
	UserRoleADMIN UserRole = "ADMIN"
	// UserRolePLATFORMADMIN is a UserRole of type PLATFORM_ADMIN.
	UserRolePLATFORMADMIN UserRole = "PLATFORM_ADMIN"
)

var ErrInvalidUserRole = errors.New("not a valid UserRole")

// String implements the Stringer interface.
func (x UserRole) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UserRole) IsValid() bool {
	_, err := ParseUserRole(string(x))
	return err == nil
}

var _UserRoleValue = map[string]UserRole{
	"USER":           UserRoleUSER,
	"ADMIN":          UserRoleADMIN,
	"PLATFORM_ADMIN": UserRolePLATFORMADMIN,
}

// ParseUserRole attempts to convert a string to a UserRole.
func ParseUserRole(name string) (UserRole, error) {
	if x, ok := _UserRoleValue[name]; ok {
		return x, nil
	}
	return UserRole(""), fmt.Errorf("%s is %w", name, ErrInvalidUserRole)
}

const (
	// UserStatePENDING is a UserState of type PENDING.
	UserStatePENDING UserState = "PENDING"
	// UserStateACTIVE is a UserState of type ACTIVE.
	UserStateACTIVE UserState = "ACTIVE"
)

var ErrInvalidUserState = errors.New("not a valid UserState")

// String implements the Stringer interface.
func (x UserState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x UserState) IsValid() bool {
	_, err := ParseUserState(string(x))
	return err == nil
}

var _UserStateValue = map[string]UserState{
	"PENDING": UserStatePENDING,
	"ACTIVE":  UserStateACTIVE,
}

// ParseUserState attempts to convert a string to a UserState.
func ParseUserState(name string) (UserState, error) {
	if x, ok := _UserStateValue[name]; ok {
		return x, nil
	}
	return UserState(""), fmt.Errorf("%s is %w", name, ErrInvalidUserState)
}
