// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// IntegrationStateACTIVE is a IntegrationState of type ACTIVE.
	IntegrationStateACTIVE IntegrationState = "ACTIVE"
)

var ErrInvalidIntegrationState = errors.New("not a valid IntegrationState")

// String implements the Stringer interface.
func (x IntegrationState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IntegrationState) IsValid() bool {
	_, err := ParseIntegrationState(string(x))
	return err == nil
}

var _IntegrationStateValue = map[string]IntegrationState{
	"ACTIVE": IntegrationStateACTIVE,
}

// ParseIntegrationState attempts to convert a string to a IntegrationState.
func ParseIntegrationState(name string) (IntegrationState, error) {
	if x, ok := _IntegrationStateValue[name]; ok {
		return x, nil
	}
	return IntegrationState(""), fmt.Errorf("%s is %w", name, ErrInvalidIntegrationState)
}

const (
	// IntegrationTypeMICROSOFT is a IntegrationType of type MICROSOFT.
	IntegrationTypeMICROSOFT IntegrationType = "MICROSOFT"
	// IntegrationTypeGOOGLE is a IntegrationType of type GOOGLE.
	IntegrationTypeGOOGLE IntegrationType = "GOOGLE"
	// IntegrationTypeDAT is a IntegrationType of type DAT.
	IntegrationTypeDAT IntegrationType = "DAT"
	// IntegrationTypeREVENOVA is a IntegrationType of type REVENOVA.
	IntegrationTypeREVENOVA IntegrationType = "REVENOVA"
)

var ErrInvalidIntegrationType = errors.New("not a valid IntegrationType")

// String implements the Stringer interface.
func (x IntegrationType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x IntegrationType) IsValid() bool {
	_, err := ParseIntegrationType(string(x))
	return err == nil
}

var _IntegrationTypeValue = map[string]IntegrationType{
	"MICROSOFT": IntegrationTypeMICROSOFT,
	"GOOGLE":    IntegrationTypeGOOGLE,
	"DAT":       IntegrationTypeDAT,
	"REVENOVA":  IntegrationTypeREVENOVA,
}

// ParseIntegrationType attempts to convert a string to a IntegrationType.
func ParseIntegrationType(name string) (IntegrationType, error) {
	if x, ok := _IntegrationTypeValue[name]; ok {
		return x, nil
	}
	return IntegrationType(""), fmt.Errorf("%s is %w", name, ErrInvalidIntegrationType)
}
