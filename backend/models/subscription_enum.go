// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// SubscriptionPlanTypeFREE is a SubscriptionPlanType of type FREE.
	SubscriptionPlanTypeFREE SubscriptionPlanType = "FREE"
	// SubscriptionPlanTypeFOUNDER is a SubscriptionPlanType of type FOUNDER.
	SubscriptionPlanTypeFOUNDER SubscriptionPlanType = "FOUNDER"
	// SubscriptionPlanTypePRO is a SubscriptionPlanType of type PRO.
	SubscriptionPlanTypePRO SubscriptionPlanType = "PRO"
)

var ErrInvalidSubscriptionPlanType = errors.New("not a valid SubscriptionPlanType")

// String implements the Stringer interface.
func (x SubscriptionPlanType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SubscriptionPlanType) IsValid() bool {
	_, err := ParseSubscriptionPlanType(string(x))
	return err == nil
}

var _SubscriptionPlanTypeValue = map[string]SubscriptionPlanType{
	"FREE":    SubscriptionPlanTypeFREE,
	"FOUNDER": SubscriptionPlanTypeFOUNDER,
	"PRO":     SubscriptionPlanTypePRO,
}

// ParseSubscriptionPlanType attempts to convert a string to a SubscriptionPlanType.
func ParseSubscriptionPlanType(name string) (SubscriptionPlanType, error) {
	if x, ok := _SubscriptionPlanTypeValue[name]; ok {
		return x, nil
	}
	return SubscriptionPlanType(""), fmt.Errorf("%s is %w", name, ErrInvalidSubscriptionPlanType)
}

const (
	// SubscriptionStatusCREATED is a SubscriptionStatus of type CREATED.
	SubscriptionStatusCREATED SubscriptionStatus = "CREATED"
	// SubscriptionStatusFAILED is a SubscriptionStatus of type FAILED.
	SubscriptionStatusFAILED SubscriptionStatus = "FAILED"
	// SubscriptionStatusEXPIRED is a SubscriptionStatus of type EXPIRED.
	SubscriptionStatusEXPIRED SubscriptionStatus = "EXPIRED"
	// SubscriptionStatusACTIVE is a SubscriptionStatus of type ACTIVE.
	SubscriptionStatusACTIVE SubscriptionStatus = "ACTIVE"
)

var ErrInvalidSubscriptionStatus = errors.New("not a valid SubscriptionStatus")

// String implements the Stringer interface.
func (x SubscriptionStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SubscriptionStatus) IsValid() bool {
	_, err := ParseSubscriptionStatus(string(x))
	return err == nil
}

var _SubscriptionStatusValue = map[string]SubscriptionStatus{
	"CREATED": SubscriptionStatusCREATED,
	"FAILED":  SubscriptionStatusFAILED,
	"EXPIRED": SubscriptionStatusEXPIRED,
	"ACTIVE":  SubscriptionStatusACTIVE,
}

// ParseSubscriptionStatus attempts to convert a string to a SubscriptionStatus.
func ParseSubscriptionStatus(name string) (SubscriptionStatus, error) {
	if x, ok := _SubscriptionStatusValue[name]; ok {
		return x, nil
	}
	return SubscriptionStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidSubscriptionStatus)
}
