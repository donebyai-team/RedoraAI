// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// ConversationStatusINPROGRESS is a ConversationStatus of type IN_PROGRESS.
	ConversationStatusINPROGRESS ConversationStatus = "IN_PROGRESS"
	// ConversationStatusQUEUED is a ConversationStatus of type QUEUED.
	ConversationStatusQUEUED ConversationStatus = "QUEUED"
	// ConversationStatusAIENDED is a ConversationStatus of type AI_ENDED.
	ConversationStatusAIENDED ConversationStatus = "AI_ENDED"
	// ConversationStatusCUSTOMERENDED is a ConversationStatus of type CUSTOMER_ENDED.
	ConversationStatusCUSTOMERENDED ConversationStatus = "CUSTOMER_ENDED"
)

var ErrInvalidConversationStatus = errors.New("not a valid ConversationStatus")

// String implements the Stringer interface.
func (x ConversationStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ConversationStatus) IsValid() bool {
	_, err := ParseConversationStatus(string(x))
	return err == nil
}

var _ConversationStatusValue = map[string]ConversationStatus{
	"IN_PROGRESS":    ConversationStatusINPROGRESS,
	"QUEUED":         ConversationStatusQUEUED,
	"AI_ENDED":       ConversationStatusAIENDED,
	"CUSTOMER_ENDED": ConversationStatusCUSTOMERENDED,
}

// ParseConversationStatus attempts to convert a string to a ConversationStatus.
func ParseConversationStatus(name string) (ConversationStatus, error) {
	if x, ok := _ConversationStatusValue[name]; ok {
		return x, nil
	}
	return ConversationStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidConversationStatus)
}
