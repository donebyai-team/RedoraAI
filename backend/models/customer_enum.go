// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// CallEndedReasonUNKNOWN is a CallEndedReason of type UNKNOWN.
	CallEndedReasonUNKNOWN CallEndedReason = "UNKNOWN"
	// CallEndedReasonASSISTANTERROR is a CallEndedReason of type ASSISTANT_ERROR.
	CallEndedReasonASSISTANTERROR CallEndedReason = "ASSISTANT_ERROR"
	// CallEndedReasonASSISTANTENDED is a CallEndedReason of type ASSISTANT_ENDED.
	CallEndedReasonASSISTANTENDED CallEndedReason = "ASSISTANT_ENDED"
	// CallEndedReasonASSISTANTFORWARDED is a CallEndedReason of type ASSISTANT_FORWARDED.
	CallEndedReasonASSISTANTFORWARDED CallEndedReason = "ASSISTANT_FORWARDED"
	// CallEndedReasonCUSTOMERBUSY is a CallEndedReason of type CUSTOMER_BUSY.
	CallEndedReasonCUSTOMERBUSY CallEndedReason = "CUSTOMER_BUSY"
	// CallEndedReasonCUSTOMERENDED is a CallEndedReason of type CUSTOMER_ENDED.
	CallEndedReasonCUSTOMERENDED CallEndedReason = "CUSTOMER_ENDED"
	// CallEndedReasonMAXCALLDURATIONREACHED is a CallEndedReason of type MAX_CALL_DURATION_REACHED.
	CallEndedReasonMAXCALLDURATIONREACHED CallEndedReason = "MAX_CALL_DURATION_REACHED"
)

var ErrInvalidCallEndedReason = errors.New("not a valid CallEndedReason")

// String implements the Stringer interface.
func (x CallEndedReason) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CallEndedReason) IsValid() bool {
	_, err := ParseCallEndedReason(string(x))
	return err == nil
}

var _CallEndedReasonValue = map[string]CallEndedReason{
	"UNKNOWN":                   CallEndedReasonUNKNOWN,
	"ASSISTANT_ERROR":           CallEndedReasonASSISTANTERROR,
	"ASSISTANT_ENDED":           CallEndedReasonASSISTANTENDED,
	"ASSISTANT_FORWARDED":       CallEndedReasonASSISTANTFORWARDED,
	"CUSTOMER_BUSY":             CallEndedReasonCUSTOMERBUSY,
	"CUSTOMER_ENDED":            CallEndedReasonCUSTOMERENDED,
	"MAX_CALL_DURATION_REACHED": CallEndedReasonMAXCALLDURATIONREACHED,
}

// ParseCallEndedReason attempts to convert a string to a CallEndedReason.
func ParseCallEndedReason(name string) (CallEndedReason, error) {
	if x, ok := _CallEndedReasonValue[name]; ok {
		return x, nil
	}
	return CallEndedReason(""), fmt.Errorf("%s is %w", name, ErrInvalidCallEndedReason)
}

const (
	// CallStatusUNKNOWN is a CallStatus of type UNKNOWN.
	CallStatusUNKNOWN CallStatus = "UNKNOWN"
	// CallStatusCREATED is a CallStatus of type CREATED.
	CallStatusCREATED CallStatus = "CREATED"
	// CallStatusQUEUED is a CallStatus of type QUEUED.
	CallStatusQUEUED CallStatus = "QUEUED"
	// CallStatusINPROGRESS is a CallStatus of type IN_PROGRESS.
	CallStatusINPROGRESS CallStatus = "IN_PROGRESS"
	// CallStatusENDED is a CallStatus of type ENDED.
	CallStatusENDED CallStatus = "ENDED"
	// CallStatusFORWARDED is a CallStatus of type FORWARDED.
	CallStatusFORWARDED CallStatus = "FORWARDED"
)

var ErrInvalidCallStatus = errors.New("not a valid CallStatus")

// String implements the Stringer interface.
func (x CallStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CallStatus) IsValid() bool {
	_, err := ParseCallStatus(string(x))
	return err == nil
}

var _CallStatusValue = map[string]CallStatus{
	"UNKNOWN":     CallStatusUNKNOWN,
	"CREATED":     CallStatusCREATED,
	"QUEUED":      CallStatusQUEUED,
	"IN_PROGRESS": CallStatusINPROGRESS,
	"ENDED":       CallStatusENDED,
	"FORWARDED":   CallStatusFORWARDED,
}

// ParseCallStatus attempts to convert a string to a CallStatus.
func ParseCallStatus(name string) (CallStatus, error) {
	if x, ok := _CallStatusValue[name]; ok {
		return x, nil
	}
	return CallStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidCallStatus)
}

const (
	// CustomerCaseReasonUNKNOWN is a CustomerCaseReason of type UNKNOWN.
	CustomerCaseReasonUNKNOWN CustomerCaseReason = "UNKNOWN"
	// CustomerCaseReasonPARTIALLYPAID is a CustomerCaseReason of type PARTIALLY_PAID.
	CustomerCaseReasonPARTIALLYPAID CustomerCaseReason = "PARTIALLY_PAID"
	// CustomerCaseReasonPAID is a CustomerCaseReason of type PAID.
	CustomerCaseReasonPAID CustomerCaseReason = "PAID"
	// CustomerCaseReasonMAXCALLTRIESREACHED is a CustomerCaseReason of type MAX_CALL_TRIES_REACHED.
	CustomerCaseReasonMAXCALLTRIESREACHED CustomerCaseReason = "MAX_CALL_TRIES_REACHED"
)

var ErrInvalidCustomerCaseReason = errors.New("not a valid CustomerCaseReason")

// String implements the Stringer interface.
func (x CustomerCaseReason) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CustomerCaseReason) IsValid() bool {
	_, err := ParseCustomerCaseReason(string(x))
	return err == nil
}

var _CustomerCaseReasonValue = map[string]CustomerCaseReason{
	"UNKNOWN":                CustomerCaseReasonUNKNOWN,
	"PARTIALLY_PAID":         CustomerCaseReasonPARTIALLYPAID,
	"PAID":                   CustomerCaseReasonPAID,
	"MAX_CALL_TRIES_REACHED": CustomerCaseReasonMAXCALLTRIESREACHED,
}

// ParseCustomerCaseReason attempts to convert a string to a CustomerCaseReason.
func ParseCustomerCaseReason(name string) (CustomerCaseReason, error) {
	if x, ok := _CustomerCaseReasonValue[name]; ok {
		return x, nil
	}
	return CustomerCaseReason(""), fmt.Errorf("%s is %w", name, ErrInvalidCustomerCaseReason)
}

const (
	// CustomerCaseStatusCREATED is a CustomerCaseStatus of type CREATED.
	CustomerCaseStatusCREATED CustomerCaseStatus = "CREATED"
	// CustomerCaseStatusOPEN is a CustomerCaseStatus of type OPEN.
	CustomerCaseStatusOPEN CustomerCaseStatus = "OPEN"
	// CustomerCaseStatusCLOSED is a CustomerCaseStatus of type CLOSED.
	CustomerCaseStatusCLOSED CustomerCaseStatus = "CLOSED"
)

var ErrInvalidCustomerCaseStatus = errors.New("not a valid CustomerCaseStatus")

// String implements the Stringer interface.
func (x CustomerCaseStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CustomerCaseStatus) IsValid() bool {
	_, err := ParseCustomerCaseStatus(string(x))
	return err == nil
}

var _CustomerCaseStatusValue = map[string]CustomerCaseStatus{
	"CREATED": CustomerCaseStatusCREATED,
	"OPEN":    CustomerCaseStatusOPEN,
	"CLOSED":  CustomerCaseStatusCLOSED,
}

// ParseCustomerCaseStatus attempts to convert a string to a CustomerCaseStatus.
func ParseCustomerCaseStatus(name string) (CustomerCaseStatus, error) {
	if x, ok := _CustomerCaseStatusValue[name]; ok {
		return x, nil
	}
	return CustomerCaseStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidCustomerCaseStatus)
}
