// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// CallStatusCREATED is a CallStatus of type CREATED.
	CallStatusCREATED CallStatus = "CREATED"
	// CallStatusQUEUED is a CallStatus of type QUEUED.
	CallStatusQUEUED CallStatus = "QUEUED"
	// CallStatusINPROGRESS is a CallStatus of type IN_PROGRESS.
	CallStatusINPROGRESS CallStatus = "IN_PROGRESS"
	// CallStatusENDED is a CallStatus of type ENDED.
	CallStatusENDED CallStatus = "ENDED"
	// CallStatusAIENDED is a CallStatus of type AI_ENDED.
	CallStatusAIENDED CallStatus = "AI_ENDED"
	// CallStatusFORWARDED is a CallStatus of type FORWARDED.
	CallStatusFORWARDED CallStatus = "FORWARDED"
	// CallStatusFAILED is a CallStatus of type FAILED.
	CallStatusFAILED CallStatus = "FAILED"
)

var ErrInvalidCallStatus = errors.New("not a valid CallStatus")

// String implements the Stringer interface.
func (x CallStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CallStatus) IsValid() bool {
	_, err := ParseCallStatus(string(x))
	return err == nil
}

var _CallStatusValue = map[string]CallStatus{
	"CREATED":     CallStatusCREATED,
	"QUEUED":      CallStatusQUEUED,
	"IN_PROGRESS": CallStatusINPROGRESS,
	"ENDED":       CallStatusENDED,
	"AI_ENDED":    CallStatusAIENDED,
	"FORWARDED":   CallStatusFORWARDED,
	"FAILED":      CallStatusFAILED,
}

// ParseCallStatus attempts to convert a string to a CallStatus.
func ParseCallStatus(name string) (CallStatus, error) {
	if x, ok := _CallStatusValue[name]; ok {
		return x, nil
	}
	return CallStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidCallStatus)
}

const (
	// CustomerCaseStatusCREATED is a CustomerCaseStatus of type CREATED.
	CustomerCaseStatusCREATED CustomerCaseStatus = "CREATED"
	// CustomerCaseStatusPENDING is a CustomerCaseStatus of type PENDING.
	CustomerCaseStatusPENDING CustomerCaseStatus = "PENDING"
	// CustomerCaseStatusPARTIALLYPAID is a CustomerCaseStatus of type PARTIALLY_PAID.
	CustomerCaseStatusPARTIALLYPAID CustomerCaseStatus = "PARTIALLY_PAID"
	// CustomerCaseStatusPAID is a CustomerCaseStatus of type PAID.
	CustomerCaseStatusPAID CustomerCaseStatus = "PAID"
	// CustomerCaseStatusCLOSED is a CustomerCaseStatus of type CLOSED.
	CustomerCaseStatusCLOSED CustomerCaseStatus = "CLOSED"
)

var ErrInvalidCustomerCaseStatus = errors.New("not a valid CustomerCaseStatus")

// String implements the Stringer interface.
func (x CustomerCaseStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CustomerCaseStatus) IsValid() bool {
	_, err := ParseCustomerCaseStatus(string(x))
	return err == nil
}

var _CustomerCaseStatusValue = map[string]CustomerCaseStatus{
	"CREATED":        CustomerCaseStatusCREATED,
	"PENDING":        CustomerCaseStatusPENDING,
	"PARTIALLY_PAID": CustomerCaseStatusPARTIALLYPAID,
	"PAID":           CustomerCaseStatusPAID,
	"CLOSED":         CustomerCaseStatusCLOSED,
}

// ParseCustomerCaseStatus attempts to convert a string to a CustomerCaseStatus.
func ParseCustomerCaseStatus(name string) (CustomerCaseStatus, error) {
	if x, ok := _CustomerCaseStatusValue[name]; ok {
		return x, nil
	}
	return CustomerCaseStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidCustomerCaseStatus)
}
