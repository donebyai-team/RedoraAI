// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// LeadStatusNEW is a LeadStatus of type NEW.
	LeadStatusNEW LeadStatus = "NEW"
	// LeadStatusCOMPLETED is a LeadStatus of type COMPLETED.
	LeadStatusCOMPLETED LeadStatus = "COMPLETED"
	// LeadStatusNOTRELEVANT is a LeadStatus of type NOT_RELEVANT.
	LeadStatusNOTRELEVANT LeadStatus = "NOT_RELEVANT"
)

var ErrInvalidLeadStatus = errors.New("not a valid LeadStatus")

// String implements the Stringer interface.
func (x LeadStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LeadStatus) IsValid() bool {
	_, err := ParseLeadStatus(string(x))
	return err == nil
}

var _LeadStatusValue = map[string]LeadStatus{
	"NEW":          LeadStatusNEW,
	"COMPLETED":    LeadStatusCOMPLETED,
	"NOT_RELEVANT": LeadStatusNOTRELEVANT,
}

// ParseLeadStatus attempts to convert a string to a LeadStatus.
func ParseLeadStatus(name string) (LeadStatus, error) {
	if x, ok := _LeadStatusValue[name]; ok {
		return x, nil
	}
	return LeadStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidLeadStatus)
}

const (
	// LeadTypeCOMMENT is a LeadType of type COMMENT.
	LeadTypeCOMMENT LeadType = "COMMENT"
	// LeadTypePOST is a LeadType of type POST.
	LeadTypePOST LeadType = "POST"
)

var ErrInvalidLeadType = errors.New("not a valid LeadType")

// String implements the Stringer interface.
func (x LeadType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x LeadType) IsValid() bool {
	_, err := ParseLeadType(string(x))
	return err == nil
}

var _LeadTypeValue = map[string]LeadType{
	"COMMENT": LeadTypeCOMMENT,
	"POST":    LeadTypePOST,
}

// ParseLeadType attempts to convert a string to a LeadType.
func ParseLeadType(name string) (LeadType, error) {
	if x, ok := _LeadTypeValue[name]; ok {
		return x, nil
	}
	return LeadType(""), fmt.Errorf("%s is %w", name, ErrInvalidLeadType)
}

const (
	// SourceTypeSUBREDDIT is a SourceType of type SUBREDDIT.
	SourceTypeSUBREDDIT SourceType = "SUBREDDIT"
)

var ErrInvalidSourceType = errors.New("not a valid SourceType")

// String implements the Stringer interface.
func (x SourceType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SourceType) IsValid() bool {
	_, err := ParseSourceType(string(x))
	return err == nil
}

var _SourceTypeValue = map[string]SourceType{
	"SUBREDDIT": SourceTypeSUBREDDIT,
}

// ParseSourceType attempts to convert a string to a SourceType.
func ParseSourceType(name string) (SourceType, error) {
	if x, ok := _SourceTypeValue[name]; ok {
		return x, nil
	}
	return SourceType(""), fmt.Errorf("%s is %w", name, ErrInvalidSourceType)
}
