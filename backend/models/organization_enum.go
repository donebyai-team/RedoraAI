// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package models

import (
	"errors"
	"fmt"
)

const (
	// NotificationFrequencyNONE is a NotificationFrequency of type NONE.
	NotificationFrequencyNONE NotificationFrequency = "NONE"
	// NotificationFrequencyDAILY is a NotificationFrequency of type DAILY.
	NotificationFrequencyDAILY NotificationFrequency = "DAILY"
	// NotificationFrequencyWEEKLY is a NotificationFrequency of type WEEKLY.
	NotificationFrequencyWEEKLY NotificationFrequency = "WEEKLY"
)

var ErrInvalidNotificationFrequency = errors.New("not a valid NotificationFrequency")

// String implements the Stringer interface.
func (x NotificationFrequency) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x NotificationFrequency) IsValid() bool {
	_, err := ParseNotificationFrequency(string(x))
	return err == nil
}

var _NotificationFrequencyValue = map[string]NotificationFrequency{
	"NONE":   NotificationFrequencyNONE,
	"DAILY":  NotificationFrequencyDAILY,
	"WEEKLY": NotificationFrequencyWEEKLY,
}

// ParseNotificationFrequency attempts to convert a string to a NotificationFrequency.
func ParseNotificationFrequency(name string) (NotificationFrequency, error) {
	if x, ok := _NotificationFrequencyValue[name]; ok {
		return x, nil
	}
	return NotificationFrequency(""), fmt.Errorf("%s is %w", name, ErrInvalidNotificationFrequency)
}

const (
	// OrgActivityTypeCOMMENTDISABLEDACCOUNTAGENEW is a OrgActivityType of type COMMENT_DISABLED_ACCOUNT_AGE_NEW.
	OrgActivityTypeCOMMENTDISABLEDACCOUNTAGENEW OrgActivityType = "COMMENT_DISABLED_ACCOUNT_AGE_NEW"
	// OrgActivityTypeCOMMENTDISABLEDLOWKARMA is a OrgActivityType of type COMMENT_DISABLED_LOW_KARMA.
	OrgActivityTypeCOMMENTDISABLEDLOWKARMA OrgActivityType = "COMMENT_DISABLED_LOW_KARMA"
	// OrgActivityTypeCOMMENTENABLEDWARMEDUP is a OrgActivityType of type COMMENT_ENABLED_WARMED_UP.
	OrgActivityTypeCOMMENTENABLEDWARMEDUP OrgActivityType = "COMMENT_ENABLED_WARMED_UP"
)

var ErrInvalidOrgActivityType = errors.New("not a valid OrgActivityType")

// String implements the Stringer interface.
func (x OrgActivityType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OrgActivityType) IsValid() bool {
	_, err := ParseOrgActivityType(string(x))
	return err == nil
}

var _OrgActivityTypeValue = map[string]OrgActivityType{
	"COMMENT_DISABLED_ACCOUNT_AGE_NEW": OrgActivityTypeCOMMENTDISABLEDACCOUNTAGENEW,
	"COMMENT_DISABLED_LOW_KARMA":       OrgActivityTypeCOMMENTDISABLEDLOWKARMA,
	"COMMENT_ENABLED_WARMED_UP":        OrgActivityTypeCOMMENTENABLEDWARMEDUP,
}

// ParseOrgActivityType attempts to convert a string to a OrgActivityType.
func ParseOrgActivityType(name string) (OrgActivityType, error) {
	if x, ok := _OrgActivityTypeValue[name]; ok {
		return x, nil
	}
	return OrgActivityType(""), fmt.Errorf("%s is %w", name, ErrInvalidOrgActivityType)
}
