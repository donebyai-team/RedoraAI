// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package reddit

import (
	"errors"
	"fmt"
)

const (
	// SortByTOP is a SortBy of type TOP.
	SortByTOP SortBy = "TOP"
	// SortByHOT is a SortBy of type HOT.
	SortByHOT SortBy = "HOT"
	// SortByRELEVANCE is a SortBy of type RELEVANCE.
	SortByRELEVANCE SortBy = "RELEVANCE"
	// SortByNEW is a SortBy of type NEW.
	SortByNEW SortBy = "NEW"
	// SortByCOMMENTCOUNT is a SortBy of type COMMENT_COUNT.
	SortByCOMMENTCOUNT SortBy = "COMMENT_COUNT"
	// SortByCONFIDENCE is a SortBy of type CONFIDENCE.
	SortByCONFIDENCE SortBy = "CONFIDENCE"
)

var ErrInvalidSortBy = errors.New("not a valid SortBy")

// String implements the Stringer interface.
func (x SortBy) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x SortBy) IsValid() bool {
	_, err := ParseSortBy(string(x))
	return err == nil
}

var _SortByValue = map[string]SortBy{
	"TOP":           SortByTOP,
	"HOT":           SortByHOT,
	"RELEVANCE":     SortByRELEVANCE,
	"NEW":           SortByNEW,
	"COMMENT_COUNT": SortByCOMMENTCOUNT,
	"CONFIDENCE":    SortByCONFIDENCE,
}

// ParseSortBy attempts to convert a string to a SortBy.
func ParseSortBy(name string) (SortBy, error) {
	if x, ok := _SortByValue[name]; ok {
		return x, nil
	}
	return SortBy(""), fmt.Errorf("%s is %w", name, ErrInvalidSortBy)
}

const (
	// TimeRangeALL is a TimeRange of type ALL.
	TimeRangeALL TimeRange = "ALL"
	// TimeRangeYEAR is a TimeRange of type YEAR.
	TimeRangeYEAR TimeRange = "YEAR"
	// TimeRangeWEEK is a TimeRange of type WEEK.
	TimeRangeWEEK TimeRange = "WEEK"
	// TimeRangeMONTH is a TimeRange of type MONTH.
	TimeRangeMONTH TimeRange = "MONTH"
	// TimeRangeTODAY is a TimeRange of type TODAY.
	TimeRangeTODAY TimeRange = "TODAY"
	// TimeRangeHOUR is a TimeRange of type HOUR.
	TimeRangeHOUR TimeRange = "HOUR"
)

var ErrInvalidTimeRange = errors.New("not a valid TimeRange")

// String implements the Stringer interface.
func (x TimeRange) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TimeRange) IsValid() bool {
	_, err := ParseTimeRange(string(x))
	return err == nil
}

var _TimeRangeValue = map[string]TimeRange{
	"ALL":   TimeRangeALL,
	"YEAR":  TimeRangeYEAR,
	"WEEK":  TimeRangeWEEK,
	"MONTH": TimeRangeMONTH,
	"TODAY": TimeRangeTODAY,
	"HOUR":  TimeRangeHOUR,
}

// ParseTimeRange attempts to convert a string to a TimeRange.
func ParseTimeRange(name string) (TimeRange, error) {
	if x, ok := _TimeRangeValue[name]; ok {
		return x, nil
	}
	return TimeRange(""), fmt.Errorf("%s is %w", name, ErrInvalidTimeRange)
}
